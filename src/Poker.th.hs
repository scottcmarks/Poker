-- /Users/scott/Poker/src/Poker.hs:(31,1)-(71,2): Splicing declarations
instance Database.Persist.Class.PersistField.PersistField Record_Action where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_aBWO
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["action"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_aBWO))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_aBWP
          -> let columns_aBWQ = Data.HashMap.Strict.fromList x_aBWP
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_aBWR
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_aBWR)) columns_aBWQ
                             of
                               GHC.Maybe.Just v_aBWS -> v_aBWS
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["action"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Action where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_aBWT
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["note"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_aBWT))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_aBWU
          -> let columns_aBWV = Data.HashMap.Strict.fromList x_aBWU
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_aBWW
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_aBWW)) columns_aBWV
                             of
                               GHC.Maybe.Just v_aBWX -> v_aBWX
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Type where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_aBWY
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["type"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_aBWY))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_aBWZ
          -> let columns_aBX0 = Data.HashMap.Strict.fromList x_aBWZ
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_aBX1
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_aBX1)) columns_aBX0
                             of
                               GHC.Maybe.Just v_aBX2 -> v_aBX2
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["type"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Type where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note_to_Action where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_aBX3
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["note_id", "action_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_aBX3))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_aBX4
          -> let columns_aBX5 = Data.HashMap.Strict.fromList x_aBX4
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_aBX6
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_aBX6)) columns_aBX5
                             of
                               GHC.Maybe.Just v_aBX7 -> v_aBX7
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note_id", "action_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note_to_Action where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note_to_Type where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_aBX8
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["note_id", "type_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_aBX8))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_aBX9
          -> let columns_aBXa = Data.HashMap.Strict.fromList x_aBX9
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_aBXb
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_aBXb)) columns_aBXa
                             of
                               GHC.Maybe.Just v_aBXc -> v_aBXc
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note_id", "type_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note_to_Type where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Poker where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_aBXd
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["date", "amount", "note_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_aBXd))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_aBXe
          -> let columns_aBXf = Data.HashMap.Strict.fromList x_aBXe
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_aBXg
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_aBXg)) columns_aBXf
                             of
                               GHC.Maybe.Just v_aBXh -> v_aBXh
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["date", "amount", "note_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Poker where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
data Record_Action
  = Record_Action {record_ActionAction :: !String}
  deriving (Show, Typeable)
type Record_ActionId =
    Database.Persist.Class.PersistEntity.Key Record_Action
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Action where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Action = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Action
  newtype Database.Persist.Class.PersistEntity.Key Record_Action
    = Record_ActionKey {unRecord_ActionKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Action typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Action =>
      Record_ActionId |
      typ Data.Type.Equality.~ String => Record_ActionAction
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_ActionKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_ActionKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Action")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "actions")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_ActionId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Action")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=actions"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "action")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "action")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Action x_aBXi)
    = [Database.Persist.Class.PersistField.SomePersistField x_aBXi]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_aBXk]
    = Record_Action
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "action"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_aBXk
  Database.Persist.Class.PersistEntity.fromPersistValues x_aBXj
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Action: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_aBXj))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Action _action_aBXl)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_ActionId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_ActionAction
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "action")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "action")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_ActionId
  Database.Persist.Class.PersistEntity.fieldLens Record_ActionId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_aBXm)
           key_aBXn
           -> (Database.Persist.Class.PersistEntity.Entity key_aBXn)
                value_aBXm)
  Database.Persist.Class.PersistEntity.fieldLens Record_ActionAction
    = (Database.Persist.TH.lensPTH
         (record_ActionAction
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aBXo
                                                        value_aBXp)
           x_aBXq
           -> (Database.Persist.Class.PersistEntity.Entity key_aBXo)
                value_aBXp {record_ActionAction = x_aBXq})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Action where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_ActionKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_ActionKey
data Record_Note
  = Record_Note {record_NoteNote :: !String}
  deriving (Show, Typeable)
type Record_NoteId =
    Database.Persist.Class.PersistEntity.Key Record_Note
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note
  newtype Database.Persist.Class.PersistEntity.Key Record_Note
    = Record_NoteKey {unRecord_NoteKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_NoteId |
      typ Data.Type.Equality.~ String => Record_NoteNote
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_NoteKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_NoteKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "notes")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_NoteId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=notes"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note x_aBXr)
    = [Database.Persist.Class.PersistField.SomePersistField x_aBXr]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_aBXt]
    = Record_Note
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_aBXt
  Database.Persist.Class.PersistEntity.fromPersistValues x_aBXs
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_aBXs))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note _note_aBXu)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_NoteId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_NoteNote
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField = Record_NoteId
  Database.Persist.Class.PersistEntity.fieldLens Record_NoteId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_aBXv)
           key_aBXw
           -> (Database.Persist.Class.PersistEntity.Entity key_aBXw)
                value_aBXv)
  Database.Persist.Class.PersistEntity.fieldLens Record_NoteNote
    = (Database.Persist.TH.lensPTH
         (record_NoteNote
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aBXx
                                                        value_aBXy)
           x_aBXz
           -> (Database.Persist.Class.PersistEntity.Entity key_aBXx)
                value_aBXy {record_NoteNote = x_aBXz})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note where
  Database.Persist.Class.PersistStore.toBackendKey = unRecord_NoteKey
  Database.Persist.Class.PersistStore.fromBackendKey = Record_NoteKey
data Record_Type
  = Record_Type {record_TypeType :: !String}
  deriving (Show, Typeable)
type Record_TypeId =
    Database.Persist.Class.PersistEntity.Key Record_Type
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Type where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Type = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Type
  newtype Database.Persist.Class.PersistEntity.Key Record_Type
    = Record_TypeKey {unRecord_TypeKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Type typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Type =>
      Record_TypeId |
      typ Data.Type.Equality.~ String => Record_TypeType
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_TypeKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_TypeKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Type")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "types")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_TypeId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Type")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=types"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "type")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "type")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Type x_aBXA)
    = [Database.Persist.Class.PersistField.SomePersistField x_aBXA]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_aBXC]
    = Record_Type
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "type"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_aBXC
  Database.Persist.Class.PersistEntity.fromPersistValues x_aBXB
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Type: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_aBXB))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Type _type_aBXD)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_TypeId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_TypeType
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "type")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "type")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField = Record_TypeId
  Database.Persist.Class.PersistEntity.fieldLens Record_TypeId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_aBXE)
           key_aBXF
           -> (Database.Persist.Class.PersistEntity.Entity key_aBXF)
                value_aBXE)
  Database.Persist.Class.PersistEntity.fieldLens Record_TypeType
    = (Database.Persist.TH.lensPTH
         (record_TypeType
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aBXG
                                                        value_aBXH)
           x_aBXI
           -> (Database.Persist.Class.PersistEntity.Entity key_aBXG)
                value_aBXH {record_TypeType = x_aBXI})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Type where
  Database.Persist.Class.PersistStore.toBackendKey = unRecord_TypeKey
  Database.Persist.Class.PersistStore.fromBackendKey = Record_TypeKey
data Record_Note_to_Action
  = Record_Note_to_Action {record_Note_to_ActionNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note),
                           record_Note_to_ActionAction_id :: !(Database.Persist.Class.PersistEntity.Key Record_Action)}
  deriving (Show, Typeable)
type Record_Note_to_ActionId =
    Database.Persist.Class.PersistEntity.Key Record_Note_to_Action
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note_to_Action where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note_to_Action = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note_to_Action
  newtype Database.Persist.Class.PersistEntity.Key Record_Note_to_Action
    = Record_Note_to_ActionKey {unRecord_Note_to_ActionKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note_to_Action typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note_to_Action =>
      Record_Note_to_ActionId |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_Note_to_ActionNote_id |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Action =>
      Record_Note_to_ActionAction_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_Note_to_ActionKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_Note_to_ActionKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "note_to_action")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=note_to_action"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64"))),
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "action_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "action_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_ActionId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Action")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note_to_Action x_aBXJ x_aBXK)
    = [Database.Persist.Class.PersistField.SomePersistField x_aBXJ,
       Database.Persist.Class.PersistField.SomePersistField x_aBXK]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_aBXM, x2_aBXN]
    = Record_Note_to_Action
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_aBXM
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "action_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_aBXN
  Database.Persist.Class.PersistEntity.fromPersistValues x_aBXL
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note_to_Action: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_aBXL))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note_to_Action _note_id_aBXO _action_id_aBXP)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note_to_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionAction_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "action_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "action_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_Note_to_ActionId
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_aBXQ)
           key_aBXR
           -> (Database.Persist.Class.PersistEntity.Entity key_aBXR)
                value_aBXQ)
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionNote_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_ActionNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aBXS
                                                        value_aBXT)
           x_aBXU
           -> (Database.Persist.Class.PersistEntity.Entity key_aBXS)
                value_aBXT {record_Note_to_ActionNote_id = x_aBXU})
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionAction_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_ActionAction_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aBXS
                                                        value_aBXT)
           x_aBXU
           -> (Database.Persist.Class.PersistEntity.Entity key_aBXS)
                value_aBXT {record_Note_to_ActionAction_id = x_aBXU})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note_to_Action where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_Note_to_ActionKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_Note_to_ActionKey
data Record_Note_to_Type
  = Record_Note_to_Type {record_Note_to_TypeNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note),
                         record_Note_to_TypeType_id :: !(Database.Persist.Class.PersistEntity.Key Record_Type)}
  deriving (Show, Typeable)
type Record_Note_to_TypeId =
    Database.Persist.Class.PersistEntity.Key Record_Note_to_Type
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note_to_Type where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note_to_Type = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note_to_Type
  newtype Database.Persist.Class.PersistEntity.Key Record_Note_to_Type
    = Record_Note_to_TypeKey {unRecord_Note_to_TypeKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note_to_Type typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note_to_Type =>
      Record_Note_to_TypeId |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_Note_to_TypeNote_id |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Type =>
      Record_Note_to_TypeType_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_Note_to_TypeKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_Note_to_TypeKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "note_to_type")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=note_to_type"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64"))),
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "type_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "type_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_TypeId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Type")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note_to_Type x_aBXV x_aBXW)
    = [Database.Persist.Class.PersistField.SomePersistField x_aBXV,
       Database.Persist.Class.PersistField.SomePersistField x_aBXW]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_aBXY, x2_aBXZ]
    = Record_Note_to_Type
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_aBXY
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "type_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_aBXZ
  Database.Persist.Class.PersistEntity.fromPersistValues x_aBXX
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note_to_Type: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_aBXX))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note_to_Type _note_id_aBY0 _type_id_aBY1)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note_to_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeType_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "type_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "type_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_Note_to_TypeId
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_aBY2)
           key_aBY3
           -> (Database.Persist.Class.PersistEntity.Entity key_aBY3)
                value_aBY2)
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeNote_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_TypeNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aBY4
                                                        value_aBY5)
           x_aBY6
           -> (Database.Persist.Class.PersistEntity.Entity key_aBY4)
                value_aBY5 {record_Note_to_TypeNote_id = x_aBY6})
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeType_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_TypeType_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aBY4
                                                        value_aBY5)
           x_aBY6
           -> (Database.Persist.Class.PersistEntity.Entity key_aBY4)
                value_aBY5 {record_Note_to_TypeType_id = x_aBY6})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note_to_Type where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_Note_to_TypeKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_Note_to_TypeKey
data Record_Poker
  = Record_Poker {record_PokerDate :: !String,
                  record_PokerAmount :: !Int,
                  record_PokerNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note)}
  deriving (Show, Typeable)
type Record_PokerId =
    Database.Persist.Class.PersistEntity.Key Record_Poker
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Poker where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Poker = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Poker
  newtype Database.Persist.Class.PersistEntity.Key Record_Poker
    = Record_PokerKey {unRecord_PokerKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Poker typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Poker =>
      Record_PokerId |
      typ Data.Type.Equality.~ String => Record_PokerDate |
      typ Data.Type.Equality.~ Int => Record_PokerAmount |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_PokerNote_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_PokerKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_PokerKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Poker")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "data")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_PokerId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Poker")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=data"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "date")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "date")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference,
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "amount")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "amount")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Int")))
                   Database.Persist.Types.Base.SqlInt64)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference,
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Poker x_aBY7 x_aBY8 x_aBY9)
    = [Database.Persist.Class.PersistField.SomePersistField x_aBY7,
       Database.Persist.Class.PersistField.SomePersistField x_aBY8,
       Database.Persist.Class.PersistField.SomePersistField x_aBY9]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_aBYb, x2_aBYc, x3_aBYd]
    = Record_Poker
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "date"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_aBYb
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "amount"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_aBYc
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x3_aBYd
  Database.Persist.Class.PersistEntity.fromPersistValues x_aBYa
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Poker: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_aBYa))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Poker _date_aBYe _amount_aBYf _note_id_aBYg)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_PokerId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_PokerId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Poker")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerDate
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "date")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "date")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerAmount
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "amount")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "amount")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Int")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_PokerId
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_aBYh)
           key_aBYi
           -> (Database.Persist.Class.PersistEntity.Entity key_aBYi)
                value_aBYh)
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerDate
    = (Database.Persist.TH.lensPTH
         (record_PokerDate
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aBYj
                                                        value_aBYk)
           x_aBYl
           -> (Database.Persist.Class.PersistEntity.Entity key_aBYj)
                value_aBYk {record_PokerDate = x_aBYl})
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerAmount
    = (Database.Persist.TH.lensPTH
         (record_PokerAmount
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aBYj
                                                        value_aBYk)
           x_aBYl
           -> (Database.Persist.Class.PersistEntity.Entity key_aBYj)
                value_aBYk {record_PokerAmount = x_aBYl})
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerNote_id
    = (Database.Persist.TH.lensPTH
         (record_PokerNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aBYj
                                                        value_aBYk)
           x_aBYl
           -> (Database.Persist.Class.PersistEntity.Entity key_aBYj)
                value_aBYk {record_PokerNote_id = x_aBYl})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Poker where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_PokerKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_PokerKey
migrateAll :: Database.Persist.Sql.Types.Migration
migrateAll
  = do let defs_aBYm
             = [(((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Action")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "actions")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_ActionId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Action")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=actions"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "action")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "action")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "notes")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_NoteId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=notes"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Type")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "types")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_TypeId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Type")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=types"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "type")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "type")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "note_to_action")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=note_to_action"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64"))),
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "action_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "action_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_ActionId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Action")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "note_to_type")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=note_to_type"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64"))),
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "type_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "type_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_TypeId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Type")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Poker")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "data")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_PokerId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Poker")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=data"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "date")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "date")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference,
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "amount")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "amount")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Int")))
                             Database.Persist.Types.Base.SqlInt64)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference,
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False]
       (Database.Persist.Sql.Migration.migrate defs_aBYm)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Action")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "actions")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_ActionId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Action")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=actions"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "action")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "action")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_aBYm)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "notes")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_NoteId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=notes"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_aBYm)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Type")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "types")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_TypeId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Type")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=types"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "type")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "type")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_aBYm)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "note_to_action")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=note_to_action"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64"))),
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "action_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "action_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_ActionId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Action")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_aBYm)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "note_to_type")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=note_to_type"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64"))),
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "type_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "type_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_TypeId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Type")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_aBYm)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Poker")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "data")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_PokerId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Poker")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=data"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "date")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "date")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference,
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "amount")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "amount")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Int")))
                       Database.Persist.Types.Base.SqlInt64)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference,
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
-- /Users/scott/Poker/src/Poker.hs:(50,1)-(90,2): Splicing declarations
instance Database.Persist.Class.PersistField.PersistField Record_Action where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_aT8W
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["action"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_aT8W))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_aT8X
          -> let columns_aT8Y = Data.HashMap.Strict.fromList x_aT8X
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_aT8Z
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_aT8Z)) columns_aT8Y
                             of
                               GHC.Maybe.Just v_aT90 -> v_aT90
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["action"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Action where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_aT91
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["note"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_aT91))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_aT92
          -> let columns_aT93 = Data.HashMap.Strict.fromList x_aT92
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_aT94
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_aT94)) columns_aT93
                             of
                               GHC.Maybe.Just v_aT95 -> v_aT95
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Type where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_aT96
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["type"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_aT96))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_aT97
          -> let columns_aT98 = Data.HashMap.Strict.fromList x_aT97
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_aT99
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_aT99)) columns_aT98
                             of
                               GHC.Maybe.Just v_aT9a -> v_aT9a
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["type"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Type where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note_to_Action where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_aT9b
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["note_id", "action_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_aT9b))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_aT9c
          -> let columns_aT9d = Data.HashMap.Strict.fromList x_aT9c
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_aT9e
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_aT9e)) columns_aT9d
                             of
                               GHC.Maybe.Just v_aT9f -> v_aT9f
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note_id", "action_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note_to_Action where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note_to_Type where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_aT9g
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["note_id", "type_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_aT9g))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_aT9h
          -> let columns_aT9i = Data.HashMap.Strict.fromList x_aT9h
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_aT9j
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_aT9j)) columns_aT9i
                             of
                               GHC.Maybe.Just v_aT9k -> v_aT9k
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note_id", "type_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note_to_Type where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Poker where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_aT9l
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["date", "amount", "note_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_aT9l))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_aT9m
          -> let columns_aT9n = Data.HashMap.Strict.fromList x_aT9m
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_aT9o
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_aT9o)) columns_aT9n
                             of
                               GHC.Maybe.Just v_aT9p -> v_aT9p
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["date", "amount", "note_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Poker where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
data Record_Action
  = Record_Action {record_ActionAction :: !String}
  deriving (Show, Typeable)
type Record_ActionId =
    Database.Persist.Class.PersistEntity.Key Record_Action
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Action where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Action = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Action
  newtype Database.Persist.Class.PersistEntity.Key Record_Action
    = Record_ActionKey {unRecord_ActionKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Action typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Action =>
      Record_ActionId |
      typ Data.Type.Equality.~ String => Record_ActionAction
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_ActionKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_ActionKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Action")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "actions")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_ActionId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Action")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=actions"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "action")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "action")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Action x_aT9q)
    = [Database.Persist.Class.PersistField.SomePersistField x_aT9q]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_aT9s]
    = Record_Action
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "action"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_aT9s
  Database.Persist.Class.PersistEntity.fromPersistValues x_aT9r
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Action: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_aT9r))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Action _action_aT9t)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_ActionId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_ActionAction
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "action")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "action")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_ActionId
  Database.Persist.Class.PersistEntity.fieldLens Record_ActionId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_aT9u)
           key_aT9v
           -> (Database.Persist.Class.PersistEntity.Entity key_aT9v)
                value_aT9u)
  Database.Persist.Class.PersistEntity.fieldLens Record_ActionAction
    = (Database.Persist.TH.lensPTH
         (record_ActionAction
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aT9w
                                                        value_aT9x)
           x_aT9y
           -> (Database.Persist.Class.PersistEntity.Entity key_aT9w)
                value_aT9x {record_ActionAction = x_aT9y})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Action where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_ActionKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_ActionKey
data Record_Note
  = Record_Note {record_NoteNote :: !String}
  deriving (Show, Typeable)
type Record_NoteId =
    Database.Persist.Class.PersistEntity.Key Record_Note
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note
  newtype Database.Persist.Class.PersistEntity.Key Record_Note
    = Record_NoteKey {unRecord_NoteKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_NoteId |
      typ Data.Type.Equality.~ String => Record_NoteNote
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_NoteKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_NoteKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "notes")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_NoteId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=notes"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note x_aT9z)
    = [Database.Persist.Class.PersistField.SomePersistField x_aT9z]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_aT9B]
    = Record_Note
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_aT9B
  Database.Persist.Class.PersistEntity.fromPersistValues x_aT9A
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_aT9A))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note _note_aT9C)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_NoteId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_NoteNote
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField = Record_NoteId
  Database.Persist.Class.PersistEntity.fieldLens Record_NoteId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_aT9D)
           key_aT9E
           -> (Database.Persist.Class.PersistEntity.Entity key_aT9E)
                value_aT9D)
  Database.Persist.Class.PersistEntity.fieldLens Record_NoteNote
    = (Database.Persist.TH.lensPTH
         (record_NoteNote
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aT9F
                                                        value_aT9G)
           x_aT9H
           -> (Database.Persist.Class.PersistEntity.Entity key_aT9F)
                value_aT9G {record_NoteNote = x_aT9H})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note where
  Database.Persist.Class.PersistStore.toBackendKey = unRecord_NoteKey
  Database.Persist.Class.PersistStore.fromBackendKey = Record_NoteKey
data Record_Type
  = Record_Type {record_TypeType :: !String}
  deriving (Show, Typeable)
type Record_TypeId =
    Database.Persist.Class.PersistEntity.Key Record_Type
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Type where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Type = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Type
  newtype Database.Persist.Class.PersistEntity.Key Record_Type
    = Record_TypeKey {unRecord_TypeKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Type typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Type =>
      Record_TypeId |
      typ Data.Type.Equality.~ String => Record_TypeType
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_TypeKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_TypeKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Type")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "types")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_TypeId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Type")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=types"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "type")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "type")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Type x_aT9I)
    = [Database.Persist.Class.PersistField.SomePersistField x_aT9I]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_aT9K]
    = Record_Type
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "type"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_aT9K
  Database.Persist.Class.PersistEntity.fromPersistValues x_aT9J
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Type: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_aT9J))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Type _type_aT9L)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_TypeId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_TypeType
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "type")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "type")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField = Record_TypeId
  Database.Persist.Class.PersistEntity.fieldLens Record_TypeId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_aT9M)
           key_aT9N
           -> (Database.Persist.Class.PersistEntity.Entity key_aT9N)
                value_aT9M)
  Database.Persist.Class.PersistEntity.fieldLens Record_TypeType
    = (Database.Persist.TH.lensPTH
         (record_TypeType
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aT9O
                                                        value_aT9P)
           x_aT9Q
           -> (Database.Persist.Class.PersistEntity.Entity key_aT9O)
                value_aT9P {record_TypeType = x_aT9Q})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Type where
  Database.Persist.Class.PersistStore.toBackendKey = unRecord_TypeKey
  Database.Persist.Class.PersistStore.fromBackendKey = Record_TypeKey
data Record_Note_to_Action
  = Record_Note_to_Action {record_Note_to_ActionNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note),
                           record_Note_to_ActionAction_id :: !(Database.Persist.Class.PersistEntity.Key Record_Action)}
  deriving (Show, Typeable)
type Record_Note_to_ActionId =
    Database.Persist.Class.PersistEntity.Key Record_Note_to_Action
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note_to_Action where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note_to_Action = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note_to_Action
  newtype Database.Persist.Class.PersistEntity.Key Record_Note_to_Action
    = Record_Note_to_ActionKey {unRecord_Note_to_ActionKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note_to_Action typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note_to_Action =>
      Record_Note_to_ActionId |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_Note_to_ActionNote_id |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Action =>
      Record_Note_to_ActionAction_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_Note_to_ActionKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_Note_to_ActionKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "note_to_action")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=note_to_action"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64"))),
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "action_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "action_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_ActionId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Action")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note_to_Action x_aT9R x_aT9S)
    = [Database.Persist.Class.PersistField.SomePersistField x_aT9R,
       Database.Persist.Class.PersistField.SomePersistField x_aT9S]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_aT9U, x2_aT9V]
    = Record_Note_to_Action
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_aT9U
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "action_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_aT9V
  Database.Persist.Class.PersistEntity.fromPersistValues x_aT9T
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note_to_Action: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_aT9T))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note_to_Action _note_id_aT9W _action_id_aT9X)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note_to_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionAction_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "action_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "action_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_Note_to_ActionId
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_aT9Y)
           key_aT9Z
           -> (Database.Persist.Class.PersistEntity.Entity key_aT9Z)
                value_aT9Y)
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionNote_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_ActionNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aTa0
                                                        value_aTa1)
           x_aTa2
           -> (Database.Persist.Class.PersistEntity.Entity key_aTa0)
                value_aTa1 {record_Note_to_ActionNote_id = x_aTa2})
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionAction_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_ActionAction_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aTa0
                                                        value_aTa1)
           x_aTa2
           -> (Database.Persist.Class.PersistEntity.Entity key_aTa0)
                value_aTa1 {record_Note_to_ActionAction_id = x_aTa2})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note_to_Action where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_Note_to_ActionKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_Note_to_ActionKey
data Record_Note_to_Type
  = Record_Note_to_Type {record_Note_to_TypeNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note),
                         record_Note_to_TypeType_id :: !(Database.Persist.Class.PersistEntity.Key Record_Type)}
  deriving (Show, Typeable)
type Record_Note_to_TypeId =
    Database.Persist.Class.PersistEntity.Key Record_Note_to_Type
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note_to_Type where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note_to_Type = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note_to_Type
  newtype Database.Persist.Class.PersistEntity.Key Record_Note_to_Type
    = Record_Note_to_TypeKey {unRecord_Note_to_TypeKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note_to_Type typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note_to_Type =>
      Record_Note_to_TypeId |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_Note_to_TypeNote_id |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Type =>
      Record_Note_to_TypeType_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_Note_to_TypeKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_Note_to_TypeKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "note_to_type")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=note_to_type"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64"))),
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "type_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "type_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_TypeId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Type")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note_to_Type x_aTa3 x_aTa4)
    = [Database.Persist.Class.PersistField.SomePersistField x_aTa3,
       Database.Persist.Class.PersistField.SomePersistField x_aTa4]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_aTa6, x2_aTa7]
    = Record_Note_to_Type
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_aTa6
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "type_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_aTa7
  Database.Persist.Class.PersistEntity.fromPersistValues x_aTa5
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note_to_Type: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_aTa5))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note_to_Type _note_id_aTa8 _type_id_aTa9)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note_to_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeType_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "type_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "type_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_Note_to_TypeId
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_aTaa)
           key_aTab
           -> (Database.Persist.Class.PersistEntity.Entity key_aTab)
                value_aTaa)
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeNote_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_TypeNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aTac
                                                        value_aTad)
           x_aTae
           -> (Database.Persist.Class.PersistEntity.Entity key_aTac)
                value_aTad {record_Note_to_TypeNote_id = x_aTae})
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeType_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_TypeType_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aTac
                                                        value_aTad)
           x_aTae
           -> (Database.Persist.Class.PersistEntity.Entity key_aTac)
                value_aTad {record_Note_to_TypeType_id = x_aTae})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note_to_Type where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_Note_to_TypeKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_Note_to_TypeKey
data Record_Poker
  = Record_Poker {record_PokerDate :: !String,
                  record_PokerAmount :: !Int,
                  record_PokerNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note)}
  deriving (Show, Typeable)
type Record_PokerId =
    Database.Persist.Class.PersistEntity.Key Record_Poker
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Poker where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Poker = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Poker
  newtype Database.Persist.Class.PersistEntity.Key Record_Poker
    = Record_PokerKey {unRecord_PokerKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Poker typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Poker =>
      Record_PokerId |
      typ Data.Type.Equality.~ String => Record_PokerDate |
      typ Data.Type.Equality.~ Int => Record_PokerAmount |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_PokerNote_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_PokerKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_PokerKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Poker")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "data")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_PokerId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Poker")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=data"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "date")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "date")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference,
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "amount")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "amount")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Int")))
                   Database.Persist.Types.Base.SqlInt64)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference,
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Poker x_aTaf x_aTag x_aTah)
    = [Database.Persist.Class.PersistField.SomePersistField x_aTaf,
       Database.Persist.Class.PersistField.SomePersistField x_aTag,
       Database.Persist.Class.PersistField.SomePersistField x_aTah]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_aTaj, x2_aTak, x3_aTal]
    = Record_Poker
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "date"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_aTaj
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "amount"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_aTak
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x3_aTal
  Database.Persist.Class.PersistEntity.fromPersistValues x_aTai
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Poker: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_aTai))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Poker _date_aTam _amount_aTan _note_id_aTao)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_PokerId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_PokerId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Poker")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerDate
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "date")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "date")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerAmount
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "amount")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "amount")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Int")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_PokerId
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_aTap)
           key_aTaq
           -> (Database.Persist.Class.PersistEntity.Entity key_aTaq)
                value_aTap)
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerDate
    = (Database.Persist.TH.lensPTH
         (record_PokerDate
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aTar
                                                        value_aTas)
           x_aTat
           -> (Database.Persist.Class.PersistEntity.Entity key_aTar)
                value_aTas {record_PokerDate = x_aTat})
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerAmount
    = (Database.Persist.TH.lensPTH
         (record_PokerAmount
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aTar
                                                        value_aTas)
           x_aTat
           -> (Database.Persist.Class.PersistEntity.Entity key_aTar)
                value_aTas {record_PokerAmount = x_aTat})
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerNote_id
    = (Database.Persist.TH.lensPTH
         (record_PokerNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aTar
                                                        value_aTas)
           x_aTat
           -> (Database.Persist.Class.PersistEntity.Entity key_aTar)
                value_aTas {record_PokerNote_id = x_aTat})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Poker where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_PokerKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_PokerKey
migrateAll :: Database.Persist.Sql.Types.Migration
migrateAll
  = do let defs_aTau
             = [(((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Action")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "actions")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_ActionId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Action")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=actions"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "action")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "action")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "notes")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_NoteId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=notes"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Type")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "types")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_TypeId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Type")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=types"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "type")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "type")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "note_to_action")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=note_to_action"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64"))),
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "action_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "action_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_ActionId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Action")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "note_to_type")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=note_to_type"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64"))),
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "type_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "type_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_TypeId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Type")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Poker")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "data")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_PokerId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Poker")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=data"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "date")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "date")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference,
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "amount")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "amount")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Int")))
                             Database.Persist.Types.Base.SqlInt64)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference,
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False]
       (Database.Persist.Sql.Migration.migrate defs_aTau)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Action")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "actions")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_ActionId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Action")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=actions"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "action")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "action")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_aTau)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "notes")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_NoteId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=notes"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_aTau)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Type")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "types")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_TypeId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Type")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=types"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "type")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "type")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_aTau)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "note_to_action")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=note_to_action"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64"))),
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "action_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "action_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_ActionId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Action")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_aTau)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "note_to_type")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=note_to_type"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64"))),
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "type_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "type_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_TypeId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Type")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_aTau)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Poker")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "data")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_PokerId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Poker")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=data"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "date")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "date")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference,
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "amount")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "amount")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Int")))
                       Database.Persist.Types.Base.SqlInt64)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference,
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
-- /Users/scott/Poker/src/Poker.hs:(51,1)-(91,2): Splicing declarations
instance Database.Persist.Class.PersistField.PersistField Record_Action where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_aZaS
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["action"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_aZaS))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_aZaT
          -> let columns_aZaU = Data.HashMap.Strict.fromList x_aZaT
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_aZaV
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_aZaV)) columns_aZaU
                             of
                               GHC.Maybe.Just v_aZaW -> v_aZaW
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["action"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Action where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_aZaX
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["note"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_aZaX))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_aZaY
          -> let columns_aZaZ = Data.HashMap.Strict.fromList x_aZaY
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_aZb0
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_aZb0)) columns_aZaZ
                             of
                               GHC.Maybe.Just v_aZb1 -> v_aZb1
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Type where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_aZb2
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["type"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_aZb2))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_aZb3
          -> let columns_aZb4 = Data.HashMap.Strict.fromList x_aZb3
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_aZb5
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_aZb5)) columns_aZb4
                             of
                               GHC.Maybe.Just v_aZb6 -> v_aZb6
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["type"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Type where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note_to_Action where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_aZb7
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["note_id", "action_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_aZb7))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_aZb8
          -> let columns_aZb9 = Data.HashMap.Strict.fromList x_aZb8
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_aZba
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_aZba)) columns_aZb9
                             of
                               GHC.Maybe.Just v_aZbb -> v_aZbb
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note_id", "action_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note_to_Action where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note_to_Type where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_aZbc
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["note_id", "type_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_aZbc))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_aZbd
          -> let columns_aZbe = Data.HashMap.Strict.fromList x_aZbd
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_aZbf
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_aZbf)) columns_aZbe
                             of
                               GHC.Maybe.Just v_aZbg -> v_aZbg
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note_id", "type_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note_to_Type where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Poker where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_aZbh
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["date", "amount", "note_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_aZbh))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_aZbi
          -> let columns_aZbj = Data.HashMap.Strict.fromList x_aZbi
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_aZbk
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_aZbk)) columns_aZbj
                             of
                               GHC.Maybe.Just v_aZbl -> v_aZbl
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["date", "amount", "note_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Poker where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
data Record_Action
  = Record_Action {record_ActionAction :: !String}
  deriving (Show, Typeable)
type Record_ActionId =
    Database.Persist.Class.PersistEntity.Key Record_Action
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Action where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Action = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Action
  newtype Database.Persist.Class.PersistEntity.Key Record_Action
    = Record_ActionKey {unRecord_ActionKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Action typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Action =>
      Record_ActionId |
      typ Data.Type.Equality.~ String => Record_ActionAction
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_ActionKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_ActionKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Action")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "actions")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_ActionId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Action")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=actions"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "action")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "action")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Action x_aZbm)
    = [Database.Persist.Class.PersistField.SomePersistField x_aZbm]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_aZbo]
    = Record_Action
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "action"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_aZbo
  Database.Persist.Class.PersistEntity.fromPersistValues x_aZbn
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Action: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_aZbn))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Action _action_aZbp)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_ActionId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_ActionAction
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "action")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "action")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_ActionId
  Database.Persist.Class.PersistEntity.fieldLens Record_ActionId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_aZbq)
           key_aZbr
           -> (Database.Persist.Class.PersistEntity.Entity key_aZbr)
                value_aZbq)
  Database.Persist.Class.PersistEntity.fieldLens Record_ActionAction
    = (Database.Persist.TH.lensPTH
         (record_ActionAction
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aZbs
                                                        value_aZbt)
           x_aZbu
           -> (Database.Persist.Class.PersistEntity.Entity key_aZbs)
                value_aZbt {record_ActionAction = x_aZbu})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Action where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_ActionKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_ActionKey
data Record_Note
  = Record_Note {record_NoteNote :: !String}
  deriving (Show, Typeable)
type Record_NoteId =
    Database.Persist.Class.PersistEntity.Key Record_Note
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note
  newtype Database.Persist.Class.PersistEntity.Key Record_Note
    = Record_NoteKey {unRecord_NoteKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_NoteId |
      typ Data.Type.Equality.~ String => Record_NoteNote
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_NoteKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_NoteKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "notes")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_NoteId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=notes"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note x_aZbv)
    = [Database.Persist.Class.PersistField.SomePersistField x_aZbv]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_aZbx]
    = Record_Note
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_aZbx
  Database.Persist.Class.PersistEntity.fromPersistValues x_aZbw
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_aZbw))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note _note_aZby)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_NoteId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_NoteNote
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField = Record_NoteId
  Database.Persist.Class.PersistEntity.fieldLens Record_NoteId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_aZbz)
           key_aZbA
           -> (Database.Persist.Class.PersistEntity.Entity key_aZbA)
                value_aZbz)
  Database.Persist.Class.PersistEntity.fieldLens Record_NoteNote
    = (Database.Persist.TH.lensPTH
         (record_NoteNote
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aZbB
                                                        value_aZbC)
           x_aZbD
           -> (Database.Persist.Class.PersistEntity.Entity key_aZbB)
                value_aZbC {record_NoteNote = x_aZbD})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note where
  Database.Persist.Class.PersistStore.toBackendKey = unRecord_NoteKey
  Database.Persist.Class.PersistStore.fromBackendKey = Record_NoteKey
data Record_Type
  = Record_Type {record_TypeType :: !String}
  deriving (Show, Typeable)
type Record_TypeId =
    Database.Persist.Class.PersistEntity.Key Record_Type
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Type where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Type = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Type
  newtype Database.Persist.Class.PersistEntity.Key Record_Type
    = Record_TypeKey {unRecord_TypeKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Type typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Type =>
      Record_TypeId |
      typ Data.Type.Equality.~ String => Record_TypeType
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_TypeKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_TypeKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Type")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "types")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_TypeId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Type")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=types"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "type")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "type")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Type x_aZbE)
    = [Database.Persist.Class.PersistField.SomePersistField x_aZbE]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_aZbG]
    = Record_Type
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "type"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_aZbG
  Database.Persist.Class.PersistEntity.fromPersistValues x_aZbF
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Type: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_aZbF))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Type _type_aZbH)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_TypeId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_TypeType
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "type")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "type")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField = Record_TypeId
  Database.Persist.Class.PersistEntity.fieldLens Record_TypeId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_aZbI)
           key_aZbJ
           -> (Database.Persist.Class.PersistEntity.Entity key_aZbJ)
                value_aZbI)
  Database.Persist.Class.PersistEntity.fieldLens Record_TypeType
    = (Database.Persist.TH.lensPTH
         (record_TypeType
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aZbK
                                                        value_aZbL)
           x_aZbM
           -> (Database.Persist.Class.PersistEntity.Entity key_aZbK)
                value_aZbL {record_TypeType = x_aZbM})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Type where
  Database.Persist.Class.PersistStore.toBackendKey = unRecord_TypeKey
  Database.Persist.Class.PersistStore.fromBackendKey = Record_TypeKey
data Record_Note_to_Action
  = Record_Note_to_Action {record_Note_to_ActionNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note),
                           record_Note_to_ActionAction_id :: !(Database.Persist.Class.PersistEntity.Key Record_Action)}
  deriving (Show, Typeable)
type Record_Note_to_ActionId =
    Database.Persist.Class.PersistEntity.Key Record_Note_to_Action
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note_to_Action where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note_to_Action = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note_to_Action
  newtype Database.Persist.Class.PersistEntity.Key Record_Note_to_Action
    = Record_Note_to_ActionKey {unRecord_Note_to_ActionKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note_to_Action typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note_to_Action =>
      Record_Note_to_ActionId |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_Note_to_ActionNote_id |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Action =>
      Record_Note_to_ActionAction_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_Note_to_ActionKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_Note_to_ActionKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "note_to_action")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=note_to_action"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64"))),
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "action_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "action_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_ActionId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Action")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note_to_Action x_aZbN x_aZbO)
    = [Database.Persist.Class.PersistField.SomePersistField x_aZbN,
       Database.Persist.Class.PersistField.SomePersistField x_aZbO]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_aZbQ, x2_aZbR]
    = Record_Note_to_Action
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_aZbQ
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "action_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_aZbR
  Database.Persist.Class.PersistEntity.fromPersistValues x_aZbP
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note_to_Action: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_aZbP))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note_to_Action _note_id_aZbS _action_id_aZbT)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note_to_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionAction_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "action_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "action_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_Note_to_ActionId
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_aZbU)
           key_aZbV
           -> (Database.Persist.Class.PersistEntity.Entity key_aZbV)
                value_aZbU)
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionNote_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_ActionNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aZbW
                                                        value_aZbX)
           x_aZbY
           -> (Database.Persist.Class.PersistEntity.Entity key_aZbW)
                value_aZbX {record_Note_to_ActionNote_id = x_aZbY})
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionAction_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_ActionAction_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aZbW
                                                        value_aZbX)
           x_aZbY
           -> (Database.Persist.Class.PersistEntity.Entity key_aZbW)
                value_aZbX {record_Note_to_ActionAction_id = x_aZbY})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note_to_Action where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_Note_to_ActionKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_Note_to_ActionKey
data Record_Note_to_Type
  = Record_Note_to_Type {record_Note_to_TypeNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note),
                         record_Note_to_TypeType_id :: !(Database.Persist.Class.PersistEntity.Key Record_Type)}
  deriving (Show, Typeable)
type Record_Note_to_TypeId =
    Database.Persist.Class.PersistEntity.Key Record_Note_to_Type
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note_to_Type where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note_to_Type = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note_to_Type
  newtype Database.Persist.Class.PersistEntity.Key Record_Note_to_Type
    = Record_Note_to_TypeKey {unRecord_Note_to_TypeKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note_to_Type typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note_to_Type =>
      Record_Note_to_TypeId |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_Note_to_TypeNote_id |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Type =>
      Record_Note_to_TypeType_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_Note_to_TypeKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_Note_to_TypeKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "note_to_type")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=note_to_type"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64"))),
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "type_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "type_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_TypeId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Type")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note_to_Type x_aZbZ x_aZc0)
    = [Database.Persist.Class.PersistField.SomePersistField x_aZbZ,
       Database.Persist.Class.PersistField.SomePersistField x_aZc0]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_aZc2, x2_aZc3]
    = Record_Note_to_Type
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_aZc2
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "type_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_aZc3
  Database.Persist.Class.PersistEntity.fromPersistValues x_aZc1
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note_to_Type: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_aZc1))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note_to_Type _note_id_aZc4 _type_id_aZc5)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note_to_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeType_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "type_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "type_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_Note_to_TypeId
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_aZc6)
           key_aZc7
           -> (Database.Persist.Class.PersistEntity.Entity key_aZc7)
                value_aZc6)
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeNote_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_TypeNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aZc8
                                                        value_aZc9)
           x_aZca
           -> (Database.Persist.Class.PersistEntity.Entity key_aZc8)
                value_aZc9 {record_Note_to_TypeNote_id = x_aZca})
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeType_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_TypeType_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aZc8
                                                        value_aZc9)
           x_aZca
           -> (Database.Persist.Class.PersistEntity.Entity key_aZc8)
                value_aZc9 {record_Note_to_TypeType_id = x_aZca})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note_to_Type where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_Note_to_TypeKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_Note_to_TypeKey
data Record_Poker
  = Record_Poker {record_PokerDate :: !String,
                  record_PokerAmount :: !Int,
                  record_PokerNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note)}
  deriving (Show, Typeable)
type Record_PokerId =
    Database.Persist.Class.PersistEntity.Key Record_Poker
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Poker where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Poker = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Poker
  newtype Database.Persist.Class.PersistEntity.Key Record_Poker
    = Record_PokerKey {unRecord_PokerKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Poker typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Poker =>
      Record_PokerId |
      typ Data.Type.Equality.~ String => Record_PokerDate |
      typ Data.Type.Equality.~ Int => Record_PokerAmount |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_PokerNote_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_PokerKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_PokerKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Poker")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "data")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_PokerId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Poker")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=data"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "date")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "date")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference,
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "amount")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "amount")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Int")))
                   Database.Persist.Types.Base.SqlInt64)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference,
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Poker x_aZcb x_aZcc x_aZcd)
    = [Database.Persist.Class.PersistField.SomePersistField x_aZcb,
       Database.Persist.Class.PersistField.SomePersistField x_aZcc,
       Database.Persist.Class.PersistField.SomePersistField x_aZcd]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_aZcf, x2_aZcg, x3_aZch]
    = Record_Poker
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "date"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_aZcf
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "amount"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_aZcg
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x3_aZch
  Database.Persist.Class.PersistEntity.fromPersistValues x_aZce
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Poker: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_aZce))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Poker _date_aZci _amount_aZcj _note_id_aZck)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_PokerId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_PokerId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Poker")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerDate
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "date")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "date")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerAmount
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "amount")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "amount")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Int")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_PokerId
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_aZcl)
           key_aZcm
           -> (Database.Persist.Class.PersistEntity.Entity key_aZcm)
                value_aZcl)
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerDate
    = (Database.Persist.TH.lensPTH
         (record_PokerDate
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aZcn
                                                        value_aZco)
           x_aZcp
           -> (Database.Persist.Class.PersistEntity.Entity key_aZcn)
                value_aZco {record_PokerDate = x_aZcp})
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerAmount
    = (Database.Persist.TH.lensPTH
         (record_PokerAmount
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aZcn
                                                        value_aZco)
           x_aZcp
           -> (Database.Persist.Class.PersistEntity.Entity key_aZcn)
                value_aZco {record_PokerAmount = x_aZcp})
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerNote_id
    = (Database.Persist.TH.lensPTH
         (record_PokerNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aZcn
                                                        value_aZco)
           x_aZcp
           -> (Database.Persist.Class.PersistEntity.Entity key_aZcn)
                value_aZco {record_PokerNote_id = x_aZcp})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Poker where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_PokerKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_PokerKey
migrateAll :: Database.Persist.Sql.Types.Migration
migrateAll
  = do let defs_aZcq
             = [(((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Action")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "actions")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_ActionId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Action")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=actions"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "action")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "action")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "notes")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_NoteId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=notes"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Type")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "types")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_TypeId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Type")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=types"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "type")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "type")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "note_to_action")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=note_to_action"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64"))),
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "action_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "action_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_ActionId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Action")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "note_to_type")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=note_to_type"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64"))),
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "type_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "type_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_TypeId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Type")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Poker")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "data")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_PokerId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Poker")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=data"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "date")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "date")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference,
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "amount")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "amount")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Int")))
                             Database.Persist.Types.Base.SqlInt64)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference,
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False]
       (Database.Persist.Sql.Migration.migrate defs_aZcq)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Action")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "actions")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_ActionId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Action")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=actions"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "action")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "action")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_aZcq)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "notes")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_NoteId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=notes"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_aZcq)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Type")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "types")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_TypeId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Type")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=types"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "type")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "type")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_aZcq)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "note_to_action")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=note_to_action"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64"))),
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "action_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "action_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_ActionId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Action")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_aZcq)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "note_to_type")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=note_to_type"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64"))),
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "type_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "type_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_TypeId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Type")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_aZcq)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Poker")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "data")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_PokerId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Poker")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=data"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "date")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "date")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference,
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "amount")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "amount")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Int")))
                       Database.Persist.Types.Base.SqlInt64)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference,
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
-- /Users/scott/Poker/src/Poker.hs:(51,1)-(91,2): Splicing declarations
instance Database.Persist.Class.PersistField.PersistField Record_Action where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_a15dC
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["action"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_a15dC))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_a15dD
          -> let columns_a15dE = Data.HashMap.Strict.fromList x_a15dD
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_a15dF
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_a15dF))
                                   columns_a15dE
                             of
                               GHC.Maybe.Just v_a15dG -> v_a15dG
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["action"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Action where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_a15dH
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["note"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_a15dH))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_a15dI
          -> let columns_a15dJ = Data.HashMap.Strict.fromList x_a15dI
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_a15dK
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_a15dK))
                                   columns_a15dJ
                             of
                               GHC.Maybe.Just v_a15dL -> v_a15dL
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Type where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_a15dM
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["type"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_a15dM))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_a15dN
          -> let columns_a15dO = Data.HashMap.Strict.fromList x_a15dN
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_a15dP
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_a15dP))
                                   columns_a15dO
                             of
                               GHC.Maybe.Just v_a15dQ -> v_a15dQ
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["type"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Type where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note_to_Action where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_a15dR
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["note_id", "action_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_a15dR))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_a15dS
          -> let columns_a15dT = Data.HashMap.Strict.fromList x_a15dS
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_a15dU
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_a15dU))
                                   columns_a15dT
                             of
                               GHC.Maybe.Just v_a15dV -> v_a15dV
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note_id", "action_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note_to_Action where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note_to_Type where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_a15dW
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["note_id", "type_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_a15dW))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_a15dX
          -> let columns_a15dY = Data.HashMap.Strict.fromList x_a15dX
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_a15dZ
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_a15dZ))
                                   columns_a15dY
                             of
                               GHC.Maybe.Just v_a15e0 -> v_a15e0
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note_id", "type_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note_to_Type where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Poker where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_a15e1
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["date", "amount", "note_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_a15e1))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_a15e2
          -> let columns_a15e3 = Data.HashMap.Strict.fromList x_a15e2
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_a15e4
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_a15e4))
                                   columns_a15e3
                             of
                               GHC.Maybe.Just v_a15e5 -> v_a15e5
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["date", "amount", "note_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Poker where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
data Record_Action
  = Record_Action {record_ActionAction :: !String}
  deriving (Show, Typeable)
type Record_ActionId =
    Database.Persist.Class.PersistEntity.Key Record_Action
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Action where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Action = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Action
  newtype Database.Persist.Class.PersistEntity.Key Record_Action
    = Record_ActionKey {unRecord_ActionKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Action typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Action =>
      Record_ActionId |
      typ Data.Type.Equality.~ String => Record_ActionAction
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_ActionKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_ActionKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Action")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "actions")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_ActionId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Action")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=actions"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "action")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "action")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Action x_a15e6)
    = [Database.Persist.Class.PersistField.SomePersistField x_a15e6]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_a15e8]
    = Record_Action
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "action"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_a15e8
  Database.Persist.Class.PersistEntity.fromPersistValues x_a15e7
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Action: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_a15e7))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Action _action_a15e9)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_ActionId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_ActionAction
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "action")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "action")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_ActionId
  Database.Persist.Class.PersistEntity.fieldLens Record_ActionId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_a15ea)
           key_a15eb
           -> (Database.Persist.Class.PersistEntity.Entity key_a15eb)
                value_a15ea)
  Database.Persist.Class.PersistEntity.fieldLens Record_ActionAction
    = (Database.Persist.TH.lensPTH
         (record_ActionAction
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a15ec
                                                        value_a15ed)
           x_a15ee
           -> (Database.Persist.Class.PersistEntity.Entity key_a15ec)
                value_a15ed {record_ActionAction = x_a15ee})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Action where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_ActionKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_ActionKey
data Record_Note
  = Record_Note {record_NoteNote :: !String}
  deriving (Show, Typeable)
type Record_NoteId =
    Database.Persist.Class.PersistEntity.Key Record_Note
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note
  newtype Database.Persist.Class.PersistEntity.Key Record_Note
    = Record_NoteKey {unRecord_NoteKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_NoteId |
      typ Data.Type.Equality.~ String => Record_NoteNote
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_NoteKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_NoteKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "notes")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_NoteId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=notes"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note x_a15ef)
    = [Database.Persist.Class.PersistField.SomePersistField x_a15ef]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_a15eh]
    = Record_Note
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_a15eh
  Database.Persist.Class.PersistEntity.fromPersistValues x_a15eg
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_a15eg))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note _note_a15ei)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_NoteId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_NoteNote
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField = Record_NoteId
  Database.Persist.Class.PersistEntity.fieldLens Record_NoteId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_a15ej)
           key_a15ek
           -> (Database.Persist.Class.PersistEntity.Entity key_a15ek)
                value_a15ej)
  Database.Persist.Class.PersistEntity.fieldLens Record_NoteNote
    = (Database.Persist.TH.lensPTH
         (record_NoteNote
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a15el
                                                        value_a15em)
           x_a15en
           -> (Database.Persist.Class.PersistEntity.Entity key_a15el)
                value_a15em {record_NoteNote = x_a15en})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note where
  Database.Persist.Class.PersistStore.toBackendKey = unRecord_NoteKey
  Database.Persist.Class.PersistStore.fromBackendKey = Record_NoteKey
data Record_Type
  = Record_Type {record_TypeType :: !String}
  deriving (Show, Typeable)
type Record_TypeId =
    Database.Persist.Class.PersistEntity.Key Record_Type
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Type where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Type = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Type
  newtype Database.Persist.Class.PersistEntity.Key Record_Type
    = Record_TypeKey {unRecord_TypeKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Type typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Type =>
      Record_TypeId |
      typ Data.Type.Equality.~ String => Record_TypeType
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_TypeKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_TypeKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Type")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "types")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_TypeId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Type")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=types"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "type")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "type")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Type x_a15eo)
    = [Database.Persist.Class.PersistField.SomePersistField x_a15eo]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_a15eq]
    = Record_Type
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "type"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_a15eq
  Database.Persist.Class.PersistEntity.fromPersistValues x_a15ep
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Type: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_a15ep))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Type _type_a15er)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_TypeId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_TypeType
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "type")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "type")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField = Record_TypeId
  Database.Persist.Class.PersistEntity.fieldLens Record_TypeId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_a15es)
           key_a15et
           -> (Database.Persist.Class.PersistEntity.Entity key_a15et)
                value_a15es)
  Database.Persist.Class.PersistEntity.fieldLens Record_TypeType
    = (Database.Persist.TH.lensPTH
         (record_TypeType
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a15eu
                                                        value_a15ev)
           x_a15ew
           -> (Database.Persist.Class.PersistEntity.Entity key_a15eu)
                value_a15ev {record_TypeType = x_a15ew})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Type where
  Database.Persist.Class.PersistStore.toBackendKey = unRecord_TypeKey
  Database.Persist.Class.PersistStore.fromBackendKey = Record_TypeKey
data Record_Note_to_Action
  = Record_Note_to_Action {record_Note_to_ActionNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note),
                           record_Note_to_ActionAction_id :: !(Database.Persist.Class.PersistEntity.Key Record_Action)}
  deriving (Show, Typeable)
type Record_Note_to_ActionId =
    Database.Persist.Class.PersistEntity.Key Record_Note_to_Action
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note_to_Action where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note_to_Action = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note_to_Action
  newtype Database.Persist.Class.PersistEntity.Key Record_Note_to_Action
    = Record_Note_to_ActionKey {unRecord_Note_to_ActionKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note_to_Action typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note_to_Action =>
      Record_Note_to_ActionId |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_Note_to_ActionNote_id |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Action =>
      Record_Note_to_ActionAction_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_Note_to_ActionKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_Note_to_ActionKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "note_to_action")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=note_to_action"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64"))),
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "action_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "action_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_ActionId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Action")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note_to_Action x_a15ex x_a15ey)
    = [Database.Persist.Class.PersistField.SomePersistField x_a15ex,
       Database.Persist.Class.PersistField.SomePersistField x_a15ey]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_a15eA, x2_a15eB]
    = Record_Note_to_Action
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_a15eA
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "action_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_a15eB
  Database.Persist.Class.PersistEntity.fromPersistValues x_a15ez
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note_to_Action: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_a15ez))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note_to_Action _note_id_a15eC _action_id_a15eD)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note_to_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionAction_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "action_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "action_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_Note_to_ActionId
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_a15eE)
           key_a15eF
           -> (Database.Persist.Class.PersistEntity.Entity key_a15eF)
                value_a15eE)
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionNote_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_ActionNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a15eG
                                                        value_a15eH)
           x_a15eI
           -> (Database.Persist.Class.PersistEntity.Entity key_a15eG)
                value_a15eH {record_Note_to_ActionNote_id = x_a15eI})
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionAction_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_ActionAction_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a15eG
                                                        value_a15eH)
           x_a15eI
           -> (Database.Persist.Class.PersistEntity.Entity key_a15eG)
                value_a15eH {record_Note_to_ActionAction_id = x_a15eI})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note_to_Action where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_Note_to_ActionKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_Note_to_ActionKey
data Record_Note_to_Type
  = Record_Note_to_Type {record_Note_to_TypeNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note),
                         record_Note_to_TypeType_id :: !(Database.Persist.Class.PersistEntity.Key Record_Type)}
  deriving (Show, Typeable)
type Record_Note_to_TypeId =
    Database.Persist.Class.PersistEntity.Key Record_Note_to_Type
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note_to_Type where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note_to_Type = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note_to_Type
  newtype Database.Persist.Class.PersistEntity.Key Record_Note_to_Type
    = Record_Note_to_TypeKey {unRecord_Note_to_TypeKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note_to_Type typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note_to_Type =>
      Record_Note_to_TypeId |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_Note_to_TypeNote_id |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Type =>
      Record_Note_to_TypeType_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_Note_to_TypeKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_Note_to_TypeKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "note_to_type")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=note_to_type"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64"))),
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "type_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "type_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_TypeId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Type")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note_to_Type x_a15eJ x_a15eK)
    = [Database.Persist.Class.PersistField.SomePersistField x_a15eJ,
       Database.Persist.Class.PersistField.SomePersistField x_a15eK]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_a15eM, x2_a15eN]
    = Record_Note_to_Type
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_a15eM
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "type_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_a15eN
  Database.Persist.Class.PersistEntity.fromPersistValues x_a15eL
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note_to_Type: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_a15eL))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note_to_Type _note_id_a15eO _type_id_a15eP)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note_to_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeType_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "type_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "type_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_Note_to_TypeId
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_a15eQ)
           key_a15eR
           -> (Database.Persist.Class.PersistEntity.Entity key_a15eR)
                value_a15eQ)
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeNote_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_TypeNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a15eS
                                                        value_a15eT)
           x_a15eU
           -> (Database.Persist.Class.PersistEntity.Entity key_a15eS)
                value_a15eT {record_Note_to_TypeNote_id = x_a15eU})
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeType_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_TypeType_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a15eS
                                                        value_a15eT)
           x_a15eU
           -> (Database.Persist.Class.PersistEntity.Entity key_a15eS)
                value_a15eT {record_Note_to_TypeType_id = x_a15eU})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note_to_Type where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_Note_to_TypeKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_Note_to_TypeKey
data Record_Poker
  = Record_Poker {record_PokerDate :: !String,
                  record_PokerAmount :: !Int,
                  record_PokerNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note)}
  deriving (Show, Typeable)
type Record_PokerId =
    Database.Persist.Class.PersistEntity.Key Record_Poker
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Poker where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Poker = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Poker
  newtype Database.Persist.Class.PersistEntity.Key Record_Poker
    = Record_PokerKey {unRecord_PokerKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Poker typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Poker =>
      Record_PokerId |
      typ Data.Type.Equality.~ String => Record_PokerDate |
      typ Data.Type.Equality.~ Int => Record_PokerAmount |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_PokerNote_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_PokerKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_PokerKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Poker")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "data")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_PokerId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Poker")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=data"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "date")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "date")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference,
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "amount")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "amount")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Int")))
                   Database.Persist.Types.Base.SqlInt64)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference,
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Poker x_a15eV x_a15eW x_a15eX)
    = [Database.Persist.Class.PersistField.SomePersistField x_a15eV,
       Database.Persist.Class.PersistField.SomePersistField x_a15eW,
       Database.Persist.Class.PersistField.SomePersistField x_a15eX]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_a15eZ, x2_a15f0, x3_a15f1]
    = Record_Poker
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "date"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_a15eZ
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "amount"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_a15f0
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x3_a15f1
  Database.Persist.Class.PersistEntity.fromPersistValues x_a15eY
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Poker: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_a15eY))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Poker _date_a15f2 _amount_a15f3 _note_id_a15f4)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_PokerId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_PokerId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Poker")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerDate
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "date")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "date")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerAmount
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "amount")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "amount")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Int")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_PokerId
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_a15f5)
           key_a15f6
           -> (Database.Persist.Class.PersistEntity.Entity key_a15f6)
                value_a15f5)
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerDate
    = (Database.Persist.TH.lensPTH
         (record_PokerDate
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a15f7
                                                        value_a15f8)
           x_a15f9
           -> (Database.Persist.Class.PersistEntity.Entity key_a15f7)
                value_a15f8 {record_PokerDate = x_a15f9})
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerAmount
    = (Database.Persist.TH.lensPTH
         (record_PokerAmount
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a15f7
                                                        value_a15f8)
           x_a15f9
           -> (Database.Persist.Class.PersistEntity.Entity key_a15f7)
                value_a15f8 {record_PokerAmount = x_a15f9})
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerNote_id
    = (Database.Persist.TH.lensPTH
         (record_PokerNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a15f7
                                                        value_a15f8)
           x_a15f9
           -> (Database.Persist.Class.PersistEntity.Entity key_a15f7)
                value_a15f8 {record_PokerNote_id = x_a15f9})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Poker where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_PokerKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_PokerKey
migrateAll :: Database.Persist.Sql.Types.Migration
migrateAll
  = do let defs_a15fa
             = [(((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Action")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "actions")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_ActionId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Action")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=actions"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "action")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "action")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "notes")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_NoteId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=notes"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Type")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "types")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_TypeId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Type")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=types"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "type")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "type")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "note_to_action")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=note_to_action"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64"))),
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "action_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "action_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_ActionId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Action")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "note_to_type")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=note_to_type"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64"))),
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "type_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "type_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_TypeId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Type")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Poker")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "data")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_PokerId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Poker")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=data"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "date")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "date")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference,
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "amount")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "amount")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Int")))
                             Database.Persist.Types.Base.SqlInt64)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference,
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False]
       (Database.Persist.Sql.Migration.migrate defs_a15fa)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Action")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "actions")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_ActionId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Action")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=actions"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "action")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "action")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_a15fa)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "notes")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_NoteId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=notes"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_a15fa)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Type")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "types")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_TypeId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Type")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=types"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "type")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "type")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_a15fa)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "note_to_action")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=note_to_action"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64"))),
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "action_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "action_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_ActionId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Action")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_a15fa)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "note_to_type")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=note_to_type"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64"))),
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "type_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "type_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_TypeId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Type")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_a15fa)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Poker")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "data")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_PokerId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Poker")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=data"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "date")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "date")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference,
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "amount")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "amount")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Int")))
                       Database.Persist.Types.Base.SqlInt64)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference,
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
-- /Users/scott/Poker/src/Poker.hs:(51,1)-(91,2): Splicing declarations
instance Database.Persist.Class.PersistField.PersistField Record_Action where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_a1bzr
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["action"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_a1bzr))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_a1bzs
          -> let columns_a1bzt = Data.HashMap.Strict.fromList x_a1bzs
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_a1bzu
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_a1bzu))
                                   columns_a1bzt
                             of
                               GHC.Maybe.Just v_a1bzv -> v_a1bzv
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["action"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Action where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_a1bzw
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["note"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_a1bzw))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_a1bzx
          -> let columns_a1bzy = Data.HashMap.Strict.fromList x_a1bzx
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_a1bzz
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_a1bzz))
                                   columns_a1bzy
                             of
                               GHC.Maybe.Just v_a1bzA -> v_a1bzA
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Type where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_a1bzB
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["type"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_a1bzB))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_a1bzC
          -> let columns_a1bzD = Data.HashMap.Strict.fromList x_a1bzC
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_a1bzE
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_a1bzE))
                                   columns_a1bzD
                             of
                               GHC.Maybe.Just v_a1bzF -> v_a1bzF
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["type"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Type where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note_to_Action where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_a1bzG
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["note_id", "action_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_a1bzG))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_a1bzH
          -> let columns_a1bzI = Data.HashMap.Strict.fromList x_a1bzH
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_a1bzJ
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_a1bzJ))
                                   columns_a1bzI
                             of
                               GHC.Maybe.Just v_a1bzK -> v_a1bzK
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note_id", "action_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note_to_Action where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note_to_Type where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_a1bzL
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["note_id", "type_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_a1bzL))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_a1bzM
          -> let columns_a1bzN = Data.HashMap.Strict.fromList x_a1bzM
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_a1bzO
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_a1bzO))
                                   columns_a1bzN
                             of
                               GHC.Maybe.Just v_a1bzP -> v_a1bzP
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note_id", "type_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note_to_Type where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Poker where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_a1bzQ
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["date", "amount", "note_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_a1bzQ))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_a1bzR
          -> let columns_a1bzS = Data.HashMap.Strict.fromList x_a1bzR
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_a1bzT
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_a1bzT))
                                   columns_a1bzS
                             of
                               GHC.Maybe.Just v_a1bzU -> v_a1bzU
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["date", "amount", "note_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Poker where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
data Record_Action
  = Record_Action {record_ActionAction :: !String}
  deriving (Show, Typeable)
type Record_ActionId =
    Database.Persist.Class.PersistEntity.Key Record_Action
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Action where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Action = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Action
  newtype Database.Persist.Class.PersistEntity.Key Record_Action
    = Record_ActionKey {unRecord_ActionKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Action typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Action =>
      Record_ActionId |
      typ Data.Type.Equality.~ String => Record_ActionAction
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_ActionKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_ActionKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Action")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "actions")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_ActionId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Action")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=actions"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "action")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "action")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Action x_a1bzV)
    = [Database.Persist.Class.PersistField.SomePersistField x_a1bzV]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_a1bzX]
    = Record_Action
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "action"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_a1bzX
  Database.Persist.Class.PersistEntity.fromPersistValues x_a1bzW
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Action: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_a1bzW))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Action _action_a1bzY)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_ActionId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_ActionAction
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "action")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "action")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_ActionId
  Database.Persist.Class.PersistEntity.fieldLens Record_ActionId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_a1bzZ)
           key_a1bA0
           -> (Database.Persist.Class.PersistEntity.Entity key_a1bA0)
                value_a1bzZ)
  Database.Persist.Class.PersistEntity.fieldLens Record_ActionAction
    = (Database.Persist.TH.lensPTH
         (record_ActionAction
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a1bA1
                                                        value_a1bA2)
           x_a1bA3
           -> (Database.Persist.Class.PersistEntity.Entity key_a1bA1)
                value_a1bA2 {record_ActionAction = x_a1bA3})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Action where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_ActionKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_ActionKey
data Record_Note
  = Record_Note {record_NoteNote :: !String}
  deriving (Show, Typeable)
type Record_NoteId =
    Database.Persist.Class.PersistEntity.Key Record_Note
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note
  newtype Database.Persist.Class.PersistEntity.Key Record_Note
    = Record_NoteKey {unRecord_NoteKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_NoteId |
      typ Data.Type.Equality.~ String => Record_NoteNote
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_NoteKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_NoteKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "notes")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_NoteId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=notes"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note x_a1bA4)
    = [Database.Persist.Class.PersistField.SomePersistField x_a1bA4]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_a1bA6]
    = Record_Note
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_a1bA6
  Database.Persist.Class.PersistEntity.fromPersistValues x_a1bA5
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_a1bA5))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note _note_a1bA7)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_NoteId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_NoteNote
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField = Record_NoteId
  Database.Persist.Class.PersistEntity.fieldLens Record_NoteId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_a1bA8)
           key_a1bA9
           -> (Database.Persist.Class.PersistEntity.Entity key_a1bA9)
                value_a1bA8)
  Database.Persist.Class.PersistEntity.fieldLens Record_NoteNote
    = (Database.Persist.TH.lensPTH
         (record_NoteNote
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a1bAa
                                                        value_a1bAb)
           x_a1bAc
           -> (Database.Persist.Class.PersistEntity.Entity key_a1bAa)
                value_a1bAb {record_NoteNote = x_a1bAc})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note where
  Database.Persist.Class.PersistStore.toBackendKey = unRecord_NoteKey
  Database.Persist.Class.PersistStore.fromBackendKey = Record_NoteKey
data Record_Type
  = Record_Type {record_TypeType :: !String}
  deriving (Show, Typeable)
type Record_TypeId =
    Database.Persist.Class.PersistEntity.Key Record_Type
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Type where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Type = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Type
  newtype Database.Persist.Class.PersistEntity.Key Record_Type
    = Record_TypeKey {unRecord_TypeKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Type typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Type =>
      Record_TypeId |
      typ Data.Type.Equality.~ String => Record_TypeType
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_TypeKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_TypeKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Type")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "types")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_TypeId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Type")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=types"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "type")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "type")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Type x_a1bAd)
    = [Database.Persist.Class.PersistField.SomePersistField x_a1bAd]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_a1bAf]
    = Record_Type
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "type"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_a1bAf
  Database.Persist.Class.PersistEntity.fromPersistValues x_a1bAe
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Type: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_a1bAe))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Type _type_a1bAg)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_TypeId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_TypeType
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "type")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "type")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField = Record_TypeId
  Database.Persist.Class.PersistEntity.fieldLens Record_TypeId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_a1bAh)
           key_a1bAi
           -> (Database.Persist.Class.PersistEntity.Entity key_a1bAi)
                value_a1bAh)
  Database.Persist.Class.PersistEntity.fieldLens Record_TypeType
    = (Database.Persist.TH.lensPTH
         (record_TypeType
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a1bAj
                                                        value_a1bAk)
           x_a1bAl
           -> (Database.Persist.Class.PersistEntity.Entity key_a1bAj)
                value_a1bAk {record_TypeType = x_a1bAl})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Type where
  Database.Persist.Class.PersistStore.toBackendKey = unRecord_TypeKey
  Database.Persist.Class.PersistStore.fromBackendKey = Record_TypeKey
data Record_Note_to_Action
  = Record_Note_to_Action {record_Note_to_ActionNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note),
                           record_Note_to_ActionAction_id :: !(Database.Persist.Class.PersistEntity.Key Record_Action)}
  deriving (Show, Typeable)
type Record_Note_to_ActionId =
    Database.Persist.Class.PersistEntity.Key Record_Note_to_Action
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note_to_Action where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note_to_Action = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note_to_Action
  newtype Database.Persist.Class.PersistEntity.Key Record_Note_to_Action
    = Record_Note_to_ActionKey {unRecord_Note_to_ActionKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note_to_Action typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note_to_Action =>
      Record_Note_to_ActionId |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_Note_to_ActionNote_id |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Action =>
      Record_Note_to_ActionAction_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_Note_to_ActionKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_Note_to_ActionKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "note_to_action")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=note_to_action"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64"))),
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "action_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "action_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_ActionId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Action")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note_to_Action x_a1bAm x_a1bAn)
    = [Database.Persist.Class.PersistField.SomePersistField x_a1bAm,
       Database.Persist.Class.PersistField.SomePersistField x_a1bAn]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_a1bAp, x2_a1bAq]
    = Record_Note_to_Action
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_a1bAp
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "action_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_a1bAq
  Database.Persist.Class.PersistEntity.fromPersistValues x_a1bAo
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note_to_Action: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_a1bAo))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note_to_Action _note_id_a1bAr _action_id_a1bAs)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note_to_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionAction_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "action_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "action_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_Note_to_ActionId
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_a1bAt)
           key_a1bAu
           -> (Database.Persist.Class.PersistEntity.Entity key_a1bAu)
                value_a1bAt)
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionNote_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_ActionNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a1bAv
                                                        value_a1bAw)
           x_a1bAx
           -> (Database.Persist.Class.PersistEntity.Entity key_a1bAv)
                value_a1bAw {record_Note_to_ActionNote_id = x_a1bAx})
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionAction_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_ActionAction_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a1bAv
                                                        value_a1bAw)
           x_a1bAx
           -> (Database.Persist.Class.PersistEntity.Entity key_a1bAv)
                value_a1bAw {record_Note_to_ActionAction_id = x_a1bAx})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note_to_Action where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_Note_to_ActionKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_Note_to_ActionKey
data Record_Note_to_Type
  = Record_Note_to_Type {record_Note_to_TypeNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note),
                         record_Note_to_TypeType_id :: !(Database.Persist.Class.PersistEntity.Key Record_Type)}
  deriving (Show, Typeable)
type Record_Note_to_TypeId =
    Database.Persist.Class.PersistEntity.Key Record_Note_to_Type
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note_to_Type where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note_to_Type = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note_to_Type
  newtype Database.Persist.Class.PersistEntity.Key Record_Note_to_Type
    = Record_Note_to_TypeKey {unRecord_Note_to_TypeKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note_to_Type typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note_to_Type =>
      Record_Note_to_TypeId |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_Note_to_TypeNote_id |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Type =>
      Record_Note_to_TypeType_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_Note_to_TypeKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_Note_to_TypeKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "note_to_type")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=note_to_type"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64"))),
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "type_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "type_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_TypeId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Type")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note_to_Type x_a1bAy x_a1bAz)
    = [Database.Persist.Class.PersistField.SomePersistField x_a1bAy,
       Database.Persist.Class.PersistField.SomePersistField x_a1bAz]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_a1bAB, x2_a1bAC]
    = Record_Note_to_Type
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_a1bAB
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "type_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_a1bAC
  Database.Persist.Class.PersistEntity.fromPersistValues x_a1bAA
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note_to_Type: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_a1bAA))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note_to_Type _note_id_a1bAD _type_id_a1bAE)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note_to_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeType_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "type_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "type_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_Note_to_TypeId
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_a1bAF)
           key_a1bAG
           -> (Database.Persist.Class.PersistEntity.Entity key_a1bAG)
                value_a1bAF)
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeNote_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_TypeNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a1bAH
                                                        value_a1bAI)
           x_a1bAJ
           -> (Database.Persist.Class.PersistEntity.Entity key_a1bAH)
                value_a1bAI {record_Note_to_TypeNote_id = x_a1bAJ})
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeType_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_TypeType_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a1bAH
                                                        value_a1bAI)
           x_a1bAJ
           -> (Database.Persist.Class.PersistEntity.Entity key_a1bAH)
                value_a1bAI {record_Note_to_TypeType_id = x_a1bAJ})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note_to_Type where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_Note_to_TypeKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_Note_to_TypeKey
data Record_Poker
  = Record_Poker {record_PokerDate :: !String,
                  record_PokerAmount :: !Int,
                  record_PokerNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note)}
  deriving (Show, Typeable)
type Record_PokerId =
    Database.Persist.Class.PersistEntity.Key Record_Poker
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Poker where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Poker = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Poker
  newtype Database.Persist.Class.PersistEntity.Key Record_Poker
    = Record_PokerKey {unRecord_PokerKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Poker typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Poker =>
      Record_PokerId |
      typ Data.Type.Equality.~ String => Record_PokerDate |
      typ Data.Type.Equality.~ Int => Record_PokerAmount |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_PokerNote_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_PokerKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_PokerKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Poker")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "data")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_PokerId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Poker")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=data"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "date")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "date")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference,
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "amount")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "amount")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Int")))
                   Database.Persist.Types.Base.SqlInt64)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference,
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Poker x_a1bAK x_a1bAL x_a1bAM)
    = [Database.Persist.Class.PersistField.SomePersistField x_a1bAK,
       Database.Persist.Class.PersistField.SomePersistField x_a1bAL,
       Database.Persist.Class.PersistField.SomePersistField x_a1bAM]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_a1bAO, x2_a1bAP, x3_a1bAQ]
    = Record_Poker
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "date"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_a1bAO
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "amount"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_a1bAP
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x3_a1bAQ
  Database.Persist.Class.PersistEntity.fromPersistValues x_a1bAN
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Poker: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_a1bAN))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Poker _date_a1bAR _amount_a1bAS _note_id_a1bAT)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_PokerId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_PokerId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Poker")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerDate
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "date")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "date")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerAmount
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "amount")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "amount")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Int")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_PokerId
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_a1bAU)
           key_a1bAV
           -> (Database.Persist.Class.PersistEntity.Entity key_a1bAV)
                value_a1bAU)
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerDate
    = (Database.Persist.TH.lensPTH
         (record_PokerDate
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a1bAW
                                                        value_a1bAX)
           x_a1bAY
           -> (Database.Persist.Class.PersistEntity.Entity key_a1bAW)
                value_a1bAX {record_PokerDate = x_a1bAY})
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerAmount
    = (Database.Persist.TH.lensPTH
         (record_PokerAmount
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a1bAW
                                                        value_a1bAX)
           x_a1bAY
           -> (Database.Persist.Class.PersistEntity.Entity key_a1bAW)
                value_a1bAX {record_PokerAmount = x_a1bAY})
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerNote_id
    = (Database.Persist.TH.lensPTH
         (record_PokerNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a1bAW
                                                        value_a1bAX)
           x_a1bAY
           -> (Database.Persist.Class.PersistEntity.Entity key_a1bAW)
                value_a1bAX {record_PokerNote_id = x_a1bAY})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Poker where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_PokerKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_PokerKey
migrateAll :: Database.Persist.Sql.Types.Migration
migrateAll
  = do let defs_a1bAZ
             = [(((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Action")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "actions")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_ActionId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Action")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=actions"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "action")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "action")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "notes")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_NoteId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=notes"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Type")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "types")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_TypeId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Type")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=types"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "type")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "type")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "note_to_action")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=note_to_action"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64"))),
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "action_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "action_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_ActionId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Action")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "note_to_type")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=note_to_type"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64"))),
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "type_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "type_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_TypeId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Type")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Poker")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "data")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_PokerId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Poker")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=data"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "date")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "date")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference,
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "amount")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "amount")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Int")))
                             Database.Persist.Types.Base.SqlInt64)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference,
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False]
       (Database.Persist.Sql.Migration.migrate defs_a1bAZ)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Action")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "actions")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_ActionId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Action")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=actions"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "action")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "action")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_a1bAZ)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "notes")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_NoteId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=notes"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_a1bAZ)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Type")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "types")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_TypeId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Type")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=types"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "type")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "type")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_a1bAZ)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "note_to_action")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=note_to_action"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64"))),
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "action_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "action_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_ActionId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Action")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_a1bAZ)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "note_to_type")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=note_to_type"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64"))),
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "type_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "type_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_TypeId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Type")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_a1bAZ)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Poker")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "data")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_PokerId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Poker")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=data"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "date")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "date")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference,
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "amount")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "amount")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Int")))
                       Database.Persist.Types.Base.SqlInt64)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference,
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
-- /Users/scott/Poker/src/Poker.hs:(51,1)-(91,2): Splicing declarations
instance Database.Persist.Class.PersistField.PersistField Record_Action where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_alAOS
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["action"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_alAOS))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_alAOT
          -> let columns_alAOU = Data.HashMap.Strict.fromList x_alAOT
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_alAOV
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_alAOV))
                                   columns_alAOU
                             of
                               GHC.Maybe.Just v_alAOW -> v_alAOW
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["action"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Action where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_alAOX
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["note"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_alAOX))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_alAOY
          -> let columns_alAOZ = Data.HashMap.Strict.fromList x_alAOY
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_alAP0
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_alAP0))
                                   columns_alAOZ
                             of
                               GHC.Maybe.Just v_alAP1 -> v_alAP1
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Type where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_alAP2
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["type"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_alAP2))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_alAP3
          -> let columns_alAP4 = Data.HashMap.Strict.fromList x_alAP3
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_alAP5
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_alAP5))
                                   columns_alAP4
                             of
                               GHC.Maybe.Just v_alAP6 -> v_alAP6
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["type"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Type where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note_to_Action where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_alAP7
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["note_id", "action_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_alAP7))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_alAP8
          -> let columns_alAP9 = Data.HashMap.Strict.fromList x_alAP8
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_alAPa
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_alAPa))
                                   columns_alAP9
                             of
                               GHC.Maybe.Just v_alAPb -> v_alAPb
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note_id", "action_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note_to_Action where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note_to_Type where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_alAPc
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["note_id", "type_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_alAPc))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_alAPd
          -> let columns_alAPe = Data.HashMap.Strict.fromList x_alAPd
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_alAPf
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_alAPf))
                                   columns_alAPe
                             of
                               GHC.Maybe.Just v_alAPg -> v_alAPg
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note_id", "type_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note_to_Type where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Poker where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_alAPh
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["date", "amount", "note_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_alAPh))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_alAPi
          -> let columns_alAPj = Data.HashMap.Strict.fromList x_alAPi
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_alAPk
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_alAPk))
                                   columns_alAPj
                             of
                               GHC.Maybe.Just v_alAPl -> v_alAPl
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["date", "amount", "note_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Poker where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
data Record_Action
  = Record_Action {record_ActionAction :: !String}
  deriving (Show, Typeable)
type Record_ActionId =
    Database.Persist.Class.PersistEntity.Key Record_Action
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Action where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Action = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Action
  newtype Database.Persist.Class.PersistEntity.Key Record_Action
    = Record_ActionKey {unRecord_ActionKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Action typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Action =>
      Record_ActionId |
      typ Data.Type.Equality.~ String => Record_ActionAction
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_ActionKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_ActionKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Action")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "actions")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_ActionId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Action")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=actions"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "action")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "action")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Action x_alAPm)
    = [Database.Persist.Class.PersistField.SomePersistField x_alAPm]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_alAPo]
    = Record_Action
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "action"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_alAPo
  Database.Persist.Class.PersistEntity.fromPersistValues x_alAPn
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Action: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_alAPn))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Action _action_alAPp)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_ActionId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_ActionAction
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "action")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "action")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_ActionId
  Database.Persist.Class.PersistEntity.fieldLens Record_ActionId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_alAPq)
           key_alAPr
           -> (Database.Persist.Class.PersistEntity.Entity key_alAPr)
                value_alAPq)
  Database.Persist.Class.PersistEntity.fieldLens Record_ActionAction
    = (Database.Persist.TH.lensPTH
         (record_ActionAction
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_alAPs
                                                        value_alAPt)
           x_alAPu
           -> (Database.Persist.Class.PersistEntity.Entity key_alAPs)
                value_alAPt {record_ActionAction = x_alAPu})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Action where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_ActionKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_ActionKey
data Record_Note
  = Record_Note {record_NoteNote :: !String}
  deriving (Show, Typeable)
type Record_NoteId =
    Database.Persist.Class.PersistEntity.Key Record_Note
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note
  newtype Database.Persist.Class.PersistEntity.Key Record_Note
    = Record_NoteKey {unRecord_NoteKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_NoteId |
      typ Data.Type.Equality.~ String => Record_NoteNote
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_NoteKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_NoteKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "notes")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_NoteId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=notes"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note x_alAPv)
    = [Database.Persist.Class.PersistField.SomePersistField x_alAPv]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_alAPx]
    = Record_Note
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_alAPx
  Database.Persist.Class.PersistEntity.fromPersistValues x_alAPw
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_alAPw))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note _note_alAPy)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_NoteId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_NoteNote
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField = Record_NoteId
  Database.Persist.Class.PersistEntity.fieldLens Record_NoteId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_alAPz)
           key_alAPA
           -> (Database.Persist.Class.PersistEntity.Entity key_alAPA)
                value_alAPz)
  Database.Persist.Class.PersistEntity.fieldLens Record_NoteNote
    = (Database.Persist.TH.lensPTH
         (record_NoteNote
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_alAPB
                                                        value_alAPC)
           x_alAPD
           -> (Database.Persist.Class.PersistEntity.Entity key_alAPB)
                value_alAPC {record_NoteNote = x_alAPD})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note where
  Database.Persist.Class.PersistStore.toBackendKey = unRecord_NoteKey
  Database.Persist.Class.PersistStore.fromBackendKey = Record_NoteKey
data Record_Type
  = Record_Type {record_TypeType :: !String}
  deriving (Show, Typeable)
type Record_TypeId =
    Database.Persist.Class.PersistEntity.Key Record_Type
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Type where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Type = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Type
  newtype Database.Persist.Class.PersistEntity.Key Record_Type
    = Record_TypeKey {unRecord_TypeKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Type typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Type =>
      Record_TypeId |
      typ Data.Type.Equality.~ String => Record_TypeType
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_TypeKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_TypeKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Type")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "types")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_TypeId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Type")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=types"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "type")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "type")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Type x_alAPE)
    = [Database.Persist.Class.PersistField.SomePersistField x_alAPE]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_alAPG]
    = Record_Type
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "type"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_alAPG
  Database.Persist.Class.PersistEntity.fromPersistValues x_alAPF
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Type: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_alAPF))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Type _type_alAPH)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_TypeId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_TypeType
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "type")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "type")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField = Record_TypeId
  Database.Persist.Class.PersistEntity.fieldLens Record_TypeId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_alAPI)
           key_alAPJ
           -> (Database.Persist.Class.PersistEntity.Entity key_alAPJ)
                value_alAPI)
  Database.Persist.Class.PersistEntity.fieldLens Record_TypeType
    = (Database.Persist.TH.lensPTH
         (record_TypeType
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_alAPK
                                                        value_alAPL)
           x_alAPM
           -> (Database.Persist.Class.PersistEntity.Entity key_alAPK)
                value_alAPL {record_TypeType = x_alAPM})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Type where
  Database.Persist.Class.PersistStore.toBackendKey = unRecord_TypeKey
  Database.Persist.Class.PersistStore.fromBackendKey = Record_TypeKey
data Record_Note_to_Action
  = Record_Note_to_Action {record_Note_to_ActionNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note),
                           record_Note_to_ActionAction_id :: !(Database.Persist.Class.PersistEntity.Key Record_Action)}
  deriving (Show, Typeable)
type Record_Note_to_ActionId =
    Database.Persist.Class.PersistEntity.Key Record_Note_to_Action
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note_to_Action where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note_to_Action = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note_to_Action
  newtype Database.Persist.Class.PersistEntity.Key Record_Note_to_Action
    = Record_Note_to_ActionKey {unRecord_Note_to_ActionKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note_to_Action typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note_to_Action =>
      Record_Note_to_ActionId |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_Note_to_ActionNote_id |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Action =>
      Record_Note_to_ActionAction_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_Note_to_ActionKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_Note_to_ActionKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "note_to_action")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=note_to_action"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64"))),
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "action_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "action_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_ActionId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Action")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note_to_Action x_alAPN x_alAPO)
    = [Database.Persist.Class.PersistField.SomePersistField x_alAPN,
       Database.Persist.Class.PersistField.SomePersistField x_alAPO]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_alAPQ, x2_alAPR]
    = Record_Note_to_Action
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_alAPQ
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "action_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_alAPR
  Database.Persist.Class.PersistEntity.fromPersistValues x_alAPP
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note_to_Action: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_alAPP))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note_to_Action _note_id_alAPS _action_id_alAPT)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note_to_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionAction_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "action_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "action_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_Note_to_ActionId
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_alAPU)
           key_alAPV
           -> (Database.Persist.Class.PersistEntity.Entity key_alAPV)
                value_alAPU)
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionNote_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_ActionNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_alAPW
                                                        value_alAPX)
           x_alAPY
           -> (Database.Persist.Class.PersistEntity.Entity key_alAPW)
                value_alAPX {record_Note_to_ActionNote_id = x_alAPY})
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionAction_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_ActionAction_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_alAPW
                                                        value_alAPX)
           x_alAPY
           -> (Database.Persist.Class.PersistEntity.Entity key_alAPW)
                value_alAPX {record_Note_to_ActionAction_id = x_alAPY})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note_to_Action where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_Note_to_ActionKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_Note_to_ActionKey
data Record_Note_to_Type
  = Record_Note_to_Type {record_Note_to_TypeNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note),
                         record_Note_to_TypeType_id :: !(Database.Persist.Class.PersistEntity.Key Record_Type)}
  deriving (Show, Typeable)
type Record_Note_to_TypeId =
    Database.Persist.Class.PersistEntity.Key Record_Note_to_Type
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note_to_Type where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note_to_Type = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note_to_Type
  newtype Database.Persist.Class.PersistEntity.Key Record_Note_to_Type
    = Record_Note_to_TypeKey {unRecord_Note_to_TypeKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note_to_Type typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note_to_Type =>
      Record_Note_to_TypeId |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_Note_to_TypeNote_id |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Type =>
      Record_Note_to_TypeType_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_Note_to_TypeKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_Note_to_TypeKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "note_to_type")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=note_to_type"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64"))),
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "type_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "type_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_TypeId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Type")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note_to_Type x_alAPZ x_alAQ0)
    = [Database.Persist.Class.PersistField.SomePersistField x_alAPZ,
       Database.Persist.Class.PersistField.SomePersistField x_alAQ0]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_alAQ2, x2_alAQ3]
    = Record_Note_to_Type
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_alAQ2
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "type_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_alAQ3
  Database.Persist.Class.PersistEntity.fromPersistValues x_alAQ1
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note_to_Type: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_alAQ1))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note_to_Type _note_id_alAQ4 _type_id_alAQ5)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note_to_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeType_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "type_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "type_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_Note_to_TypeId
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_alAQ6)
           key_alAQ7
           -> (Database.Persist.Class.PersistEntity.Entity key_alAQ7)
                value_alAQ6)
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeNote_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_TypeNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_alAQ8
                                                        value_alAQ9)
           x_alAQa
           -> (Database.Persist.Class.PersistEntity.Entity key_alAQ8)
                value_alAQ9 {record_Note_to_TypeNote_id = x_alAQa})
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeType_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_TypeType_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_alAQ8
                                                        value_alAQ9)
           x_alAQa
           -> (Database.Persist.Class.PersistEntity.Entity key_alAQ8)
                value_alAQ9 {record_Note_to_TypeType_id = x_alAQa})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note_to_Type where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_Note_to_TypeKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_Note_to_TypeKey
data Record_Poker
  = Record_Poker {record_PokerDate :: !String,
                  record_PokerAmount :: !Int,
                  record_PokerNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note)}
  deriving (Show, Typeable)
type Record_PokerId =
    Database.Persist.Class.PersistEntity.Key Record_Poker
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Poker where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Poker = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Poker
  newtype Database.Persist.Class.PersistEntity.Key Record_Poker
    = Record_PokerKey {unRecord_PokerKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Poker typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Poker =>
      Record_PokerId |
      typ Data.Type.Equality.~ String => Record_PokerDate |
      typ Data.Type.Equality.~ Int => Record_PokerAmount |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_PokerNote_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_PokerKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_PokerKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Poker")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "data")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_PokerId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Poker")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=data"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "date")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "date")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference,
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "amount")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "amount")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Int")))
                   Database.Persist.Types.Base.SqlInt64)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference,
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Poker x_alAQb x_alAQc x_alAQd)
    = [Database.Persist.Class.PersistField.SomePersistField x_alAQb,
       Database.Persist.Class.PersistField.SomePersistField x_alAQc,
       Database.Persist.Class.PersistField.SomePersistField x_alAQd]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_alAQf, x2_alAQg, x3_alAQh]
    = Record_Poker
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "date"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_alAQf
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "amount"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_alAQg
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x3_alAQh
  Database.Persist.Class.PersistEntity.fromPersistValues x_alAQe
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Poker: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_alAQe))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Poker _date_alAQi _amount_alAQj _note_id_alAQk)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_PokerId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_PokerId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Poker")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerDate
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "date")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "date")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerAmount
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "amount")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "amount")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Int")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_PokerId
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_alAQl)
           key_alAQm
           -> (Database.Persist.Class.PersistEntity.Entity key_alAQm)
                value_alAQl)
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerDate
    = (Database.Persist.TH.lensPTH
         (record_PokerDate
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_alAQn
                                                        value_alAQo)
           x_alAQp
           -> (Database.Persist.Class.PersistEntity.Entity key_alAQn)
                value_alAQo {record_PokerDate = x_alAQp})
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerAmount
    = (Database.Persist.TH.lensPTH
         (record_PokerAmount
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_alAQn
                                                        value_alAQo)
           x_alAQp
           -> (Database.Persist.Class.PersistEntity.Entity key_alAQn)
                value_alAQo {record_PokerAmount = x_alAQp})
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerNote_id
    = (Database.Persist.TH.lensPTH
         (record_PokerNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_alAQn
                                                        value_alAQo)
           x_alAQp
           -> (Database.Persist.Class.PersistEntity.Entity key_alAQn)
                value_alAQo {record_PokerNote_id = x_alAQp})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Poker where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_PokerKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_PokerKey
migrateAll :: Database.Persist.Sql.Types.Migration
migrateAll
  = do let defs_alAQq
             = [(((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Action")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "actions")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_ActionId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Action")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=actions"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "action")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "action")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "notes")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_NoteId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=notes"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Type")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "types")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_TypeId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Type")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=types"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "type")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "type")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "note_to_action")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=note_to_action"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64"))),
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "action_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "action_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_ActionId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Action")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "note_to_type")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=note_to_type"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64"))),
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "type_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "type_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_TypeId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Type")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Poker")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "data")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_PokerId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Poker")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=data"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "date")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "date")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference,
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "amount")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "amount")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Int")))
                             Database.Persist.Types.Base.SqlInt64)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference,
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False]
       (Database.Persist.Sql.Migration.migrate defs_alAQq)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Action")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "actions")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_ActionId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Action")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=actions"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "action")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "action")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_alAQq)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "notes")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_NoteId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=notes"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_alAQq)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Type")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "types")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_TypeId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Type")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=types"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "type")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "type")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_alAQq)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "note_to_action")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=note_to_action"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64"))),
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "action_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "action_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_ActionId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Action")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_alAQq)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "note_to_type")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=note_to_type"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64"))),
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "type_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "type_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_TypeId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Type")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_alAQq)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Poker")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "data")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_PokerId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Poker")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=data"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "date")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "date")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference,
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "amount")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "amount")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Int")))
                       Database.Persist.Types.Base.SqlInt64)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference,
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
-- /Users/scott/Poker/src/Poker.hs:(51,1)-(91,2): Splicing declarations
instance Database.Persist.Class.PersistField.PersistField Record_Action where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_alPEM
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["action"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_alPEM))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_alPEN
          -> let columns_alPEO = Data.HashMap.Strict.fromList x_alPEN
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_alPEP
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_alPEP))
                                   columns_alPEO
                             of
                               GHC.Maybe.Just v_alPEQ -> v_alPEQ
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["action"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Action where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_alPER
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["note"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_alPER))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_alPES
          -> let columns_alPET = Data.HashMap.Strict.fromList x_alPES
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_alPEU
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_alPEU))
                                   columns_alPET
                             of
                               GHC.Maybe.Just v_alPEV -> v_alPEV
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Type where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_alPEW
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["type"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_alPEW))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_alPEX
          -> let columns_alPEY = Data.HashMap.Strict.fromList x_alPEX
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_alPEZ
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_alPEZ))
                                   columns_alPEY
                             of
                               GHC.Maybe.Just v_alPF0 -> v_alPF0
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["type"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Type where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note_to_Action where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_alPF1
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["note_id", "action_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_alPF1))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_alPF2
          -> let columns_alPF3 = Data.HashMap.Strict.fromList x_alPF2
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_alPF4
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_alPF4))
                                   columns_alPF3
                             of
                               GHC.Maybe.Just v_alPF5 -> v_alPF5
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note_id", "action_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note_to_Action where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note_to_Type where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_alPF6
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["note_id", "type_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_alPF6))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_alPF7
          -> let columns_alPF8 = Data.HashMap.Strict.fromList x_alPF7
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_alPF9
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_alPF9))
                                   columns_alPF8
                             of
                               GHC.Maybe.Just v_alPFa -> v_alPFa
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note_id", "type_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note_to_Type where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Poker where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_alPFb
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["date", "amount", "note_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_alPFb))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_alPFc
          -> let columns_alPFd = Data.HashMap.Strict.fromList x_alPFc
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_alPFe
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_alPFe))
                                   columns_alPFd
                             of
                               GHC.Maybe.Just v_alPFf -> v_alPFf
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["date", "amount", "note_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Poker where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
data Record_Action
  = Record_Action {record_ActionAction :: !String}
  deriving (Show, Typeable)
type Record_ActionId =
    Database.Persist.Class.PersistEntity.Key Record_Action
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Action where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Action = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Action
  newtype Database.Persist.Class.PersistEntity.Key Record_Action
    = Record_ActionKey {unRecord_ActionKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Action typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Action =>
      Record_ActionId |
      typ Data.Type.Equality.~ String => Record_ActionAction
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_ActionKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_ActionKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Action")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "actions")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_ActionId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Action")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=actions"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "action")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "action")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Action x_alPFg)
    = [Database.Persist.Class.PersistField.SomePersistField x_alPFg]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_alPFi]
    = Record_Action
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "action"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_alPFi
  Database.Persist.Class.PersistEntity.fromPersistValues x_alPFh
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Action: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_alPFh))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Action _action_alPFj)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_ActionId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_ActionAction
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "action")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "action")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_ActionId
  Database.Persist.Class.PersistEntity.fieldLens Record_ActionId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_alPFk)
           key_alPFl
           -> (Database.Persist.Class.PersistEntity.Entity key_alPFl)
                value_alPFk)
  Database.Persist.Class.PersistEntity.fieldLens Record_ActionAction
    = (Database.Persist.TH.lensPTH
         (record_ActionAction
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_alPFm
                                                        value_alPFn)
           x_alPFo
           -> (Database.Persist.Class.PersistEntity.Entity key_alPFm)
                value_alPFn {record_ActionAction = x_alPFo})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Action where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_ActionKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_ActionKey
data Record_Note
  = Record_Note {record_NoteNote :: !String}
  deriving (Show, Typeable)
type Record_NoteId =
    Database.Persist.Class.PersistEntity.Key Record_Note
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note
  newtype Database.Persist.Class.PersistEntity.Key Record_Note
    = Record_NoteKey {unRecord_NoteKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_NoteId |
      typ Data.Type.Equality.~ String => Record_NoteNote
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_NoteKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_NoteKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "notes")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_NoteId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=notes"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note x_alPFp)
    = [Database.Persist.Class.PersistField.SomePersistField x_alPFp]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_alPFr]
    = Record_Note
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_alPFr
  Database.Persist.Class.PersistEntity.fromPersistValues x_alPFq
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_alPFq))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note _note_alPFs)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_NoteId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_NoteNote
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField = Record_NoteId
  Database.Persist.Class.PersistEntity.fieldLens Record_NoteId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_alPFt)
           key_alPFu
           -> (Database.Persist.Class.PersistEntity.Entity key_alPFu)
                value_alPFt)
  Database.Persist.Class.PersistEntity.fieldLens Record_NoteNote
    = (Database.Persist.TH.lensPTH
         (record_NoteNote
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_alPFv
                                                        value_alPFw)
           x_alPFx
           -> (Database.Persist.Class.PersistEntity.Entity key_alPFv)
                value_alPFw {record_NoteNote = x_alPFx})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note where
  Database.Persist.Class.PersistStore.toBackendKey = unRecord_NoteKey
  Database.Persist.Class.PersistStore.fromBackendKey = Record_NoteKey
data Record_Type
  = Record_Type {record_TypeType :: !String}
  deriving (Show, Typeable)
type Record_TypeId =
    Database.Persist.Class.PersistEntity.Key Record_Type
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Type where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Type = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Type
  newtype Database.Persist.Class.PersistEntity.Key Record_Type
    = Record_TypeKey {unRecord_TypeKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Type typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Type =>
      Record_TypeId |
      typ Data.Type.Equality.~ String => Record_TypeType
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_TypeKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_TypeKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Type")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "types")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_TypeId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Type")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=types"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "type")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "type")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Type x_alPFy)
    = [Database.Persist.Class.PersistField.SomePersistField x_alPFy]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_alPFA]
    = Record_Type
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "type"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_alPFA
  Database.Persist.Class.PersistEntity.fromPersistValues x_alPFz
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Type: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_alPFz))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Type _type_alPFB)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_TypeId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_TypeType
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "type")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "type")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField = Record_TypeId
  Database.Persist.Class.PersistEntity.fieldLens Record_TypeId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_alPFC)
           key_alPFD
           -> (Database.Persist.Class.PersistEntity.Entity key_alPFD)
                value_alPFC)
  Database.Persist.Class.PersistEntity.fieldLens Record_TypeType
    = (Database.Persist.TH.lensPTH
         (record_TypeType
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_alPFE
                                                        value_alPFF)
           x_alPFG
           -> (Database.Persist.Class.PersistEntity.Entity key_alPFE)
                value_alPFF {record_TypeType = x_alPFG})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Type where
  Database.Persist.Class.PersistStore.toBackendKey = unRecord_TypeKey
  Database.Persist.Class.PersistStore.fromBackendKey = Record_TypeKey
data Record_Note_to_Action
  = Record_Note_to_Action {record_Note_to_ActionNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note),
                           record_Note_to_ActionAction_id :: !(Database.Persist.Class.PersistEntity.Key Record_Action)}
  deriving (Show, Typeable)
type Record_Note_to_ActionId =
    Database.Persist.Class.PersistEntity.Key Record_Note_to_Action
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note_to_Action where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note_to_Action = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note_to_Action
  newtype Database.Persist.Class.PersistEntity.Key Record_Note_to_Action
    = Record_Note_to_ActionKey {unRecord_Note_to_ActionKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note_to_Action typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note_to_Action =>
      Record_Note_to_ActionId |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_Note_to_ActionNote_id |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Action =>
      Record_Note_to_ActionAction_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_Note_to_ActionKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_Note_to_ActionKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "note_to_action")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=note_to_action"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64"))),
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "action_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "action_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_ActionId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Action")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note_to_Action x_alPFH x_alPFI)
    = [Database.Persist.Class.PersistField.SomePersistField x_alPFH,
       Database.Persist.Class.PersistField.SomePersistField x_alPFI]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_alPFK, x2_alPFL]
    = Record_Note_to_Action
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_alPFK
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "action_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_alPFL
  Database.Persist.Class.PersistEntity.fromPersistValues x_alPFJ
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note_to_Action: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_alPFJ))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note_to_Action _note_id_alPFM _action_id_alPFN)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note_to_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionAction_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "action_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "action_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_Note_to_ActionId
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_alPFO)
           key_alPFP
           -> (Database.Persist.Class.PersistEntity.Entity key_alPFP)
                value_alPFO)
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionNote_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_ActionNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_alPFQ
                                                        value_alPFR)
           x_alPFS
           -> (Database.Persist.Class.PersistEntity.Entity key_alPFQ)
                value_alPFR {record_Note_to_ActionNote_id = x_alPFS})
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionAction_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_ActionAction_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_alPFQ
                                                        value_alPFR)
           x_alPFS
           -> (Database.Persist.Class.PersistEntity.Entity key_alPFQ)
                value_alPFR {record_Note_to_ActionAction_id = x_alPFS})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note_to_Action where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_Note_to_ActionKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_Note_to_ActionKey
data Record_Note_to_Type
  = Record_Note_to_Type {record_Note_to_TypeNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note),
                         record_Note_to_TypeType_id :: !(Database.Persist.Class.PersistEntity.Key Record_Type)}
  deriving (Show, Typeable)
type Record_Note_to_TypeId =
    Database.Persist.Class.PersistEntity.Key Record_Note_to_Type
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note_to_Type where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note_to_Type = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note_to_Type
  newtype Database.Persist.Class.PersistEntity.Key Record_Note_to_Type
    = Record_Note_to_TypeKey {unRecord_Note_to_TypeKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note_to_Type typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note_to_Type =>
      Record_Note_to_TypeId |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_Note_to_TypeNote_id |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Type =>
      Record_Note_to_TypeType_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_Note_to_TypeKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_Note_to_TypeKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "note_to_type")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=note_to_type"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64"))),
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "type_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "type_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_TypeId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Type")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note_to_Type x_alPFT x_alPFU)
    = [Database.Persist.Class.PersistField.SomePersistField x_alPFT,
       Database.Persist.Class.PersistField.SomePersistField x_alPFU]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_alPFW, x2_alPFX]
    = Record_Note_to_Type
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_alPFW
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "type_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_alPFX
  Database.Persist.Class.PersistEntity.fromPersistValues x_alPFV
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note_to_Type: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_alPFV))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note_to_Type _note_id_alPFY _type_id_alPFZ)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note_to_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeType_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "type_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "type_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_Note_to_TypeId
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_alPG0)
           key_alPG1
           -> (Database.Persist.Class.PersistEntity.Entity key_alPG1)
                value_alPG0)
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeNote_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_TypeNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_alPG2
                                                        value_alPG3)
           x_alPG4
           -> (Database.Persist.Class.PersistEntity.Entity key_alPG2)
                value_alPG3 {record_Note_to_TypeNote_id = x_alPG4})
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeType_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_TypeType_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_alPG2
                                                        value_alPG3)
           x_alPG4
           -> (Database.Persist.Class.PersistEntity.Entity key_alPG2)
                value_alPG3 {record_Note_to_TypeType_id = x_alPG4})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note_to_Type where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_Note_to_TypeKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_Note_to_TypeKey
data Record_Poker
  = Record_Poker {record_PokerDate :: !String,
                  record_PokerAmount :: !Int,
                  record_PokerNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note)}
  deriving (Show, Typeable)
type Record_PokerId =
    Database.Persist.Class.PersistEntity.Key Record_Poker
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Poker where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Poker = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Poker
  newtype Database.Persist.Class.PersistEntity.Key Record_Poker
    = Record_PokerKey {unRecord_PokerKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Poker typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Poker =>
      Record_PokerId |
      typ Data.Type.Equality.~ String => Record_PokerDate |
      typ Data.Type.Equality.~ Int => Record_PokerAmount |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_PokerNote_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_PokerKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_PokerKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Poker")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "data")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_PokerId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Poker")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=data"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "date")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "date")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference,
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "amount")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "amount")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Int")))
                   Database.Persist.Types.Base.SqlInt64)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference,
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Poker x_alPG5 x_alPG6 x_alPG7)
    = [Database.Persist.Class.PersistField.SomePersistField x_alPG5,
       Database.Persist.Class.PersistField.SomePersistField x_alPG6,
       Database.Persist.Class.PersistField.SomePersistField x_alPG7]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_alPG9, x2_alPGa, x3_alPGb]
    = Record_Poker
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "date"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_alPG9
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "amount"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_alPGa
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x3_alPGb
  Database.Persist.Class.PersistEntity.fromPersistValues x_alPG8
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Poker: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_alPG8))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Poker _date_alPGc _amount_alPGd _note_id_alPGe)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_PokerId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_PokerId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Poker")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerDate
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "date")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "date")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerAmount
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "amount")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "amount")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Int")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_PokerId
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_alPGf)
           key_alPGg
           -> (Database.Persist.Class.PersistEntity.Entity key_alPGg)
                value_alPGf)
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerDate
    = (Database.Persist.TH.lensPTH
         (record_PokerDate
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_alPGh
                                                        value_alPGi)
           x_alPGj
           -> (Database.Persist.Class.PersistEntity.Entity key_alPGh)
                value_alPGi {record_PokerDate = x_alPGj})
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerAmount
    = (Database.Persist.TH.lensPTH
         (record_PokerAmount
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_alPGh
                                                        value_alPGi)
           x_alPGj
           -> (Database.Persist.Class.PersistEntity.Entity key_alPGh)
                value_alPGi {record_PokerAmount = x_alPGj})
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerNote_id
    = (Database.Persist.TH.lensPTH
         (record_PokerNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_alPGh
                                                        value_alPGi)
           x_alPGj
           -> (Database.Persist.Class.PersistEntity.Entity key_alPGh)
                value_alPGi {record_PokerNote_id = x_alPGj})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Poker where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_PokerKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_PokerKey
migrateAll :: Database.Persist.Sql.Types.Migration
migrateAll
  = do let defs_alPGk
             = [(((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Action")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "actions")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_ActionId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Action")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=actions"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "action")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "action")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "notes")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_NoteId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=notes"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Type")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "types")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_TypeId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Type")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=types"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "type")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "type")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "note_to_action")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=note_to_action"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64"))),
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "action_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "action_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_ActionId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Action")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "note_to_type")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=note_to_type"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64"))),
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "type_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "type_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_TypeId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Type")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Poker")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "data")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_PokerId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Poker")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=data"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "date")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "date")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference,
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "amount")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "amount")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Int")))
                             Database.Persist.Types.Base.SqlInt64)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference,
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False]
       (Database.Persist.Sql.Migration.migrate defs_alPGk)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Action")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "actions")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_ActionId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Action")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=actions"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "action")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "action")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_alPGk)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "notes")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_NoteId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=notes"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_alPGk)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Type")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "types")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_TypeId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Type")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=types"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "type")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "type")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_alPGk)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "note_to_action")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=note_to_action"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64"))),
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "action_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "action_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_ActionId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Action")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_alPGk)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "note_to_type")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=note_to_type"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64"))),
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "type_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "type_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_TypeId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Type")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_alPGk)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Poker")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "data")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_PokerId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Poker")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=data"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "date")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "date")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference,
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "amount")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "amount")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Int")))
                       Database.Persist.Types.Base.SqlInt64)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference,
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
-- /Users/scott/Poker/src/Poker.hs:(51,1)-(91,2): Splicing declarations
instance Database.Persist.Class.PersistField.PersistField Record_Action where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_alYPg
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["action"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_alYPg))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_alYPh
          -> let columns_alYPi = Data.HashMap.Strict.fromList x_alYPh
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_alYPj
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_alYPj))
                                   columns_alYPi
                             of
                               GHC.Maybe.Just v_alYPk -> v_alYPk
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["action"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Action where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_alYPl
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["note"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_alYPl))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_alYPm
          -> let columns_alYPn = Data.HashMap.Strict.fromList x_alYPm
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_alYPo
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_alYPo))
                                   columns_alYPn
                             of
                               GHC.Maybe.Just v_alYPp -> v_alYPp
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Type where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_alYPq
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["type"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_alYPq))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_alYPr
          -> let columns_alYPs = Data.HashMap.Strict.fromList x_alYPr
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_alYPt
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_alYPt))
                                   columns_alYPs
                             of
                               GHC.Maybe.Just v_alYPu -> v_alYPu
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["type"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Type where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note_to_Action where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_alYPv
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["note_id", "action_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_alYPv))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_alYPw
          -> let columns_alYPx = Data.HashMap.Strict.fromList x_alYPw
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_alYPy
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_alYPy))
                                   columns_alYPx
                             of
                               GHC.Maybe.Just v_alYPz -> v_alYPz
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note_id", "action_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note_to_Action where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note_to_Type where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_alYPA
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["note_id", "type_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_alYPA))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_alYPB
          -> let columns_alYPC = Data.HashMap.Strict.fromList x_alYPB
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_alYPD
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_alYPD))
                                   columns_alYPC
                             of
                               GHC.Maybe.Just v_alYPE -> v_alYPE
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note_id", "type_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note_to_Type where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Poker where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_alYPF
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["date", "amount", "note_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_alYPF))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_alYPG
          -> let columns_alYPH = Data.HashMap.Strict.fromList x_alYPG
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_alYPI
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_alYPI))
                                   columns_alYPH
                             of
                               GHC.Maybe.Just v_alYPJ -> v_alYPJ
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["date", "amount", "note_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Poker where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
data Record_Action
  = Record_Action {record_ActionAction :: !String}
  deriving (Show, Typeable)
type Record_ActionId =
    Database.Persist.Class.PersistEntity.Key Record_Action
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Action where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Action = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Action
  newtype Database.Persist.Class.PersistEntity.Key Record_Action
    = Record_ActionKey {unRecord_ActionKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Action typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Action =>
      Record_ActionId |
      typ Data.Type.Equality.~ String => Record_ActionAction
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_ActionKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_ActionKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Action")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "actions")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_ActionId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Action")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=actions"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "action")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "action")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Action x_alYPK)
    = [Database.Persist.Class.PersistField.SomePersistField x_alYPK]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_alYPM]
    = Record_Action
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "action"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_alYPM
  Database.Persist.Class.PersistEntity.fromPersistValues x_alYPL
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Action: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_alYPL))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Action _action_alYPN)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_ActionId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_ActionAction
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "action")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "action")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_ActionId
  Database.Persist.Class.PersistEntity.fieldLens Record_ActionId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_alYPO)
           key_alYPP
           -> (Database.Persist.Class.PersistEntity.Entity key_alYPP)
                value_alYPO)
  Database.Persist.Class.PersistEntity.fieldLens Record_ActionAction
    = (Database.Persist.TH.lensPTH
         (record_ActionAction
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_alYPQ
                                                        value_alYPR)
           x_alYPS
           -> (Database.Persist.Class.PersistEntity.Entity key_alYPQ)
                value_alYPR {record_ActionAction = x_alYPS})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Action where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_ActionKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_ActionKey
data Record_Note
  = Record_Note {record_NoteNote :: !String}
  deriving (Show, Typeable)
type Record_NoteId =
    Database.Persist.Class.PersistEntity.Key Record_Note
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note
  newtype Database.Persist.Class.PersistEntity.Key Record_Note
    = Record_NoteKey {unRecord_NoteKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_NoteId |
      typ Data.Type.Equality.~ String => Record_NoteNote
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_NoteKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_NoteKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "notes")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_NoteId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=notes"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note x_alYPT)
    = [Database.Persist.Class.PersistField.SomePersistField x_alYPT]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_alYPV]
    = Record_Note
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_alYPV
  Database.Persist.Class.PersistEntity.fromPersistValues x_alYPU
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_alYPU))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note _note_alYPW)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_NoteId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_NoteNote
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField = Record_NoteId
  Database.Persist.Class.PersistEntity.fieldLens Record_NoteId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_alYPX)
           key_alYPY
           -> (Database.Persist.Class.PersistEntity.Entity key_alYPY)
                value_alYPX)
  Database.Persist.Class.PersistEntity.fieldLens Record_NoteNote
    = (Database.Persist.TH.lensPTH
         (record_NoteNote
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_alYPZ
                                                        value_alYQ0)
           x_alYQ1
           -> (Database.Persist.Class.PersistEntity.Entity key_alYPZ)
                value_alYQ0 {record_NoteNote = x_alYQ1})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note where
  Database.Persist.Class.PersistStore.toBackendKey = unRecord_NoteKey
  Database.Persist.Class.PersistStore.fromBackendKey = Record_NoteKey
data Record_Type
  = Record_Type {record_TypeType :: !String}
  deriving (Show, Typeable)
type Record_TypeId =
    Database.Persist.Class.PersistEntity.Key Record_Type
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Type where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Type = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Type
  newtype Database.Persist.Class.PersistEntity.Key Record_Type
    = Record_TypeKey {unRecord_TypeKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Type typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Type =>
      Record_TypeId |
      typ Data.Type.Equality.~ String => Record_TypeType
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_TypeKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_TypeKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Type")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "types")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_TypeId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Type")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=types"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "type")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "type")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Type x_alYQ2)
    = [Database.Persist.Class.PersistField.SomePersistField x_alYQ2]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_alYQ4]
    = Record_Type
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "type"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_alYQ4
  Database.Persist.Class.PersistEntity.fromPersistValues x_alYQ3
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Type: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_alYQ3))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Type _type_alYQ5)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_TypeId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_TypeType
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "type")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "type")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField = Record_TypeId
  Database.Persist.Class.PersistEntity.fieldLens Record_TypeId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_alYQ6)
           key_alYQ7
           -> (Database.Persist.Class.PersistEntity.Entity key_alYQ7)
                value_alYQ6)
  Database.Persist.Class.PersistEntity.fieldLens Record_TypeType
    = (Database.Persist.TH.lensPTH
         (record_TypeType
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_alYQ8
                                                        value_alYQ9)
           x_alYQa
           -> (Database.Persist.Class.PersistEntity.Entity key_alYQ8)
                value_alYQ9 {record_TypeType = x_alYQa})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Type where
  Database.Persist.Class.PersistStore.toBackendKey = unRecord_TypeKey
  Database.Persist.Class.PersistStore.fromBackendKey = Record_TypeKey
data Record_Note_to_Action
  = Record_Note_to_Action {record_Note_to_ActionNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note),
                           record_Note_to_ActionAction_id :: !(Database.Persist.Class.PersistEntity.Key Record_Action)}
  deriving (Show, Typeable)
type Record_Note_to_ActionId =
    Database.Persist.Class.PersistEntity.Key Record_Note_to_Action
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note_to_Action where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note_to_Action = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note_to_Action
  newtype Database.Persist.Class.PersistEntity.Key Record_Note_to_Action
    = Record_Note_to_ActionKey {unRecord_Note_to_ActionKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note_to_Action typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note_to_Action =>
      Record_Note_to_ActionId |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_Note_to_ActionNote_id |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Action =>
      Record_Note_to_ActionAction_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_Note_to_ActionKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_Note_to_ActionKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "note_to_action")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=note_to_action"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64"))),
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "action_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "action_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_ActionId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Action")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note_to_Action x_alYQb x_alYQc)
    = [Database.Persist.Class.PersistField.SomePersistField x_alYQb,
       Database.Persist.Class.PersistField.SomePersistField x_alYQc]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_alYQe, x2_alYQf]
    = Record_Note_to_Action
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_alYQe
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "action_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_alYQf
  Database.Persist.Class.PersistEntity.fromPersistValues x_alYQd
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note_to_Action: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_alYQd))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note_to_Action _note_id_alYQg _action_id_alYQh)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note_to_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionAction_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "action_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "action_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_Note_to_ActionId
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_alYQi)
           key_alYQj
           -> (Database.Persist.Class.PersistEntity.Entity key_alYQj)
                value_alYQi)
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionNote_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_ActionNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_alYQk
                                                        value_alYQl)
           x_alYQm
           -> (Database.Persist.Class.PersistEntity.Entity key_alYQk)
                value_alYQl {record_Note_to_ActionNote_id = x_alYQm})
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionAction_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_ActionAction_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_alYQk
                                                        value_alYQl)
           x_alYQm
           -> (Database.Persist.Class.PersistEntity.Entity key_alYQk)
                value_alYQl {record_Note_to_ActionAction_id = x_alYQm})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note_to_Action where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_Note_to_ActionKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_Note_to_ActionKey
data Record_Note_to_Type
  = Record_Note_to_Type {record_Note_to_TypeNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note),
                         record_Note_to_TypeType_id :: !(Database.Persist.Class.PersistEntity.Key Record_Type)}
  deriving (Show, Typeable)
type Record_Note_to_TypeId =
    Database.Persist.Class.PersistEntity.Key Record_Note_to_Type
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note_to_Type where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note_to_Type = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note_to_Type
  newtype Database.Persist.Class.PersistEntity.Key Record_Note_to_Type
    = Record_Note_to_TypeKey {unRecord_Note_to_TypeKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note_to_Type typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note_to_Type =>
      Record_Note_to_TypeId |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_Note_to_TypeNote_id |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Type =>
      Record_Note_to_TypeType_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_Note_to_TypeKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_Note_to_TypeKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "note_to_type")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=note_to_type"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64"))),
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "type_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "type_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_TypeId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Type")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note_to_Type x_alYQn x_alYQo)
    = [Database.Persist.Class.PersistField.SomePersistField x_alYQn,
       Database.Persist.Class.PersistField.SomePersistField x_alYQo]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_alYQq, x2_alYQr]
    = Record_Note_to_Type
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_alYQq
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "type_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_alYQr
  Database.Persist.Class.PersistEntity.fromPersistValues x_alYQp
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note_to_Type: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_alYQp))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note_to_Type _note_id_alYQs _type_id_alYQt)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note_to_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeType_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "type_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "type_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_Note_to_TypeId
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_alYQu)
           key_alYQv
           -> (Database.Persist.Class.PersistEntity.Entity key_alYQv)
                value_alYQu)
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeNote_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_TypeNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_alYQw
                                                        value_alYQx)
           x_alYQy
           -> (Database.Persist.Class.PersistEntity.Entity key_alYQw)
                value_alYQx {record_Note_to_TypeNote_id = x_alYQy})
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeType_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_TypeType_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_alYQw
                                                        value_alYQx)
           x_alYQy
           -> (Database.Persist.Class.PersistEntity.Entity key_alYQw)
                value_alYQx {record_Note_to_TypeType_id = x_alYQy})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note_to_Type where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_Note_to_TypeKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_Note_to_TypeKey
data Record_Poker
  = Record_Poker {record_PokerDate :: !String,
                  record_PokerAmount :: !Int,
                  record_PokerNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note)}
  deriving (Show, Typeable)
type Record_PokerId =
    Database.Persist.Class.PersistEntity.Key Record_Poker
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Poker where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Poker = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Poker
  newtype Database.Persist.Class.PersistEntity.Key Record_Poker
    = Record_PokerKey {unRecord_PokerKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Poker typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Poker =>
      Record_PokerId |
      typ Data.Type.Equality.~ String => Record_PokerDate |
      typ Data.Type.Equality.~ Int => Record_PokerAmount |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_PokerNote_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_PokerKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_PokerKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Poker")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "data")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_PokerId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Poker")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=data"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "date")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "date")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference,
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "amount")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "amount")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Int")))
                   Database.Persist.Types.Base.SqlInt64)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference,
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Poker x_alYQz x_alYQA x_alYQB)
    = [Database.Persist.Class.PersistField.SomePersistField x_alYQz,
       Database.Persist.Class.PersistField.SomePersistField x_alYQA,
       Database.Persist.Class.PersistField.SomePersistField x_alYQB]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_alYQD, x2_alYQE, x3_alYQF]
    = Record_Poker
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "date"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_alYQD
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "amount"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_alYQE
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x3_alYQF
  Database.Persist.Class.PersistEntity.fromPersistValues x_alYQC
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Poker: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_alYQC))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Poker _date_alYQG _amount_alYQH _note_id_alYQI)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_PokerId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_PokerId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Poker")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerDate
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "date")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "date")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerAmount
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "amount")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "amount")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Int")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_PokerId
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_alYQJ)
           key_alYQK
           -> (Database.Persist.Class.PersistEntity.Entity key_alYQK)
                value_alYQJ)
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerDate
    = (Database.Persist.TH.lensPTH
         (record_PokerDate
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_alYQL
                                                        value_alYQM)
           x_alYQN
           -> (Database.Persist.Class.PersistEntity.Entity key_alYQL)
                value_alYQM {record_PokerDate = x_alYQN})
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerAmount
    = (Database.Persist.TH.lensPTH
         (record_PokerAmount
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_alYQL
                                                        value_alYQM)
           x_alYQN
           -> (Database.Persist.Class.PersistEntity.Entity key_alYQL)
                value_alYQM {record_PokerAmount = x_alYQN})
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerNote_id
    = (Database.Persist.TH.lensPTH
         (record_PokerNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_alYQL
                                                        value_alYQM)
           x_alYQN
           -> (Database.Persist.Class.PersistEntity.Entity key_alYQL)
                value_alYQM {record_PokerNote_id = x_alYQN})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Poker where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_PokerKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_PokerKey
migrateAll :: Database.Persist.Sql.Types.Migration
migrateAll
  = do let defs_alYQO
             = [(((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Action")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "actions")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_ActionId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Action")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=actions"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "action")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "action")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "notes")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_NoteId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=notes"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Type")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "types")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_TypeId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Type")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=types"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "type")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "type")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "note_to_action")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=note_to_action"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64"))),
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "action_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "action_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_ActionId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Action")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "note_to_type")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=note_to_type"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64"))),
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "type_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "type_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_TypeId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Type")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Poker")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "data")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_PokerId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Poker")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=data"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "date")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "date")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference,
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "amount")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "amount")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Int")))
                             Database.Persist.Types.Base.SqlInt64)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference,
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False]
       (Database.Persist.Sql.Migration.migrate defs_alYQO)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Action")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "actions")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_ActionId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Action")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=actions"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "action")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "action")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_alYQO)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "notes")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_NoteId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=notes"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_alYQO)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Type")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "types")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_TypeId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Type")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=types"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "type")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "type")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_alYQO)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "note_to_action")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=note_to_action"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64"))),
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "action_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "action_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_ActionId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Action")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_alYQO)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "note_to_type")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=note_to_type"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64"))),
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "type_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "type_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_TypeId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Type")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_alYQO)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Poker")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "data")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_PokerId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Poker")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=data"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "date")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "date")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference,
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "amount")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "amount")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Int")))
                       Database.Persist.Types.Base.SqlInt64)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference,
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
-- /Users/scott/Poker/src/Poker.hs:(51,1)-(91,2): Splicing declarations
instance Database.Persist.Class.PersistField.PersistField Record_Action where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_amcgU
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["action"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_amcgU))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_amcgV
          -> let columns_amcgW = Data.HashMap.Strict.fromList x_amcgV
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_amcgX
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_amcgX))
                                   columns_amcgW
                             of
                               GHC.Maybe.Just v_amcgY -> v_amcgY
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["action"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Action where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_amcgZ
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["note"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_amcgZ))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_amch0
          -> let columns_amch1 = Data.HashMap.Strict.fromList x_amch0
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_amch2
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_amch2))
                                   columns_amch1
                             of
                               GHC.Maybe.Just v_amch3 -> v_amch3
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Type where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_amch4
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["type"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_amch4))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_amch5
          -> let columns_amch6 = Data.HashMap.Strict.fromList x_amch5
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_amch7
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_amch7))
                                   columns_amch6
                             of
                               GHC.Maybe.Just v_amch8 -> v_amch8
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["type"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Type where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note_to_Action where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_amch9
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["note_id", "action_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_amch9))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_amcha
          -> let columns_amchb = Data.HashMap.Strict.fromList x_amcha
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_amchc
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_amchc))
                                   columns_amchb
                             of
                               GHC.Maybe.Just v_amchd -> v_amchd
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note_id", "action_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note_to_Action where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note_to_Type where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_amche
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["note_id", "type_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_amche))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_amchf
          -> let columns_amchg = Data.HashMap.Strict.fromList x_amchf
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_amchh
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_amchh))
                                   columns_amchg
                             of
                               GHC.Maybe.Just v_amchi -> v_amchi
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note_id", "type_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note_to_Type where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Poker where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_amchj
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["date", "amount", "note_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_amchj))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_amchk
          -> let columns_amchl = Data.HashMap.Strict.fromList x_amchk
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_amchm
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_amchm))
                                   columns_amchl
                             of
                               GHC.Maybe.Just v_amchn -> v_amchn
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["date", "amount", "note_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Poker where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
data Record_Action
  = Record_Action {record_ActionAction :: !String}
  deriving (Show, Typeable)
type Record_ActionId =
    Database.Persist.Class.PersistEntity.Key Record_Action
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Action where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Action = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Action
  newtype Database.Persist.Class.PersistEntity.Key Record_Action
    = Record_ActionKey {unRecord_ActionKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Action typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Action =>
      Record_ActionId |
      typ Data.Type.Equality.~ String => Record_ActionAction
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_ActionKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_ActionKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Action")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "actions")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_ActionId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Action")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=actions"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "action")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "action")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Action x_amcho)
    = [Database.Persist.Class.PersistField.SomePersistField x_amcho]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_amchq]
    = Record_Action
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "action"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_amchq
  Database.Persist.Class.PersistEntity.fromPersistValues x_amchp
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Action: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_amchp))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Action _action_amchr)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_ActionId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_ActionAction
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "action")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "action")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_ActionId
  Database.Persist.Class.PersistEntity.fieldLens Record_ActionId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_amchs)
           key_amcht
           -> (Database.Persist.Class.PersistEntity.Entity key_amcht)
                value_amchs)
  Database.Persist.Class.PersistEntity.fieldLens Record_ActionAction
    = (Database.Persist.TH.lensPTH
         (record_ActionAction
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_amchu
                                                        value_amchv)
           x_amchw
           -> (Database.Persist.Class.PersistEntity.Entity key_amchu)
                value_amchv {record_ActionAction = x_amchw})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Action where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_ActionKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_ActionKey
data Record_Note
  = Record_Note {record_NoteNote :: !String}
  deriving (Show, Typeable)
type Record_NoteId =
    Database.Persist.Class.PersistEntity.Key Record_Note
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note
  newtype Database.Persist.Class.PersistEntity.Key Record_Note
    = Record_NoteKey {unRecord_NoteKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_NoteId |
      typ Data.Type.Equality.~ String => Record_NoteNote
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_NoteKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_NoteKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "notes")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_NoteId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=notes"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note x_amchx)
    = [Database.Persist.Class.PersistField.SomePersistField x_amchx]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_amchz]
    = Record_Note
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_amchz
  Database.Persist.Class.PersistEntity.fromPersistValues x_amchy
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_amchy))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note _note_amchA)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_NoteId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_NoteNote
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField = Record_NoteId
  Database.Persist.Class.PersistEntity.fieldLens Record_NoteId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_amchB)
           key_amchC
           -> (Database.Persist.Class.PersistEntity.Entity key_amchC)
                value_amchB)
  Database.Persist.Class.PersistEntity.fieldLens Record_NoteNote
    = (Database.Persist.TH.lensPTH
         (record_NoteNote
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_amchD
                                                        value_amchE)
           x_amchF
           -> (Database.Persist.Class.PersistEntity.Entity key_amchD)
                value_amchE {record_NoteNote = x_amchF})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note where
  Database.Persist.Class.PersistStore.toBackendKey = unRecord_NoteKey
  Database.Persist.Class.PersistStore.fromBackendKey = Record_NoteKey
data Record_Type
  = Record_Type {record_TypeType :: !String}
  deriving (Show, Typeable)
type Record_TypeId =
    Database.Persist.Class.PersistEntity.Key Record_Type
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Type where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Type = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Type
  newtype Database.Persist.Class.PersistEntity.Key Record_Type
    = Record_TypeKey {unRecord_TypeKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Type typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Type =>
      Record_TypeId |
      typ Data.Type.Equality.~ String => Record_TypeType
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_TypeKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_TypeKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Type")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "types")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_TypeId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Type")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=types"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "type")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "type")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Type x_amchG)
    = [Database.Persist.Class.PersistField.SomePersistField x_amchG]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_amchI]
    = Record_Type
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "type"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_amchI
  Database.Persist.Class.PersistEntity.fromPersistValues x_amchH
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Type: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_amchH))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Type _type_amchJ)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_TypeId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_TypeType
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "type")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "type")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField = Record_TypeId
  Database.Persist.Class.PersistEntity.fieldLens Record_TypeId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_amchK)
           key_amchL
           -> (Database.Persist.Class.PersistEntity.Entity key_amchL)
                value_amchK)
  Database.Persist.Class.PersistEntity.fieldLens Record_TypeType
    = (Database.Persist.TH.lensPTH
         (record_TypeType
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_amchM
                                                        value_amchN)
           x_amchO
           -> (Database.Persist.Class.PersistEntity.Entity key_amchM)
                value_amchN {record_TypeType = x_amchO})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Type where
  Database.Persist.Class.PersistStore.toBackendKey = unRecord_TypeKey
  Database.Persist.Class.PersistStore.fromBackendKey = Record_TypeKey
data Record_Note_to_Action
  = Record_Note_to_Action {record_Note_to_ActionNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note),
                           record_Note_to_ActionAction_id :: !(Database.Persist.Class.PersistEntity.Key Record_Action)}
  deriving (Show, Typeable)
type Record_Note_to_ActionId =
    Database.Persist.Class.PersistEntity.Key Record_Note_to_Action
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note_to_Action where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note_to_Action = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note_to_Action
  newtype Database.Persist.Class.PersistEntity.Key Record_Note_to_Action
    = Record_Note_to_ActionKey {unRecord_Note_to_ActionKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note_to_Action typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note_to_Action =>
      Record_Note_to_ActionId |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_Note_to_ActionNote_id |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Action =>
      Record_Note_to_ActionAction_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_Note_to_ActionKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_Note_to_ActionKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "note_to_action")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=note_to_action"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64"))),
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "action_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "action_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_ActionId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Action")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note_to_Action x_amchP x_amchQ)
    = [Database.Persist.Class.PersistField.SomePersistField x_amchP,
       Database.Persist.Class.PersistField.SomePersistField x_amchQ]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_amchS, x2_amchT]
    = Record_Note_to_Action
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_amchS
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "action_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_amchT
  Database.Persist.Class.PersistEntity.fromPersistValues x_amchR
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note_to_Action: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_amchR))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note_to_Action _note_id_amchU _action_id_amchV)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note_to_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionAction_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "action_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "action_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_Note_to_ActionId
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_amchW)
           key_amchX
           -> (Database.Persist.Class.PersistEntity.Entity key_amchX)
                value_amchW)
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionNote_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_ActionNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_amchY
                                                        value_amchZ)
           x_amci0
           -> (Database.Persist.Class.PersistEntity.Entity key_amchY)
                value_amchZ {record_Note_to_ActionNote_id = x_amci0})
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionAction_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_ActionAction_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_amchY
                                                        value_amchZ)
           x_amci0
           -> (Database.Persist.Class.PersistEntity.Entity key_amchY)
                value_amchZ {record_Note_to_ActionAction_id = x_amci0})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note_to_Action where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_Note_to_ActionKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_Note_to_ActionKey
data Record_Note_to_Type
  = Record_Note_to_Type {record_Note_to_TypeNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note),
                         record_Note_to_TypeType_id :: !(Database.Persist.Class.PersistEntity.Key Record_Type)}
  deriving (Show, Typeable)
type Record_Note_to_TypeId =
    Database.Persist.Class.PersistEntity.Key Record_Note_to_Type
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note_to_Type where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note_to_Type = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note_to_Type
  newtype Database.Persist.Class.PersistEntity.Key Record_Note_to_Type
    = Record_Note_to_TypeKey {unRecord_Note_to_TypeKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note_to_Type typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note_to_Type =>
      Record_Note_to_TypeId |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_Note_to_TypeNote_id |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Type =>
      Record_Note_to_TypeType_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_Note_to_TypeKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_Note_to_TypeKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "note_to_type")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=note_to_type"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64"))),
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "type_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "type_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_TypeId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Type")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note_to_Type x_amci1 x_amci2)
    = [Database.Persist.Class.PersistField.SomePersistField x_amci1,
       Database.Persist.Class.PersistField.SomePersistField x_amci2]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_amci4, x2_amci5]
    = Record_Note_to_Type
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_amci4
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "type_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_amci5
  Database.Persist.Class.PersistEntity.fromPersistValues x_amci3
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note_to_Type: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_amci3))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note_to_Type _note_id_amci6 _type_id_amci7)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note_to_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeType_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "type_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "type_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_Note_to_TypeId
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_amci8)
           key_amci9
           -> (Database.Persist.Class.PersistEntity.Entity key_amci9)
                value_amci8)
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeNote_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_TypeNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_amcia
                                                        value_amcib)
           x_amcic
           -> (Database.Persist.Class.PersistEntity.Entity key_amcia)
                value_amcib {record_Note_to_TypeNote_id = x_amcic})
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeType_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_TypeType_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_amcia
                                                        value_amcib)
           x_amcic
           -> (Database.Persist.Class.PersistEntity.Entity key_amcia)
                value_amcib {record_Note_to_TypeType_id = x_amcic})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note_to_Type where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_Note_to_TypeKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_Note_to_TypeKey
data Record_Poker
  = Record_Poker {record_PokerDate :: !String,
                  record_PokerAmount :: !Int,
                  record_PokerNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note)}
  deriving (Show, Typeable)
type Record_PokerId =
    Database.Persist.Class.PersistEntity.Key Record_Poker
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Poker where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Poker = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Poker
  newtype Database.Persist.Class.PersistEntity.Key Record_Poker
    = Record_PokerKey {unRecord_PokerKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Poker typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Poker =>
      Record_PokerId |
      typ Data.Type.Equality.~ String => Record_PokerDate |
      typ Data.Type.Equality.~ Int => Record_PokerAmount |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_PokerNote_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_PokerKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_PokerKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Poker")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "data")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_PokerId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Poker")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=data"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "date")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "date")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference,
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "amount")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "amount")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Int")))
                   Database.Persist.Types.Base.SqlInt64)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference,
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Poker x_amcid x_amcie x_amcif)
    = [Database.Persist.Class.PersistField.SomePersistField x_amcid,
       Database.Persist.Class.PersistField.SomePersistField x_amcie,
       Database.Persist.Class.PersistField.SomePersistField x_amcif]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_amcih, x2_amcii, x3_amcij]
    = Record_Poker
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "date"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_amcih
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "amount"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_amcii
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x3_amcij
  Database.Persist.Class.PersistEntity.fromPersistValues x_amcig
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Poker: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_amcig))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Poker _date_amcik _amount_amcil _note_id_amcim)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_PokerId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_PokerId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Poker")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerDate
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "date")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "date")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerAmount
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "amount")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "amount")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Int")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_PokerId
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_amcin)
           key_amcio
           -> (Database.Persist.Class.PersistEntity.Entity key_amcio)
                value_amcin)
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerDate
    = (Database.Persist.TH.lensPTH
         (record_PokerDate
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_amcip
                                                        value_amciq)
           x_amcir
           -> (Database.Persist.Class.PersistEntity.Entity key_amcip)
                value_amciq {record_PokerDate = x_amcir})
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerAmount
    = (Database.Persist.TH.lensPTH
         (record_PokerAmount
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_amcip
                                                        value_amciq)
           x_amcir
           -> (Database.Persist.Class.PersistEntity.Entity key_amcip)
                value_amciq {record_PokerAmount = x_amcir})
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerNote_id
    = (Database.Persist.TH.lensPTH
         (record_PokerNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_amcip
                                                        value_amciq)
           x_amcir
           -> (Database.Persist.Class.PersistEntity.Entity key_amcip)
                value_amciq {record_PokerNote_id = x_amcir})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Poker where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_PokerKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_PokerKey
migrateAll :: Database.Persist.Sql.Types.Migration
migrateAll
  = do let defs_amcis
             = [(((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Action")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "actions")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_ActionId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Action")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=actions"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "action")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "action")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "notes")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_NoteId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=notes"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Type")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "types")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_TypeId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Type")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=types"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "type")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "type")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "note_to_action")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=note_to_action"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64"))),
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "action_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "action_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_ActionId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Action")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "note_to_type")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=note_to_type"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64"))),
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "type_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "type_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_TypeId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Type")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Poker")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "data")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_PokerId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Poker")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=data"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "date")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "date")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference,
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "amount")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "amount")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Int")))
                             Database.Persist.Types.Base.SqlInt64)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference,
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False]
       (Database.Persist.Sql.Migration.migrate defs_amcis)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Action")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "actions")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_ActionId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Action")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=actions"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "action")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "action")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_amcis)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "notes")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_NoteId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=notes"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_amcis)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Type")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "types")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_TypeId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Type")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=types"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "type")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "type")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_amcis)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "note_to_action")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=note_to_action"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64"))),
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "action_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "action_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_ActionId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Action")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_amcis)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "note_to_type")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=note_to_type"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64"))),
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "type_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "type_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_TypeId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Type")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_amcis)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Poker")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "data")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_PokerId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Poker")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=data"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "date")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "date")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference,
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "amount")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "amount")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Int")))
                       Database.Persist.Types.Base.SqlInt64)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference,
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
-- /Users/scott/Poker/src/Poker.hs:(51,1)-(91,2): Splicing declarations
instance Database.Persist.Class.PersistField.PersistField Record_Action where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_a1jf2
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["action"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_a1jf2))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_a1jf3
          -> let columns_a1jf4 = Data.HashMap.Strict.fromList x_a1jf3
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_a1jf5
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_a1jf5))
                                   columns_a1jf4
                             of
                               GHC.Maybe.Just v_a1jf6 -> v_a1jf6
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["action"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Action where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_a1jf7
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["note"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_a1jf7))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_a1jf8
          -> let columns_a1jf9 = Data.HashMap.Strict.fromList x_a1jf8
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_a1jfa
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_a1jfa))
                                   columns_a1jf9
                             of
                               GHC.Maybe.Just v_a1jfb -> v_a1jfb
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Type where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_a1jfc
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["type"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_a1jfc))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_a1jfd
          -> let columns_a1jfe = Data.HashMap.Strict.fromList x_a1jfd
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_a1jff
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_a1jff))
                                   columns_a1jfe
                             of
                               GHC.Maybe.Just v_a1jfg -> v_a1jfg
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["type"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Type where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note_to_Action where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_a1jfh
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["note_id", "action_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_a1jfh))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_a1jfi
          -> let columns_a1jfj = Data.HashMap.Strict.fromList x_a1jfi
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_a1jfk
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_a1jfk))
                                   columns_a1jfj
                             of
                               GHC.Maybe.Just v_a1jfl -> v_a1jfl
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note_id", "action_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note_to_Action where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note_to_Type where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_a1jfm
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["note_id", "type_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_a1jfm))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_a1jfn
          -> let columns_a1jfo = Data.HashMap.Strict.fromList x_a1jfn
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_a1jfp
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_a1jfp))
                                   columns_a1jfo
                             of
                               GHC.Maybe.Just v_a1jfq -> v_a1jfq
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note_id", "type_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note_to_Type where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Poker where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_a1jfr
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["date", "amount", "note_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_a1jfr))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_a1jfs
          -> let columns_a1jft = Data.HashMap.Strict.fromList x_a1jfs
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_a1jfu
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_a1jfu))
                                   columns_a1jft
                             of
                               GHC.Maybe.Just v_a1jfv -> v_a1jfv
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["date", "amount", "note_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Poker where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
data Record_Action
  = Record_Action {record_ActionAction :: !String}
  deriving (Show, Typeable)
type Record_ActionId =
    Database.Persist.Class.PersistEntity.Key Record_Action
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Action where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Action = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Action
  newtype Database.Persist.Class.PersistEntity.Key Record_Action
    = Record_ActionKey {unRecord_ActionKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Action typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Action =>
      Record_ActionId |
      typ Data.Type.Equality.~ String => Record_ActionAction
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_ActionKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_ActionKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Action")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "actions")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_ActionId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Action")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=actions"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "action")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "action")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Action x_a1jfw)
    = [Database.Persist.Class.PersistField.SomePersistField x_a1jfw]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_a1jfy]
    = Record_Action
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "action"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_a1jfy
  Database.Persist.Class.PersistEntity.fromPersistValues x_a1jfx
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Action: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_a1jfx))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Action _action_a1jfz)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_ActionId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_ActionAction
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "action")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "action")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_ActionId
  Database.Persist.Class.PersistEntity.fieldLens Record_ActionId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_a1jfA)
           key_a1jfB
           -> (Database.Persist.Class.PersistEntity.Entity key_a1jfB)
                value_a1jfA)
  Database.Persist.Class.PersistEntity.fieldLens Record_ActionAction
    = (Database.Persist.TH.lensPTH
         (record_ActionAction
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a1jfC
                                                        value_a1jfD)
           x_a1jfE
           -> (Database.Persist.Class.PersistEntity.Entity key_a1jfC)
                value_a1jfD {record_ActionAction = x_a1jfE})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Action where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_ActionKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_ActionKey
data Record_Note
  = Record_Note {record_NoteNote :: !String}
  deriving (Show, Typeable)
type Record_NoteId =
    Database.Persist.Class.PersistEntity.Key Record_Note
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note
  newtype Database.Persist.Class.PersistEntity.Key Record_Note
    = Record_NoteKey {unRecord_NoteKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_NoteId |
      typ Data.Type.Equality.~ String => Record_NoteNote
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_NoteKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_NoteKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "notes")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_NoteId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=notes"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note x_a1jfF)
    = [Database.Persist.Class.PersistField.SomePersistField x_a1jfF]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_a1jfH]
    = Record_Note
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_a1jfH
  Database.Persist.Class.PersistEntity.fromPersistValues x_a1jfG
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_a1jfG))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note _note_a1jfI)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_NoteId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_NoteNote
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField = Record_NoteId
  Database.Persist.Class.PersistEntity.fieldLens Record_NoteId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_a1jfJ)
           key_a1jfK
           -> (Database.Persist.Class.PersistEntity.Entity key_a1jfK)
                value_a1jfJ)
  Database.Persist.Class.PersistEntity.fieldLens Record_NoteNote
    = (Database.Persist.TH.lensPTH
         (record_NoteNote
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a1jfL
                                                        value_a1jfM)
           x_a1jfN
           -> (Database.Persist.Class.PersistEntity.Entity key_a1jfL)
                value_a1jfM {record_NoteNote = x_a1jfN})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note where
  Database.Persist.Class.PersistStore.toBackendKey = unRecord_NoteKey
  Database.Persist.Class.PersistStore.fromBackendKey = Record_NoteKey
data Record_Type
  = Record_Type {record_TypeType :: !String}
  deriving (Show, Typeable)
type Record_TypeId =
    Database.Persist.Class.PersistEntity.Key Record_Type
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Type where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Type = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Type
  newtype Database.Persist.Class.PersistEntity.Key Record_Type
    = Record_TypeKey {unRecord_TypeKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Type typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Type =>
      Record_TypeId |
      typ Data.Type.Equality.~ String => Record_TypeType
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_TypeKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_TypeKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Type")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "types")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_TypeId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Type")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=types"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "type")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "type")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Type x_a1jfO)
    = [Database.Persist.Class.PersistField.SomePersistField x_a1jfO]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_a1jfQ]
    = Record_Type
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "type"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_a1jfQ
  Database.Persist.Class.PersistEntity.fromPersistValues x_a1jfP
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Type: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_a1jfP))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Type _type_a1jfR)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_TypeId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_TypeType
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "type")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "type")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField = Record_TypeId
  Database.Persist.Class.PersistEntity.fieldLens Record_TypeId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_a1jfS)
           key_a1jfT
           -> (Database.Persist.Class.PersistEntity.Entity key_a1jfT)
                value_a1jfS)
  Database.Persist.Class.PersistEntity.fieldLens Record_TypeType
    = (Database.Persist.TH.lensPTH
         (record_TypeType
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a1jfU
                                                        value_a1jfV)
           x_a1jfW
           -> (Database.Persist.Class.PersistEntity.Entity key_a1jfU)
                value_a1jfV {record_TypeType = x_a1jfW})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Type where
  Database.Persist.Class.PersistStore.toBackendKey = unRecord_TypeKey
  Database.Persist.Class.PersistStore.fromBackendKey = Record_TypeKey
data Record_Note_to_Action
  = Record_Note_to_Action {record_Note_to_ActionNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note),
                           record_Note_to_ActionAction_id :: !(Database.Persist.Class.PersistEntity.Key Record_Action)}
  deriving (Show, Typeable)
type Record_Note_to_ActionId =
    Database.Persist.Class.PersistEntity.Key Record_Note_to_Action
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note_to_Action where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note_to_Action = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note_to_Action
  newtype Database.Persist.Class.PersistEntity.Key Record_Note_to_Action
    = Record_Note_to_ActionKey {unRecord_Note_to_ActionKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note_to_Action typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note_to_Action =>
      Record_Note_to_ActionId |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_Note_to_ActionNote_id |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Action =>
      Record_Note_to_ActionAction_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_Note_to_ActionKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_Note_to_ActionKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "note_to_action")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=note_to_action"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64"))),
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "action_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "action_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_ActionId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Action")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note_to_Action x_a1jfX x_a1jfY)
    = [Database.Persist.Class.PersistField.SomePersistField x_a1jfX,
       Database.Persist.Class.PersistField.SomePersistField x_a1jfY]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_a1jg0, x2_a1jg1]
    = Record_Note_to_Action
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_a1jg0
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "action_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_a1jg1
  Database.Persist.Class.PersistEntity.fromPersistValues x_a1jfZ
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note_to_Action: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_a1jfZ))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note_to_Action _note_id_a1jg2 _action_id_a1jg3)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note_to_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionAction_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "action_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "action_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_Note_to_ActionId
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_a1jg4)
           key_a1jg5
           -> (Database.Persist.Class.PersistEntity.Entity key_a1jg5)
                value_a1jg4)
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionNote_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_ActionNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a1jg6
                                                        value_a1jg7)
           x_a1jg8
           -> (Database.Persist.Class.PersistEntity.Entity key_a1jg6)
                value_a1jg7 {record_Note_to_ActionNote_id = x_a1jg8})
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionAction_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_ActionAction_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a1jg6
                                                        value_a1jg7)
           x_a1jg8
           -> (Database.Persist.Class.PersistEntity.Entity key_a1jg6)
                value_a1jg7 {record_Note_to_ActionAction_id = x_a1jg8})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note_to_Action where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_Note_to_ActionKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_Note_to_ActionKey
data Record_Note_to_Type
  = Record_Note_to_Type {record_Note_to_TypeNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note),
                         record_Note_to_TypeType_id :: !(Database.Persist.Class.PersistEntity.Key Record_Type)}
  deriving (Show, Typeable)
type Record_Note_to_TypeId =
    Database.Persist.Class.PersistEntity.Key Record_Note_to_Type
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note_to_Type where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note_to_Type = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note_to_Type
  newtype Database.Persist.Class.PersistEntity.Key Record_Note_to_Type
    = Record_Note_to_TypeKey {unRecord_Note_to_TypeKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note_to_Type typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note_to_Type =>
      Record_Note_to_TypeId |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_Note_to_TypeNote_id |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Type =>
      Record_Note_to_TypeType_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_Note_to_TypeKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_Note_to_TypeKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "note_to_type")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=note_to_type"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64"))),
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "type_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "type_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_TypeId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Type")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note_to_Type x_a1jg9 x_a1jga)
    = [Database.Persist.Class.PersistField.SomePersistField x_a1jg9,
       Database.Persist.Class.PersistField.SomePersistField x_a1jga]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_a1jgc, x2_a1jgd]
    = Record_Note_to_Type
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_a1jgc
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "type_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_a1jgd
  Database.Persist.Class.PersistEntity.fromPersistValues x_a1jgb
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note_to_Type: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_a1jgb))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note_to_Type _note_id_a1jge _type_id_a1jgf)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note_to_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeType_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "type_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "type_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_Note_to_TypeId
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_a1jgg)
           key_a1jgh
           -> (Database.Persist.Class.PersistEntity.Entity key_a1jgh)
                value_a1jgg)
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeNote_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_TypeNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a1jgi
                                                        value_a1jgj)
           x_a1jgk
           -> (Database.Persist.Class.PersistEntity.Entity key_a1jgi)
                value_a1jgj {record_Note_to_TypeNote_id = x_a1jgk})
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeType_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_TypeType_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a1jgi
                                                        value_a1jgj)
           x_a1jgk
           -> (Database.Persist.Class.PersistEntity.Entity key_a1jgi)
                value_a1jgj {record_Note_to_TypeType_id = x_a1jgk})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note_to_Type where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_Note_to_TypeKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_Note_to_TypeKey
data Record_Poker
  = Record_Poker {record_PokerDate :: !String,
                  record_PokerAmount :: !Int,
                  record_PokerNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note)}
  deriving (Show, Typeable)
type Record_PokerId =
    Database.Persist.Class.PersistEntity.Key Record_Poker
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Poker where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Poker = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Poker
  newtype Database.Persist.Class.PersistEntity.Key Record_Poker
    = Record_PokerKey {unRecord_PokerKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Poker typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Poker =>
      Record_PokerId |
      typ Data.Type.Equality.~ String => Record_PokerDate |
      typ Data.Type.Equality.~ Int => Record_PokerAmount |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_PokerNote_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_PokerKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_PokerKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Poker")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "data")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_PokerId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Poker")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=data"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "date")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "date")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference,
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "amount")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "amount")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Int")))
                   Database.Persist.Types.Base.SqlInt64)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference,
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Poker x_a1jgl x_a1jgm x_a1jgn)
    = [Database.Persist.Class.PersistField.SomePersistField x_a1jgl,
       Database.Persist.Class.PersistField.SomePersistField x_a1jgm,
       Database.Persist.Class.PersistField.SomePersistField x_a1jgn]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_a1jgp, x2_a1jgq, x3_a1jgr]
    = Record_Poker
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "date"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_a1jgp
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "amount"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_a1jgq
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x3_a1jgr
  Database.Persist.Class.PersistEntity.fromPersistValues x_a1jgo
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Poker: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_a1jgo))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Poker _date_a1jgs _amount_a1jgt _note_id_a1jgu)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_PokerId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_PokerId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Poker")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerDate
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "date")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "date")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerAmount
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "amount")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "amount")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Int")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_PokerId
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_a1jgv)
           key_a1jgw
           -> (Database.Persist.Class.PersistEntity.Entity key_a1jgw)
                value_a1jgv)
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerDate
    = (Database.Persist.TH.lensPTH
         (record_PokerDate
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a1jgx
                                                        value_a1jgy)
           x_a1jgz
           -> (Database.Persist.Class.PersistEntity.Entity key_a1jgx)
                value_a1jgy {record_PokerDate = x_a1jgz})
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerAmount
    = (Database.Persist.TH.lensPTH
         (record_PokerAmount
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a1jgx
                                                        value_a1jgy)
           x_a1jgz
           -> (Database.Persist.Class.PersistEntity.Entity key_a1jgx)
                value_a1jgy {record_PokerAmount = x_a1jgz})
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerNote_id
    = (Database.Persist.TH.lensPTH
         (record_PokerNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a1jgx
                                                        value_a1jgy)
           x_a1jgz
           -> (Database.Persist.Class.PersistEntity.Entity key_a1jgx)
                value_a1jgy {record_PokerNote_id = x_a1jgz})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Poker where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_PokerKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_PokerKey
migrateAll :: Database.Persist.Sql.Types.Migration
migrateAll
  = do let defs_a1jgA
             = [(((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Action")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "actions")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_ActionId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Action")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=actions"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "action")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "action")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "notes")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_NoteId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=notes"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Type")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "types")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_TypeId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Type")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=types"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "type")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "type")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "note_to_action")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=note_to_action"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64"))),
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "action_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "action_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_ActionId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Action")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "note_to_type")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=note_to_type"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64"))),
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "type_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "type_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_TypeId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Type")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Poker")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "data")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_PokerId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Poker")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=data"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "date")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "date")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference,
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "amount")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "amount")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Int")))
                             Database.Persist.Types.Base.SqlInt64)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference,
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False]
       (Database.Persist.Sql.Migration.migrate defs_a1jgA)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Action")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "actions")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_ActionId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Action")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=actions"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "action")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "action")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_a1jgA)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "notes")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_NoteId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=notes"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_a1jgA)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Type")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "types")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_TypeId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Type")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=types"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "type")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "type")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_a1jgA)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "note_to_action")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=note_to_action"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64"))),
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "action_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "action_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_ActionId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Action")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_a1jgA)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "note_to_type")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=note_to_type"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64"))),
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "type_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "type_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_TypeId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Type")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_a1jgA)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Poker")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "data")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_PokerId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Poker")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=data"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "date")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "date")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference,
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "amount")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "amount")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Int")))
                       Database.Persist.Types.Base.SqlInt64)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference,
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
-- /Users/scott/Poker/src/Poker.hs:(53,1)-(94,2): Splicing declarations
instance Database.Persist.Class.PersistField.PersistField Record_Action where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_a1r3I
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["action"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_a1r3I))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_a1r3J
          -> let columns_a1r3K = Data.HashMap.Strict.fromList x_a1r3J
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_a1r3L
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_a1r3L))
                                   columns_a1r3K
                             of
                               GHC.Maybe.Just v_a1r3M -> v_a1r3M
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["action"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Action where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_a1r3N
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["note"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_a1r3N))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_a1r3O
          -> let columns_a1r3P = Data.HashMap.Strict.fromList x_a1r3O
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_a1r3Q
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_a1r3Q))
                                   columns_a1r3P
                             of
                               GHC.Maybe.Just v_a1r3R -> v_a1r3R
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Type where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_a1r3S
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["type"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_a1r3S))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_a1r3T
          -> let columns_a1r3U = Data.HashMap.Strict.fromList x_a1r3T
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_a1r3V
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_a1r3V))
                                   columns_a1r3U
                             of
                               GHC.Maybe.Just v_a1r3W -> v_a1r3W
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["type"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Type where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note_to_Action where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_a1r3X
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["note_id", "action_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_a1r3X))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_a1r3Y
          -> let columns_a1r3Z = Data.HashMap.Strict.fromList x_a1r3Y
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_a1r40
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_a1r40))
                                   columns_a1r3Z
                             of
                               GHC.Maybe.Just v_a1r41 -> v_a1r41
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note_id", "action_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note_to_Action where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note_to_Type where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_a1r42
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["note_id", "type_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_a1r42))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_a1r43
          -> let columns_a1r44 = Data.HashMap.Strict.fromList x_a1r43
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_a1r45
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_a1r45))
                                   columns_a1r44
                             of
                               GHC.Maybe.Just v_a1r46 -> v_a1r46
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note_id", "type_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note_to_Type where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Poker where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_a1r47
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["date", "amount", "note_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_a1r47))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_a1r48
          -> let columns_a1r49 = Data.HashMap.Strict.fromList x_a1r48
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_a1r4a
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_a1r4a))
                                   columns_a1r49
                             of
                               GHC.Maybe.Just v_a1r4b -> v_a1r4b
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["date", "amount", "note_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Poker where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
data Record_Action
  = Record_Action {record_ActionAction :: !String}
  deriving (Show, Typeable)
type Record_ActionId =
    Database.Persist.Class.PersistEntity.Key Record_Action
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Action where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Action = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Action
  newtype Database.Persist.Class.PersistEntity.Key Record_Action
    = Record_ActionKey {unRecord_ActionKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Action typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Action =>
      Record_ActionId |
      typ Data.Type.Equality.~ String => Record_ActionAction
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_ActionKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_ActionKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Action")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "actions")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_ActionId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Action")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=actions"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "action")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "action")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Action x_a1r4c)
    = [Database.Persist.Class.PersistField.SomePersistField x_a1r4c]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_a1r4e]
    = Record_Action
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "action"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_a1r4e
  Database.Persist.Class.PersistEntity.fromPersistValues x_a1r4d
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Action: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_a1r4d))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Action _action_a1r4f)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_ActionId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_ActionAction
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "action")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "action")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_ActionId
  Database.Persist.Class.PersistEntity.fieldLens Record_ActionId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_a1r4g)
           key_a1r4h
           -> (Database.Persist.Class.PersistEntity.Entity key_a1r4h)
                value_a1r4g)
  Database.Persist.Class.PersistEntity.fieldLens Record_ActionAction
    = (Database.Persist.TH.lensPTH
         (record_ActionAction
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a1r4i
                                                        value_a1r4j)
           x_a1r4k
           -> (Database.Persist.Class.PersistEntity.Entity key_a1r4i)
                value_a1r4j {record_ActionAction = x_a1r4k})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Action where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_ActionKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_ActionKey
data Record_Note
  = Record_Note {record_NoteNote :: !String}
  deriving (Show, Typeable)
type Record_NoteId =
    Database.Persist.Class.PersistEntity.Key Record_Note
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note
  newtype Database.Persist.Class.PersistEntity.Key Record_Note
    = Record_NoteKey {unRecord_NoteKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_NoteId |
      typ Data.Type.Equality.~ String => Record_NoteNote
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_NoteKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_NoteKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "notes")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_NoteId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=notes"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note x_a1r4l)
    = [Database.Persist.Class.PersistField.SomePersistField x_a1r4l]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_a1r4n]
    = Record_Note
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_a1r4n
  Database.Persist.Class.PersistEntity.fromPersistValues x_a1r4m
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_a1r4m))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note _note_a1r4o)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_NoteId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_NoteNote
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField = Record_NoteId
  Database.Persist.Class.PersistEntity.fieldLens Record_NoteId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_a1r4p)
           key_a1r4q
           -> (Database.Persist.Class.PersistEntity.Entity key_a1r4q)
                value_a1r4p)
  Database.Persist.Class.PersistEntity.fieldLens Record_NoteNote
    = (Database.Persist.TH.lensPTH
         (record_NoteNote
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a1r4r
                                                        value_a1r4s)
           x_a1r4t
           -> (Database.Persist.Class.PersistEntity.Entity key_a1r4r)
                value_a1r4s {record_NoteNote = x_a1r4t})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note where
  Database.Persist.Class.PersistStore.toBackendKey = unRecord_NoteKey
  Database.Persist.Class.PersistStore.fromBackendKey = Record_NoteKey
data Record_Type
  = Record_Type {record_TypeType :: !String}
  deriving (Show, Typeable)
type Record_TypeId =
    Database.Persist.Class.PersistEntity.Key Record_Type
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Type where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Type = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Type
  newtype Database.Persist.Class.PersistEntity.Key Record_Type
    = Record_TypeKey {unRecord_TypeKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Type typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Type =>
      Record_TypeId |
      typ Data.Type.Equality.~ String => Record_TypeType
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_TypeKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_TypeKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Type")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "types")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_TypeId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Type")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=types"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "type")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "type")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Type x_a1r4u)
    = [Database.Persist.Class.PersistField.SomePersistField x_a1r4u]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_a1r4w]
    = Record_Type
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "type"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_a1r4w
  Database.Persist.Class.PersistEntity.fromPersistValues x_a1r4v
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Type: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_a1r4v))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Type _type_a1r4x)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_TypeId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_TypeType
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "type")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "type")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField = Record_TypeId
  Database.Persist.Class.PersistEntity.fieldLens Record_TypeId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_a1r4y)
           key_a1r4z
           -> (Database.Persist.Class.PersistEntity.Entity key_a1r4z)
                value_a1r4y)
  Database.Persist.Class.PersistEntity.fieldLens Record_TypeType
    = (Database.Persist.TH.lensPTH
         (record_TypeType
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a1r4A
                                                        value_a1r4B)
           x_a1r4C
           -> (Database.Persist.Class.PersistEntity.Entity key_a1r4A)
                value_a1r4B {record_TypeType = x_a1r4C})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Type where
  Database.Persist.Class.PersistStore.toBackendKey = unRecord_TypeKey
  Database.Persist.Class.PersistStore.fromBackendKey = Record_TypeKey
data Record_Note_to_Action
  = Record_Note_to_Action {record_Note_to_ActionNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note),
                           record_Note_to_ActionAction_id :: !(Database.Persist.Class.PersistEntity.Key Record_Action)}
  deriving (Show, Typeable)
type Record_Note_to_ActionId =
    Database.Persist.Class.PersistEntity.Key Record_Note_to_Action
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note_to_Action where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note_to_Action = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note_to_Action
  newtype Database.Persist.Class.PersistEntity.Key Record_Note_to_Action
    = Record_Note_to_ActionKey {unRecord_Note_to_ActionKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note_to_Action typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note_to_Action =>
      Record_Note_to_ActionId |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_Note_to_ActionNote_id |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Action =>
      Record_Note_to_ActionAction_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_Note_to_ActionKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_Note_to_ActionKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "note_to_action")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=note_to_action"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64"))),
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "action_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "action_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_ActionId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Action")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note_to_Action x_a1r4D x_a1r4E)
    = [Database.Persist.Class.PersistField.SomePersistField x_a1r4D,
       Database.Persist.Class.PersistField.SomePersistField x_a1r4E]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_a1r4G, x2_a1r4H]
    = Record_Note_to_Action
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_a1r4G
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "action_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_a1r4H
  Database.Persist.Class.PersistEntity.fromPersistValues x_a1r4F
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note_to_Action: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_a1r4F))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note_to_Action _note_id_a1r4I _action_id_a1r4J)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note_to_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionAction_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "action_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "action_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_Note_to_ActionId
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_a1r4K)
           key_a1r4L
           -> (Database.Persist.Class.PersistEntity.Entity key_a1r4L)
                value_a1r4K)
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionNote_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_ActionNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a1r4M
                                                        value_a1r4N)
           x_a1r4O
           -> (Database.Persist.Class.PersistEntity.Entity key_a1r4M)
                value_a1r4N {record_Note_to_ActionNote_id = x_a1r4O})
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionAction_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_ActionAction_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a1r4M
                                                        value_a1r4N)
           x_a1r4O
           -> (Database.Persist.Class.PersistEntity.Entity key_a1r4M)
                value_a1r4N {record_Note_to_ActionAction_id = x_a1r4O})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note_to_Action where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_Note_to_ActionKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_Note_to_ActionKey
data Record_Note_to_Type
  = Record_Note_to_Type {record_Note_to_TypeNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note),
                         record_Note_to_TypeType_id :: !(Database.Persist.Class.PersistEntity.Key Record_Type)}
  deriving (Show, Typeable)
type Record_Note_to_TypeId =
    Database.Persist.Class.PersistEntity.Key Record_Note_to_Type
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note_to_Type where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note_to_Type = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note_to_Type
  newtype Database.Persist.Class.PersistEntity.Key Record_Note_to_Type
    = Record_Note_to_TypeKey {unRecord_Note_to_TypeKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note_to_Type typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note_to_Type =>
      Record_Note_to_TypeId |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_Note_to_TypeNote_id |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Type =>
      Record_Note_to_TypeType_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_Note_to_TypeKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_Note_to_TypeKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "note_to_type")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=note_to_type"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64"))),
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "type_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "type_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_TypeId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Type")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note_to_Type x_a1r4P x_a1r4Q)
    = [Database.Persist.Class.PersistField.SomePersistField x_a1r4P,
       Database.Persist.Class.PersistField.SomePersistField x_a1r4Q]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_a1r4S, x2_a1r4T]
    = Record_Note_to_Type
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_a1r4S
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "type_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_a1r4T
  Database.Persist.Class.PersistEntity.fromPersistValues x_a1r4R
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note_to_Type: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_a1r4R))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note_to_Type _note_id_a1r4U _type_id_a1r4V)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note_to_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeType_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "type_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "type_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_Note_to_TypeId
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_a1r4W)
           key_a1r4X
           -> (Database.Persist.Class.PersistEntity.Entity key_a1r4X)
                value_a1r4W)
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeNote_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_TypeNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a1r4Y
                                                        value_a1r4Z)
           x_a1r50
           -> (Database.Persist.Class.PersistEntity.Entity key_a1r4Y)
                value_a1r4Z {record_Note_to_TypeNote_id = x_a1r50})
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeType_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_TypeType_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a1r4Y
                                                        value_a1r4Z)
           x_a1r50
           -> (Database.Persist.Class.PersistEntity.Entity key_a1r4Y)
                value_a1r4Z {record_Note_to_TypeType_id = x_a1r50})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note_to_Type where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_Note_to_TypeKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_Note_to_TypeKey
data Record_Poker
  = Record_Poker {record_PokerDate :: !String,
                  record_PokerAmount :: !Int,
                  record_PokerNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note)}
  deriving (Show, Typeable)
type Record_PokerId =
    Database.Persist.Class.PersistEntity.Key Record_Poker
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Poker where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Poker = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Poker
  newtype Database.Persist.Class.PersistEntity.Key Record_Poker
    = Record_PokerKey {unRecord_PokerKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Poker typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Poker =>
      Record_PokerId |
      typ Data.Type.Equality.~ String => Record_PokerDate |
      typ Data.Type.Equality.~ Int => Record_PokerAmount |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_PokerNote_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_PokerKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_PokerKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Poker")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "data")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_PokerId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Poker")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=data"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "date")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "date")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference,
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "amount")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "amount")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Int")))
                   Database.Persist.Types.Base.SqlInt64)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference,
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Poker x_a1r51 x_a1r52 x_a1r53)
    = [Database.Persist.Class.PersistField.SomePersistField x_a1r51,
       Database.Persist.Class.PersistField.SomePersistField x_a1r52,
       Database.Persist.Class.PersistField.SomePersistField x_a1r53]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_a1r55, x2_a1r56, x3_a1r57]
    = Record_Poker
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "date"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_a1r55
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "amount"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_a1r56
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x3_a1r57
  Database.Persist.Class.PersistEntity.fromPersistValues x_a1r54
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Poker: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_a1r54))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Poker _date_a1r58 _amount_a1r59 _note_id_a1r5a)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_PokerId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_PokerId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Poker")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerDate
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "date")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "date")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerAmount
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "amount")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "amount")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Int")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_PokerId
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_a1r5b)
           key_a1r5c
           -> (Database.Persist.Class.PersistEntity.Entity key_a1r5c)
                value_a1r5b)
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerDate
    = (Database.Persist.TH.lensPTH
         (record_PokerDate
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a1r5d
                                                        value_a1r5e)
           x_a1r5f
           -> (Database.Persist.Class.PersistEntity.Entity key_a1r5d)
                value_a1r5e {record_PokerDate = x_a1r5f})
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerAmount
    = (Database.Persist.TH.lensPTH
         (record_PokerAmount
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a1r5d
                                                        value_a1r5e)
           x_a1r5f
           -> (Database.Persist.Class.PersistEntity.Entity key_a1r5d)
                value_a1r5e {record_PokerAmount = x_a1r5f})
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerNote_id
    = (Database.Persist.TH.lensPTH
         (record_PokerNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a1r5d
                                                        value_a1r5e)
           x_a1r5f
           -> (Database.Persist.Class.PersistEntity.Entity key_a1r5d)
                value_a1r5e {record_PokerNote_id = x_a1r5f})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Poker where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_PokerKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_PokerKey
migrateAll :: Database.Persist.Sql.Types.Migration
migrateAll
  = do let defs_a1r5g
             = [(((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Action")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "actions")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_ActionId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Action")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=actions"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "action")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "action")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "notes")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_NoteId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=notes"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Type")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "types")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_TypeId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Type")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=types"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "type")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "type")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "note_to_action")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=note_to_action"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64"))),
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "action_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "action_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_ActionId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Action")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "note_to_type")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=note_to_type"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64"))),
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "type_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "type_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_TypeId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Type")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Poker")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "data")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_PokerId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Poker")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=data"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "date")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "date")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference,
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "amount")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "amount")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Int")))
                             Database.Persist.Types.Base.SqlInt64)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference,
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False]
       (Database.Persist.Sql.Migration.migrate defs_a1r5g)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Action")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "actions")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_ActionId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Action")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=actions"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "action")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "action")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_a1r5g)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "notes")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_NoteId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=notes"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_a1r5g)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Type")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "types")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_TypeId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Type")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=types"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "type")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "type")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_a1r5g)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "note_to_action")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=note_to_action"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64"))),
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "action_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "action_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_ActionId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Action")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_a1r5g)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "note_to_type")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=note_to_type"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64"))),
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "type_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "type_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_TypeId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Type")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_a1r5g)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Poker")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "data")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_PokerId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Poker")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=data"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "date")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "date")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference,
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "amount")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "amount")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Int")))
                       Database.Persist.Types.Base.SqlInt64)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference,
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
-- /Users/scott/Poker/src/Poker.hs:(53,1)-(94,2): Splicing declarations
instance Database.Persist.Class.PersistField.PersistField Record_Action where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_aGiHf
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["action"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_aGiHf))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_aGiHg
          -> let columns_aGiHh = Data.HashMap.Strict.fromList x_aGiHg
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_aGiHi
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_aGiHi))
                                   columns_aGiHh
                             of
                               GHC.Maybe.Just v_aGiHj -> v_aGiHj
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["action"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Action where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_aGiHk
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["note"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_aGiHk))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_aGiHl
          -> let columns_aGiHm = Data.HashMap.Strict.fromList x_aGiHl
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_aGiHn
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_aGiHn))
                                   columns_aGiHm
                             of
                               GHC.Maybe.Just v_aGiHo -> v_aGiHo
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Type where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_aGiHp
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["type"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_aGiHp))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_aGiHq
          -> let columns_aGiHr = Data.HashMap.Strict.fromList x_aGiHq
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_aGiHs
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_aGiHs))
                                   columns_aGiHr
                             of
                               GHC.Maybe.Just v_aGiHt -> v_aGiHt
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["type"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Type where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note_to_Action where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_aGiHu
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["note_id", "action_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_aGiHu))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_aGiHv
          -> let columns_aGiHw = Data.HashMap.Strict.fromList x_aGiHv
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_aGiHx
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_aGiHx))
                                   columns_aGiHw
                             of
                               GHC.Maybe.Just v_aGiHy -> v_aGiHy
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note_id", "action_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note_to_Action where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note_to_Type where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_aGiHz
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["note_id", "type_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_aGiHz))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_aGiHA
          -> let columns_aGiHB = Data.HashMap.Strict.fromList x_aGiHA
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_aGiHC
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_aGiHC))
                                   columns_aGiHB
                             of
                               GHC.Maybe.Just v_aGiHD -> v_aGiHD
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note_id", "type_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note_to_Type where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Poker where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_aGiHE
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["date", "amount", "note_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_aGiHE))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_aGiHF
          -> let columns_aGiHG = Data.HashMap.Strict.fromList x_aGiHF
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_aGiHH
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_aGiHH))
                                   columns_aGiHG
                             of
                               GHC.Maybe.Just v_aGiHI -> v_aGiHI
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["date", "amount", "note_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Poker where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
data Record_Action
  = Record_Action {record_ActionAction :: !String}
  deriving (Show, Typeable)
type Record_ActionId =
    Database.Persist.Class.PersistEntity.Key Record_Action
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Action where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Action = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Action
  newtype Database.Persist.Class.PersistEntity.Key Record_Action
    = Record_ActionKey {unRecord_ActionKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Action typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Action =>
      Record_ActionId |
      typ Data.Type.Equality.~ String => Record_ActionAction
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_ActionKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_ActionKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Action")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "actions")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_ActionId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Action")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=actions"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "action")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "action")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Action x_aGiHJ)
    = [Database.Persist.Class.PersistField.SomePersistField x_aGiHJ]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_aGiHL]
    = Record_Action
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "action"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_aGiHL
  Database.Persist.Class.PersistEntity.fromPersistValues x_aGiHK
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Action: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_aGiHK))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Action _action_aGiHM)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_ActionId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_ActionAction
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "action")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "action")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_ActionId
  Database.Persist.Class.PersistEntity.fieldLens Record_ActionId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_aGiHN)
           key_aGiHO
           -> (Database.Persist.Class.PersistEntity.Entity key_aGiHO)
                value_aGiHN)
  Database.Persist.Class.PersistEntity.fieldLens Record_ActionAction
    = (Database.Persist.TH.lensPTH
         (record_ActionAction
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aGiHP
                                                        value_aGiHQ)
           x_aGiHR
           -> (Database.Persist.Class.PersistEntity.Entity key_aGiHP)
                value_aGiHQ {record_ActionAction = x_aGiHR})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Action where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_ActionKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_ActionKey
data Record_Note
  = Record_Note {record_NoteNote :: !String}
  deriving (Show, Typeable)
type Record_NoteId =
    Database.Persist.Class.PersistEntity.Key Record_Note
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note
  newtype Database.Persist.Class.PersistEntity.Key Record_Note
    = Record_NoteKey {unRecord_NoteKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_NoteId |
      typ Data.Type.Equality.~ String => Record_NoteNote
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_NoteKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_NoteKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "notes")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_NoteId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=notes"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note x_aGiHS)
    = [Database.Persist.Class.PersistField.SomePersistField x_aGiHS]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_aGiHU]
    = Record_Note
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_aGiHU
  Database.Persist.Class.PersistEntity.fromPersistValues x_aGiHT
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_aGiHT))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note _note_aGiHV)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_NoteId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_NoteNote
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField = Record_NoteId
  Database.Persist.Class.PersistEntity.fieldLens Record_NoteId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_aGiHW)
           key_aGiHX
           -> (Database.Persist.Class.PersistEntity.Entity key_aGiHX)
                value_aGiHW)
  Database.Persist.Class.PersistEntity.fieldLens Record_NoteNote
    = (Database.Persist.TH.lensPTH
         (record_NoteNote
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aGiHY
                                                        value_aGiHZ)
           x_aGiI0
           -> (Database.Persist.Class.PersistEntity.Entity key_aGiHY)
                value_aGiHZ {record_NoteNote = x_aGiI0})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note where
  Database.Persist.Class.PersistStore.toBackendKey = unRecord_NoteKey
  Database.Persist.Class.PersistStore.fromBackendKey = Record_NoteKey
data Record_Type
  = Record_Type {record_TypeType :: !String}
  deriving (Show, Typeable)
type Record_TypeId =
    Database.Persist.Class.PersistEntity.Key Record_Type
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Type where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Type = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Type
  newtype Database.Persist.Class.PersistEntity.Key Record_Type
    = Record_TypeKey {unRecord_TypeKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Type typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Type =>
      Record_TypeId |
      typ Data.Type.Equality.~ String => Record_TypeType
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_TypeKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_TypeKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Type")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "types")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_TypeId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Type")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=types"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "type")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "type")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Type x_aGiI1)
    = [Database.Persist.Class.PersistField.SomePersistField x_aGiI1]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_aGiI3]
    = Record_Type
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "type"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_aGiI3
  Database.Persist.Class.PersistEntity.fromPersistValues x_aGiI2
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Type: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_aGiI2))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Type _type_aGiI4)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_TypeId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_TypeType
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "type")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "type")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField = Record_TypeId
  Database.Persist.Class.PersistEntity.fieldLens Record_TypeId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_aGiI5)
           key_aGiI6
           -> (Database.Persist.Class.PersistEntity.Entity key_aGiI6)
                value_aGiI5)
  Database.Persist.Class.PersistEntity.fieldLens Record_TypeType
    = (Database.Persist.TH.lensPTH
         (record_TypeType
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aGiI7
                                                        value_aGiI8)
           x_aGiI9
           -> (Database.Persist.Class.PersistEntity.Entity key_aGiI7)
                value_aGiI8 {record_TypeType = x_aGiI9})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Type where
  Database.Persist.Class.PersistStore.toBackendKey = unRecord_TypeKey
  Database.Persist.Class.PersistStore.fromBackendKey = Record_TypeKey
data Record_Note_to_Action
  = Record_Note_to_Action {record_Note_to_ActionNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note),
                           record_Note_to_ActionAction_id :: !(Database.Persist.Class.PersistEntity.Key Record_Action)}
  deriving (Show, Typeable)
type Record_Note_to_ActionId =
    Database.Persist.Class.PersistEntity.Key Record_Note_to_Action
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note_to_Action where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note_to_Action = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note_to_Action
  newtype Database.Persist.Class.PersistEntity.Key Record_Note_to_Action
    = Record_Note_to_ActionKey {unRecord_Note_to_ActionKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note_to_Action typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note_to_Action =>
      Record_Note_to_ActionId |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_Note_to_ActionNote_id |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Action =>
      Record_Note_to_ActionAction_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_Note_to_ActionKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_Note_to_ActionKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "note_to_action")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=note_to_action"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64"))),
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "action_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "action_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_ActionId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Action")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note_to_Action x_aGiIa x_aGiIb)
    = [Database.Persist.Class.PersistField.SomePersistField x_aGiIa,
       Database.Persist.Class.PersistField.SomePersistField x_aGiIb]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_aGiId, x2_aGiIe]
    = Record_Note_to_Action
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_aGiId
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "action_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_aGiIe
  Database.Persist.Class.PersistEntity.fromPersistValues x_aGiIc
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note_to_Action: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_aGiIc))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note_to_Action _note_id_aGiIf _action_id_aGiIg)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note_to_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionAction_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "action_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "action_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_Note_to_ActionId
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_aGiIh)
           key_aGiIi
           -> (Database.Persist.Class.PersistEntity.Entity key_aGiIi)
                value_aGiIh)
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionNote_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_ActionNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aGiIj
                                                        value_aGiIk)
           x_aGiIl
           -> (Database.Persist.Class.PersistEntity.Entity key_aGiIj)
                value_aGiIk {record_Note_to_ActionNote_id = x_aGiIl})
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionAction_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_ActionAction_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aGiIj
                                                        value_aGiIk)
           x_aGiIl
           -> (Database.Persist.Class.PersistEntity.Entity key_aGiIj)
                value_aGiIk {record_Note_to_ActionAction_id = x_aGiIl})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note_to_Action where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_Note_to_ActionKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_Note_to_ActionKey
data Record_Note_to_Type
  = Record_Note_to_Type {record_Note_to_TypeNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note),
                         record_Note_to_TypeType_id :: !(Database.Persist.Class.PersistEntity.Key Record_Type)}
  deriving (Show, Typeable)
type Record_Note_to_TypeId =
    Database.Persist.Class.PersistEntity.Key Record_Note_to_Type
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note_to_Type where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note_to_Type = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note_to_Type
  newtype Database.Persist.Class.PersistEntity.Key Record_Note_to_Type
    = Record_Note_to_TypeKey {unRecord_Note_to_TypeKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note_to_Type typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note_to_Type =>
      Record_Note_to_TypeId |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_Note_to_TypeNote_id |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Type =>
      Record_Note_to_TypeType_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_Note_to_TypeKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_Note_to_TypeKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "note_to_type")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=note_to_type"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64"))),
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "type_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "type_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_TypeId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Type")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note_to_Type x_aGiIm x_aGiIn)
    = [Database.Persist.Class.PersistField.SomePersistField x_aGiIm,
       Database.Persist.Class.PersistField.SomePersistField x_aGiIn]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_aGiIp, x2_aGiIq]
    = Record_Note_to_Type
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_aGiIp
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "type_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_aGiIq
  Database.Persist.Class.PersistEntity.fromPersistValues x_aGiIo
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note_to_Type: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_aGiIo))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note_to_Type _note_id_aGiIr _type_id_aGiIs)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note_to_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeType_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "type_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "type_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_Note_to_TypeId
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_aGiIt)
           key_aGiIu
           -> (Database.Persist.Class.PersistEntity.Entity key_aGiIu)
                value_aGiIt)
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeNote_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_TypeNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aGiIv
                                                        value_aGiIw)
           x_aGiIx
           -> (Database.Persist.Class.PersistEntity.Entity key_aGiIv)
                value_aGiIw {record_Note_to_TypeNote_id = x_aGiIx})
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeType_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_TypeType_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aGiIv
                                                        value_aGiIw)
           x_aGiIx
           -> (Database.Persist.Class.PersistEntity.Entity key_aGiIv)
                value_aGiIw {record_Note_to_TypeType_id = x_aGiIx})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note_to_Type where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_Note_to_TypeKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_Note_to_TypeKey
data Record_Poker
  = Record_Poker {record_PokerDate :: !String,
                  record_PokerAmount :: !Int,
                  record_PokerNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note)}
  deriving (Show, Typeable)
type Record_PokerId =
    Database.Persist.Class.PersistEntity.Key Record_Poker
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Poker where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Poker = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Poker
  newtype Database.Persist.Class.PersistEntity.Key Record_Poker
    = Record_PokerKey {unRecord_PokerKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Poker typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Poker =>
      Record_PokerId |
      typ Data.Type.Equality.~ String => Record_PokerDate |
      typ Data.Type.Equality.~ Int => Record_PokerAmount |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_PokerNote_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_PokerKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_PokerKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Poker")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "data")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_PokerId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Poker")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=data"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "date")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "date")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference,
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "amount")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "amount")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Int")))
                   Database.Persist.Types.Base.SqlInt64)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference,
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Poker x_aGiIy x_aGiIz x_aGiIA)
    = [Database.Persist.Class.PersistField.SomePersistField x_aGiIy,
       Database.Persist.Class.PersistField.SomePersistField x_aGiIz,
       Database.Persist.Class.PersistField.SomePersistField x_aGiIA]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_aGiIC, x2_aGiID, x3_aGiIE]
    = Record_Poker
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "date"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_aGiIC
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "amount"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_aGiID
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x3_aGiIE
  Database.Persist.Class.PersistEntity.fromPersistValues x_aGiIB
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Poker: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_aGiIB))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Poker _date_aGiIF _amount_aGiIG _note_id_aGiIH)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_PokerId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_PokerId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Poker")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerDate
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "date")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "date")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerAmount
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "amount")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "amount")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Int")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_PokerId
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_aGiII)
           key_aGiIJ
           -> (Database.Persist.Class.PersistEntity.Entity key_aGiIJ)
                value_aGiII)
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerDate
    = (Database.Persist.TH.lensPTH
         (record_PokerDate
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aGiIK
                                                        value_aGiIL)
           x_aGiIM
           -> (Database.Persist.Class.PersistEntity.Entity key_aGiIK)
                value_aGiIL {record_PokerDate = x_aGiIM})
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerAmount
    = (Database.Persist.TH.lensPTH
         (record_PokerAmount
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aGiIK
                                                        value_aGiIL)
           x_aGiIM
           -> (Database.Persist.Class.PersistEntity.Entity key_aGiIK)
                value_aGiIL {record_PokerAmount = x_aGiIM})
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerNote_id
    = (Database.Persist.TH.lensPTH
         (record_PokerNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aGiIK
                                                        value_aGiIL)
           x_aGiIM
           -> (Database.Persist.Class.PersistEntity.Entity key_aGiIK)
                value_aGiIL {record_PokerNote_id = x_aGiIM})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Poker where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_PokerKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_PokerKey
migrateAll :: Database.Persist.Sql.Types.Migration
migrateAll
  = do let defs_aGiIN
             = [(((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Action")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "actions")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_ActionId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Action")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=actions"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "action")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "action")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "notes")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_NoteId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=notes"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Type")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "types")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_TypeId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Type")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=types"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "type")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "type")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "note_to_action")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=note_to_action"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64"))),
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "action_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "action_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_ActionId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Action")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "note_to_type")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=note_to_type"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64"))),
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "type_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "type_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_TypeId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Type")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Poker")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "data")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_PokerId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Poker")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=data"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "date")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "date")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference,
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "amount")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "amount")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Int")))
                             Database.Persist.Types.Base.SqlInt64)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference,
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False]
       (Database.Persist.Sql.Migration.migrate defs_aGiIN)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Action")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "actions")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_ActionId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Action")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=actions"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "action")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "action")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_aGiIN)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "notes")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_NoteId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=notes"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_aGiIN)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Type")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "types")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_TypeId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Type")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=types"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "type")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "type")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_aGiIN)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "note_to_action")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=note_to_action"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64"))),
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "action_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "action_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_ActionId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Action")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_aGiIN)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "note_to_type")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=note_to_type"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64"))),
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "type_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "type_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_TypeId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Type")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_aGiIN)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Poker")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "data")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_PokerId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Poker")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=data"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "date")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "date")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference,
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "amount")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "amount")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Int")))
                       Database.Persist.Types.Base.SqlInt64)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference,
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
-- /Users/scott/Poker/src/Poker.hs:(53,1)-(94,2): Splicing declarations
instance Database.Persist.Class.PersistField.PersistField Record_Action where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_aGwrj
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["action"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_aGwrj))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_aGwrk
          -> let columns_aGwrl = Data.HashMap.Strict.fromList x_aGwrk
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_aGwrm
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_aGwrm))
                                   columns_aGwrl
                             of
                               GHC.Maybe.Just v_aGwrn -> v_aGwrn
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["action"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Action where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_aGwro
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["note"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_aGwro))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_aGwrp
          -> let columns_aGwrq = Data.HashMap.Strict.fromList x_aGwrp
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_aGwrr
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_aGwrr))
                                   columns_aGwrq
                             of
                               GHC.Maybe.Just v_aGwrs -> v_aGwrs
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Type where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_aGwrt
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["type"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_aGwrt))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_aGwru
          -> let columns_aGwrv = Data.HashMap.Strict.fromList x_aGwru
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_aGwrw
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_aGwrw))
                                   columns_aGwrv
                             of
                               GHC.Maybe.Just v_aGwrx -> v_aGwrx
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["type"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Type where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note_to_Action where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_aGwry
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["note_id", "action_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_aGwry))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_aGwrz
          -> let columns_aGwrA = Data.HashMap.Strict.fromList x_aGwrz
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_aGwrB
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_aGwrB))
                                   columns_aGwrA
                             of
                               GHC.Maybe.Just v_aGwrC -> v_aGwrC
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note_id", "action_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note_to_Action where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note_to_Type where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_aGwrD
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["note_id", "type_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_aGwrD))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_aGwrE
          -> let columns_aGwrF = Data.HashMap.Strict.fromList x_aGwrE
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_aGwrG
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_aGwrG))
                                   columns_aGwrF
                             of
                               GHC.Maybe.Just v_aGwrH -> v_aGwrH
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note_id", "type_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note_to_Type where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Poker where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_aGwrI
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["date", "amount", "note_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_aGwrI))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_aGwrJ
          -> let columns_aGwrK = Data.HashMap.Strict.fromList x_aGwrJ
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_aGwrL
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_aGwrL))
                                   columns_aGwrK
                             of
                               GHC.Maybe.Just v_aGwrM -> v_aGwrM
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["date", "amount", "note_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Poker where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
data Record_Action
  = Record_Action {record_ActionAction :: !String}
  deriving (Show, Typeable)
type Record_ActionId =
    Database.Persist.Class.PersistEntity.Key Record_Action
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Action where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Action = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Action
  newtype Database.Persist.Class.PersistEntity.Key Record_Action
    = Record_ActionKey {unRecord_ActionKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Action typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Action =>
      Record_ActionId |
      typ Data.Type.Equality.~ String => Record_ActionAction
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_ActionKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_ActionKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Action")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "actions")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_ActionId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Action")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=actions"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "action")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "action")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Action x_aGwrN)
    = [Database.Persist.Class.PersistField.SomePersistField x_aGwrN]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_aGwrP]
    = Record_Action
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "action"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_aGwrP
  Database.Persist.Class.PersistEntity.fromPersistValues x_aGwrO
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Action: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_aGwrO))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Action _action_aGwrQ)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_ActionId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_ActionAction
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "action")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "action")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_ActionId
  Database.Persist.Class.PersistEntity.fieldLens Record_ActionId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_aGwrR)
           key_aGwrS
           -> (Database.Persist.Class.PersistEntity.Entity key_aGwrS)
                value_aGwrR)
  Database.Persist.Class.PersistEntity.fieldLens Record_ActionAction
    = (Database.Persist.TH.lensPTH
         (record_ActionAction
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aGwrT
                                                        value_aGwrU)
           x_aGwrV
           -> (Database.Persist.Class.PersistEntity.Entity key_aGwrT)
                value_aGwrU {record_ActionAction = x_aGwrV})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Action where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_ActionKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_ActionKey
data Record_Note
  = Record_Note {record_NoteNote :: !String}
  deriving (Show, Typeable)
type Record_NoteId =
    Database.Persist.Class.PersistEntity.Key Record_Note
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note
  newtype Database.Persist.Class.PersistEntity.Key Record_Note
    = Record_NoteKey {unRecord_NoteKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_NoteId |
      typ Data.Type.Equality.~ String => Record_NoteNote
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_NoteKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_NoteKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "notes")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_NoteId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=notes"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note x_aGwrW)
    = [Database.Persist.Class.PersistField.SomePersistField x_aGwrW]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_aGwrY]
    = Record_Note
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_aGwrY
  Database.Persist.Class.PersistEntity.fromPersistValues x_aGwrX
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_aGwrX))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note _note_aGwrZ)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_NoteId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_NoteNote
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField = Record_NoteId
  Database.Persist.Class.PersistEntity.fieldLens Record_NoteId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_aGws0)
           key_aGws1
           -> (Database.Persist.Class.PersistEntity.Entity key_aGws1)
                value_aGws0)
  Database.Persist.Class.PersistEntity.fieldLens Record_NoteNote
    = (Database.Persist.TH.lensPTH
         (record_NoteNote
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aGws2
                                                        value_aGws3)
           x_aGws4
           -> (Database.Persist.Class.PersistEntity.Entity key_aGws2)
                value_aGws3 {record_NoteNote = x_aGws4})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note where
  Database.Persist.Class.PersistStore.toBackendKey = unRecord_NoteKey
  Database.Persist.Class.PersistStore.fromBackendKey = Record_NoteKey
data Record_Type
  = Record_Type {record_TypeType :: !String}
  deriving (Show, Typeable)
type Record_TypeId =
    Database.Persist.Class.PersistEntity.Key Record_Type
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Type where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Type = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Type
  newtype Database.Persist.Class.PersistEntity.Key Record_Type
    = Record_TypeKey {unRecord_TypeKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Type typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Type =>
      Record_TypeId |
      typ Data.Type.Equality.~ String => Record_TypeType
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_TypeKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_TypeKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Type")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "types")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_TypeId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Type")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=types"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "type")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "type")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Type x_aGws5)
    = [Database.Persist.Class.PersistField.SomePersistField x_aGws5]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_aGws7]
    = Record_Type
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "type"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_aGws7
  Database.Persist.Class.PersistEntity.fromPersistValues x_aGws6
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Type: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_aGws6))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Type _type_aGws8)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_TypeId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_TypeType
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "type")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "type")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField = Record_TypeId
  Database.Persist.Class.PersistEntity.fieldLens Record_TypeId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_aGws9)
           key_aGwsa
           -> (Database.Persist.Class.PersistEntity.Entity key_aGwsa)
                value_aGws9)
  Database.Persist.Class.PersistEntity.fieldLens Record_TypeType
    = (Database.Persist.TH.lensPTH
         (record_TypeType
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aGwsb
                                                        value_aGwsc)
           x_aGwsd
           -> (Database.Persist.Class.PersistEntity.Entity key_aGwsb)
                value_aGwsc {record_TypeType = x_aGwsd})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Type where
  Database.Persist.Class.PersistStore.toBackendKey = unRecord_TypeKey
  Database.Persist.Class.PersistStore.fromBackendKey = Record_TypeKey
data Record_Note_to_Action
  = Record_Note_to_Action {record_Note_to_ActionNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note),
                           record_Note_to_ActionAction_id :: !(Database.Persist.Class.PersistEntity.Key Record_Action)}
  deriving (Show, Typeable)
type Record_Note_to_ActionId =
    Database.Persist.Class.PersistEntity.Key Record_Note_to_Action
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note_to_Action where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note_to_Action = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note_to_Action
  newtype Database.Persist.Class.PersistEntity.Key Record_Note_to_Action
    = Record_Note_to_ActionKey {unRecord_Note_to_ActionKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note_to_Action typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note_to_Action =>
      Record_Note_to_ActionId |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_Note_to_ActionNote_id |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Action =>
      Record_Note_to_ActionAction_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_Note_to_ActionKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_Note_to_ActionKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "note_to_action")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=note_to_action"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64"))),
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "action_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "action_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_ActionId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Action")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note_to_Action x_aGwse x_aGwsf)
    = [Database.Persist.Class.PersistField.SomePersistField x_aGwse,
       Database.Persist.Class.PersistField.SomePersistField x_aGwsf]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_aGwsh, x2_aGwsi]
    = Record_Note_to_Action
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_aGwsh
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "action_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_aGwsi
  Database.Persist.Class.PersistEntity.fromPersistValues x_aGwsg
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note_to_Action: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_aGwsg))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note_to_Action _note_id_aGwsj _action_id_aGwsk)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note_to_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionAction_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "action_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "action_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_Note_to_ActionId
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_aGwsl)
           key_aGwsm
           -> (Database.Persist.Class.PersistEntity.Entity key_aGwsm)
                value_aGwsl)
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionNote_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_ActionNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aGwsn
                                                        value_aGwso)
           x_aGwsp
           -> (Database.Persist.Class.PersistEntity.Entity key_aGwsn)
                value_aGwso {record_Note_to_ActionNote_id = x_aGwsp})
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionAction_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_ActionAction_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aGwsn
                                                        value_aGwso)
           x_aGwsp
           -> (Database.Persist.Class.PersistEntity.Entity key_aGwsn)
                value_aGwso {record_Note_to_ActionAction_id = x_aGwsp})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note_to_Action where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_Note_to_ActionKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_Note_to_ActionKey
data Record_Note_to_Type
  = Record_Note_to_Type {record_Note_to_TypeNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note),
                         record_Note_to_TypeType_id :: !(Database.Persist.Class.PersistEntity.Key Record_Type)}
  deriving (Show, Typeable)
type Record_Note_to_TypeId =
    Database.Persist.Class.PersistEntity.Key Record_Note_to_Type
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note_to_Type where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note_to_Type = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note_to_Type
  newtype Database.Persist.Class.PersistEntity.Key Record_Note_to_Type
    = Record_Note_to_TypeKey {unRecord_Note_to_TypeKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note_to_Type typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note_to_Type =>
      Record_Note_to_TypeId |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_Note_to_TypeNote_id |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Type =>
      Record_Note_to_TypeType_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_Note_to_TypeKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_Note_to_TypeKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "note_to_type")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=note_to_type"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64"))),
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "type_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "type_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_TypeId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Type")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note_to_Type x_aGwsq x_aGwsr)
    = [Database.Persist.Class.PersistField.SomePersistField x_aGwsq,
       Database.Persist.Class.PersistField.SomePersistField x_aGwsr]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_aGwst, x2_aGwsu]
    = Record_Note_to_Type
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_aGwst
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "type_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_aGwsu
  Database.Persist.Class.PersistEntity.fromPersistValues x_aGwss
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note_to_Type: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_aGwss))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note_to_Type _note_id_aGwsv _type_id_aGwsw)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note_to_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeType_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "type_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "type_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_Note_to_TypeId
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_aGwsx)
           key_aGwsy
           -> (Database.Persist.Class.PersistEntity.Entity key_aGwsy)
                value_aGwsx)
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeNote_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_TypeNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aGwsz
                                                        value_aGwsA)
           x_aGwsB
           -> (Database.Persist.Class.PersistEntity.Entity key_aGwsz)
                value_aGwsA {record_Note_to_TypeNote_id = x_aGwsB})
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeType_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_TypeType_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aGwsz
                                                        value_aGwsA)
           x_aGwsB
           -> (Database.Persist.Class.PersistEntity.Entity key_aGwsz)
                value_aGwsA {record_Note_to_TypeType_id = x_aGwsB})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note_to_Type where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_Note_to_TypeKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_Note_to_TypeKey
data Record_Poker
  = Record_Poker {record_PokerDate :: !String,
                  record_PokerAmount :: !Int,
                  record_PokerNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note)}
  deriving (Show, Typeable)
type Record_PokerId =
    Database.Persist.Class.PersistEntity.Key Record_Poker
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Poker where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Poker = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Poker
  newtype Database.Persist.Class.PersistEntity.Key Record_Poker
    = Record_PokerKey {unRecord_PokerKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Poker typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Poker =>
      Record_PokerId |
      typ Data.Type.Equality.~ String => Record_PokerDate |
      typ Data.Type.Equality.~ Int => Record_PokerAmount |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_PokerNote_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_PokerKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_PokerKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Poker")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "data")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_PokerId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Poker")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=data"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "date")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "date")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference,
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "amount")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "amount")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Int")))
                   Database.Persist.Types.Base.SqlInt64)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference,
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Poker x_aGwsC x_aGwsD x_aGwsE)
    = [Database.Persist.Class.PersistField.SomePersistField x_aGwsC,
       Database.Persist.Class.PersistField.SomePersistField x_aGwsD,
       Database.Persist.Class.PersistField.SomePersistField x_aGwsE]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_aGwsG, x2_aGwsH, x3_aGwsI]
    = Record_Poker
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "date"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_aGwsG
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "amount"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_aGwsH
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x3_aGwsI
  Database.Persist.Class.PersistEntity.fromPersistValues x_aGwsF
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Poker: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_aGwsF))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Poker _date_aGwsJ _amount_aGwsK _note_id_aGwsL)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_PokerId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_PokerId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Poker")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerDate
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "date")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "date")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerAmount
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "amount")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "amount")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Int")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_PokerId
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_aGwsM)
           key_aGwsN
           -> (Database.Persist.Class.PersistEntity.Entity key_aGwsN)
                value_aGwsM)
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerDate
    = (Database.Persist.TH.lensPTH
         (record_PokerDate
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aGwsO
                                                        value_aGwsP)
           x_aGwsQ
           -> (Database.Persist.Class.PersistEntity.Entity key_aGwsO)
                value_aGwsP {record_PokerDate = x_aGwsQ})
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerAmount
    = (Database.Persist.TH.lensPTH
         (record_PokerAmount
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aGwsO
                                                        value_aGwsP)
           x_aGwsQ
           -> (Database.Persist.Class.PersistEntity.Entity key_aGwsO)
                value_aGwsP {record_PokerAmount = x_aGwsQ})
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerNote_id
    = (Database.Persist.TH.lensPTH
         (record_PokerNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aGwsO
                                                        value_aGwsP)
           x_aGwsQ
           -> (Database.Persist.Class.PersistEntity.Entity key_aGwsO)
                value_aGwsP {record_PokerNote_id = x_aGwsQ})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Poker where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_PokerKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_PokerKey
migrateAll :: Database.Persist.Sql.Types.Migration
migrateAll
  = do let defs_aGwsR
             = [(((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Action")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "actions")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_ActionId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Action")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=actions"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "action")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "action")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "notes")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_NoteId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=notes"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Type")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "types")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_TypeId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Type")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=types"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "type")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "type")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "note_to_action")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=note_to_action"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64"))),
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "action_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "action_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_ActionId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Action")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "note_to_type")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=note_to_type"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64"))),
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "type_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "type_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_TypeId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Type")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Poker")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "data")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_PokerId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Poker")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=data"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "date")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "date")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference,
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "amount")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "amount")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Int")))
                             Database.Persist.Types.Base.SqlInt64)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference,
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False]
       (Database.Persist.Sql.Migration.migrate defs_aGwsR)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Action")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "actions")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_ActionId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Action")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=actions"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "action")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "action")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_aGwsR)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "notes")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_NoteId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=notes"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_aGwsR)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Type")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "types")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_TypeId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Type")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=types"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "type")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "type")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_aGwsR)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "note_to_action")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=note_to_action"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64"))),
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "action_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "action_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_ActionId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Action")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_aGwsR)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "note_to_type")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=note_to_type"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64"))),
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "type_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "type_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_TypeId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Type")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_aGwsR)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Poker")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "data")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_PokerId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Poker")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=data"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "date")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "date")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference,
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "amount")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "amount")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Int")))
                       Database.Persist.Types.Base.SqlInt64)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference,
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
-- /Users/scott/Poker/src/Poker.hs:(56,1)-(97,2): Splicing declarations
instance Database.Persist.Class.PersistField.PersistField Record_Action where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_a1WVn
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["action"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_a1WVn))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_a1WVo
          -> let columns_a1WVp = Data.HashMap.Strict.fromList x_a1WVo
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_a1WVq
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_a1WVq))
                                   columns_a1WVp
                             of
                               GHC.Maybe.Just v_a1WVr -> v_a1WVr
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["action"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Action where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_a1WVs
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["note"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_a1WVs))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_a1WVt
          -> let columns_a1WVu = Data.HashMap.Strict.fromList x_a1WVt
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_a1WVv
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_a1WVv))
                                   columns_a1WVu
                             of
                               GHC.Maybe.Just v_a1WVw -> v_a1WVw
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Type where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_a1WVx
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["type"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_a1WVx))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_a1WVy
          -> let columns_a1WVz = Data.HashMap.Strict.fromList x_a1WVy
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_a1WVA
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_a1WVA))
                                   columns_a1WVz
                             of
                               GHC.Maybe.Just v_a1WVB -> v_a1WVB
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["type"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Type where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note_to_Action where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_a1WVC
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["note_id", "action_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_a1WVC))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_a1WVD
          -> let columns_a1WVE = Data.HashMap.Strict.fromList x_a1WVD
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_a1WVF
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_a1WVF))
                                   columns_a1WVE
                             of
                               GHC.Maybe.Just v_a1WVG -> v_a1WVG
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note_id", "action_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note_to_Action where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note_to_Type where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_a1WVH
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["note_id", "type_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_a1WVH))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_a1WVI
          -> let columns_a1WVJ = Data.HashMap.Strict.fromList x_a1WVI
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_a1WVK
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_a1WVK))
                                   columns_a1WVJ
                             of
                               GHC.Maybe.Just v_a1WVL -> v_a1WVL
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note_id", "type_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note_to_Type where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Poker where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_a1WVM
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["date", "amount", "note_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_a1WVM))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_a1WVN
          -> let columns_a1WVO = Data.HashMap.Strict.fromList x_a1WVN
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_a1WVP
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_a1WVP))
                                   columns_a1WVO
                             of
                               GHC.Maybe.Just v_a1WVQ -> v_a1WVQ
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["date", "amount", "note_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Poker where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
data Record_Action
  = Record_Action {record_ActionAction :: !String}
  deriving (Show, Typeable)
type Record_ActionId =
    Database.Persist.Class.PersistEntity.Key Record_Action
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Action where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Action = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Action
  newtype Database.Persist.Class.PersistEntity.Key Record_Action
    = Record_ActionKey {unRecord_ActionKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Action typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Action =>
      Record_ActionId |
      typ Data.Type.Equality.~ String => Record_ActionAction
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_ActionKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_ActionKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Action")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "actions")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_ActionId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Action")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=actions"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "action")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "action")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Action x_a1WVR)
    = [Database.Persist.Class.PersistField.SomePersistField x_a1WVR]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_a1WVT]
    = Record_Action
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "action"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_a1WVT
  Database.Persist.Class.PersistEntity.fromPersistValues x_a1WVS
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Action: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_a1WVS))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Action _action_a1WVU)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_ActionId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_ActionAction
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "action")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "action")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_ActionId
  Database.Persist.Class.PersistEntity.fieldLens Record_ActionId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_a1WVV)
           key_a1WVW
           -> (Database.Persist.Class.PersistEntity.Entity key_a1WVW)
                value_a1WVV)
  Database.Persist.Class.PersistEntity.fieldLens Record_ActionAction
    = (Database.Persist.TH.lensPTH
         (record_ActionAction
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a1WVX
                                                        value_a1WVY)
           x_a1WVZ
           -> (Database.Persist.Class.PersistEntity.Entity key_a1WVX)
                value_a1WVY {record_ActionAction = x_a1WVZ})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Action where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_ActionKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_ActionKey
data Record_Note
  = Record_Note {record_NoteNote :: !String}
  deriving (Show, Typeable)
type Record_NoteId =
    Database.Persist.Class.PersistEntity.Key Record_Note
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note
  newtype Database.Persist.Class.PersistEntity.Key Record_Note
    = Record_NoteKey {unRecord_NoteKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_NoteId |
      typ Data.Type.Equality.~ String => Record_NoteNote
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_NoteKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_NoteKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "notes")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_NoteId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=notes"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note x_a1WW0)
    = [Database.Persist.Class.PersistField.SomePersistField x_a1WW0]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_a1WW2]
    = Record_Note
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_a1WW2
  Database.Persist.Class.PersistEntity.fromPersistValues x_a1WW1
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_a1WW1))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note _note_a1WW3)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_NoteId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_NoteNote
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField = Record_NoteId
  Database.Persist.Class.PersistEntity.fieldLens Record_NoteId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_a1WW4)
           key_a1WW5
           -> (Database.Persist.Class.PersistEntity.Entity key_a1WW5)
                value_a1WW4)
  Database.Persist.Class.PersistEntity.fieldLens Record_NoteNote
    = (Database.Persist.TH.lensPTH
         (record_NoteNote
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a1WW6
                                                        value_a1WW7)
           x_a1WW8
           -> (Database.Persist.Class.PersistEntity.Entity key_a1WW6)
                value_a1WW7 {record_NoteNote = x_a1WW8})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note where
  Database.Persist.Class.PersistStore.toBackendKey = unRecord_NoteKey
  Database.Persist.Class.PersistStore.fromBackendKey = Record_NoteKey
data Record_Type
  = Record_Type {record_TypeType :: !String}
  deriving (Show, Typeable)
type Record_TypeId =
    Database.Persist.Class.PersistEntity.Key Record_Type
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Type where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Type = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Type
  newtype Database.Persist.Class.PersistEntity.Key Record_Type
    = Record_TypeKey {unRecord_TypeKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Type typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Type =>
      Record_TypeId |
      typ Data.Type.Equality.~ String => Record_TypeType
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_TypeKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_TypeKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Type")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "types")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_TypeId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Type")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=types"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "type")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "type")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Type x_a1WW9)
    = [Database.Persist.Class.PersistField.SomePersistField x_a1WW9]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_a1WWb]
    = Record_Type
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "type"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_a1WWb
  Database.Persist.Class.PersistEntity.fromPersistValues x_a1WWa
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Type: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_a1WWa))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Type _type_a1WWc)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_TypeId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_TypeType
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "type")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "type")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField = Record_TypeId
  Database.Persist.Class.PersistEntity.fieldLens Record_TypeId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_a1WWd)
           key_a1WWe
           -> (Database.Persist.Class.PersistEntity.Entity key_a1WWe)
                value_a1WWd)
  Database.Persist.Class.PersistEntity.fieldLens Record_TypeType
    = (Database.Persist.TH.lensPTH
         (record_TypeType
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a1WWf
                                                        value_a1WWg)
           x_a1WWh
           -> (Database.Persist.Class.PersistEntity.Entity key_a1WWf)
                value_a1WWg {record_TypeType = x_a1WWh})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Type where
  Database.Persist.Class.PersistStore.toBackendKey = unRecord_TypeKey
  Database.Persist.Class.PersistStore.fromBackendKey = Record_TypeKey
data Record_Note_to_Action
  = Record_Note_to_Action {record_Note_to_ActionNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note),
                           record_Note_to_ActionAction_id :: !(Database.Persist.Class.PersistEntity.Key Record_Action)}
  deriving (Show, Typeable)
type Record_Note_to_ActionId =
    Database.Persist.Class.PersistEntity.Key Record_Note_to_Action
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note_to_Action where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note_to_Action = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note_to_Action
  newtype Database.Persist.Class.PersistEntity.Key Record_Note_to_Action
    = Record_Note_to_ActionKey {unRecord_Note_to_ActionKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note_to_Action typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note_to_Action =>
      Record_Note_to_ActionId |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_Note_to_ActionNote_id |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Action =>
      Record_Note_to_ActionAction_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_Note_to_ActionKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_Note_to_ActionKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "note_to_action")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=note_to_action"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64"))),
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "action_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "action_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_ActionId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Action")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note_to_Action x_a1WWi x_a1WWj)
    = [Database.Persist.Class.PersistField.SomePersistField x_a1WWi,
       Database.Persist.Class.PersistField.SomePersistField x_a1WWj]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_a1WWl, x2_a1WWm]
    = Record_Note_to_Action
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_a1WWl
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "action_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_a1WWm
  Database.Persist.Class.PersistEntity.fromPersistValues x_a1WWk
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note_to_Action: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_a1WWk))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note_to_Action _note_id_a1WWn _action_id_a1WWo)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note_to_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionAction_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "action_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "action_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_Note_to_ActionId
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_a1WWp)
           key_a1WWq
           -> (Database.Persist.Class.PersistEntity.Entity key_a1WWq)
                value_a1WWp)
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionNote_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_ActionNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a1WWr
                                                        value_a1WWs)
           x_a1WWt
           -> (Database.Persist.Class.PersistEntity.Entity key_a1WWr)
                value_a1WWs {record_Note_to_ActionNote_id = x_a1WWt})
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionAction_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_ActionAction_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a1WWr
                                                        value_a1WWs)
           x_a1WWt
           -> (Database.Persist.Class.PersistEntity.Entity key_a1WWr)
                value_a1WWs {record_Note_to_ActionAction_id = x_a1WWt})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note_to_Action where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_Note_to_ActionKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_Note_to_ActionKey
data Record_Note_to_Type
  = Record_Note_to_Type {record_Note_to_TypeNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note),
                         record_Note_to_TypeType_id :: !(Database.Persist.Class.PersistEntity.Key Record_Type)}
  deriving (Show, Typeable)
type Record_Note_to_TypeId =
    Database.Persist.Class.PersistEntity.Key Record_Note_to_Type
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note_to_Type where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note_to_Type = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note_to_Type
  newtype Database.Persist.Class.PersistEntity.Key Record_Note_to_Type
    = Record_Note_to_TypeKey {unRecord_Note_to_TypeKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note_to_Type typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note_to_Type =>
      Record_Note_to_TypeId |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_Note_to_TypeNote_id |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Type =>
      Record_Note_to_TypeType_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_Note_to_TypeKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_Note_to_TypeKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "note_to_type")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=note_to_type"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64"))),
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "type_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "type_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_TypeId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Type")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note_to_Type x_a1WWu x_a1WWv)
    = [Database.Persist.Class.PersistField.SomePersistField x_a1WWu,
       Database.Persist.Class.PersistField.SomePersistField x_a1WWv]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_a1WWx, x2_a1WWy]
    = Record_Note_to_Type
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_a1WWx
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "type_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_a1WWy
  Database.Persist.Class.PersistEntity.fromPersistValues x_a1WWw
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note_to_Type: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_a1WWw))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note_to_Type _note_id_a1WWz _type_id_a1WWA)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note_to_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeType_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "type_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "type_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_Note_to_TypeId
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_a1WWB)
           key_a1WWC
           -> (Database.Persist.Class.PersistEntity.Entity key_a1WWC)
                value_a1WWB)
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeNote_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_TypeNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a1WWD
                                                        value_a1WWE)
           x_a1WWF
           -> (Database.Persist.Class.PersistEntity.Entity key_a1WWD)
                value_a1WWE {record_Note_to_TypeNote_id = x_a1WWF})
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeType_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_TypeType_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a1WWD
                                                        value_a1WWE)
           x_a1WWF
           -> (Database.Persist.Class.PersistEntity.Entity key_a1WWD)
                value_a1WWE {record_Note_to_TypeType_id = x_a1WWF})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note_to_Type where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_Note_to_TypeKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_Note_to_TypeKey
data Record_Poker
  = Record_Poker {record_PokerDate :: !String,
                  record_PokerAmount :: !Int,
                  record_PokerNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note)}
  deriving (Show, Typeable)
type Record_PokerId =
    Database.Persist.Class.PersistEntity.Key Record_Poker
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Poker where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Poker = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Poker
  newtype Database.Persist.Class.PersistEntity.Key Record_Poker
    = Record_PokerKey {unRecord_PokerKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Poker typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Poker =>
      Record_PokerId |
      typ Data.Type.Equality.~ String => Record_PokerDate |
      typ Data.Type.Equality.~ Int => Record_PokerAmount |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_PokerNote_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_PokerKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_PokerKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Poker")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "data")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_PokerId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Poker")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=data"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "date")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "date")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference,
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "amount")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "amount")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Int")))
                   Database.Persist.Types.Base.SqlInt64)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference,
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Poker x_a1WWG x_a1WWH x_a1WWI)
    = [Database.Persist.Class.PersistField.SomePersistField x_a1WWG,
       Database.Persist.Class.PersistField.SomePersistField x_a1WWH,
       Database.Persist.Class.PersistField.SomePersistField x_a1WWI]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_a1WWK, x2_a1WWL, x3_a1WWM]
    = Record_Poker
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "date"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_a1WWK
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "amount"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_a1WWL
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x3_a1WWM
  Database.Persist.Class.PersistEntity.fromPersistValues x_a1WWJ
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Poker: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_a1WWJ))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Poker _date_a1WWN _amount_a1WWO _note_id_a1WWP)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_PokerId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_PokerId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Poker")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerDate
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "date")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "date")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerAmount
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "amount")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "amount")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Int")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_PokerId
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_a1WWQ)
           key_a1WWR
           -> (Database.Persist.Class.PersistEntity.Entity key_a1WWR)
                value_a1WWQ)
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerDate
    = (Database.Persist.TH.lensPTH
         (record_PokerDate
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a1WWS
                                                        value_a1WWT)
           x_a1WWU
           -> (Database.Persist.Class.PersistEntity.Entity key_a1WWS)
                value_a1WWT {record_PokerDate = x_a1WWU})
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerAmount
    = (Database.Persist.TH.lensPTH
         (record_PokerAmount
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a1WWS
                                                        value_a1WWT)
           x_a1WWU
           -> (Database.Persist.Class.PersistEntity.Entity key_a1WWS)
                value_a1WWT {record_PokerAmount = x_a1WWU})
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerNote_id
    = (Database.Persist.TH.lensPTH
         (record_PokerNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a1WWS
                                                        value_a1WWT)
           x_a1WWU
           -> (Database.Persist.Class.PersistEntity.Entity key_a1WWS)
                value_a1WWT {record_PokerNote_id = x_a1WWU})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Poker where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_PokerKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_PokerKey
migrateAll :: Database.Persist.Sql.Types.Migration
migrateAll
  = do let defs_a1WWV
             = [(((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Action")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "actions")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_ActionId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Action")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=actions"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "action")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "action")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "notes")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_NoteId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=notes"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Type")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "types")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_TypeId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Type")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=types"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "type")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "type")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "note_to_action")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=note_to_action"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64"))),
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "action_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "action_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_ActionId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Action")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "note_to_type")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=note_to_type"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64"))),
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "type_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "type_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_TypeId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Type")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Poker")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "data")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_PokerId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Poker")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=data"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "date")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "date")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference,
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "amount")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "amount")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Int")))
                             Database.Persist.Types.Base.SqlInt64)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference,
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False]
       (Database.Persist.Sql.Migration.migrate defs_a1WWV)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Action")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "actions")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_ActionId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Action")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=actions"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "action")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "action")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_a1WWV)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "notes")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_NoteId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=notes"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_a1WWV)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Type")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "types")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_TypeId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Type")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=types"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "type")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "type")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_a1WWV)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "note_to_action")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=note_to_action"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64"))),
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "action_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "action_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_ActionId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Action")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_a1WWV)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "note_to_type")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=note_to_type"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64"))),
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "type_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "type_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_TypeId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Type")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_a1WWV)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Poker")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "data")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_PokerId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Poker")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=data"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "date")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "date")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference,
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "amount")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "amount")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Int")))
                       Database.Persist.Types.Base.SqlInt64)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference,
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
-- /Users/scott/Poker/src/Poker.hs:(56,1)-(97,2): Splicing declarations
instance Database.Persist.Class.PersistField.PersistField Record_Action where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_a22YP
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["action"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_a22YP))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_a22YQ
          -> let columns_a22YR = Data.HashMap.Strict.fromList x_a22YQ
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_a22YS
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_a22YS))
                                   columns_a22YR
                             of
                               GHC.Maybe.Just v_a22YT -> v_a22YT
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["action"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Action where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_a22YU
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["note"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_a22YU))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_a22YV
          -> let columns_a22YW = Data.HashMap.Strict.fromList x_a22YV
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_a22YX
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_a22YX))
                                   columns_a22YW
                             of
                               GHC.Maybe.Just v_a22YY -> v_a22YY
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Type where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_a22YZ
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["type"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_a22YZ))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_a22Z0
          -> let columns_a22Z1 = Data.HashMap.Strict.fromList x_a22Z0
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_a22Z2
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_a22Z2))
                                   columns_a22Z1
                             of
                               GHC.Maybe.Just v_a22Z3 -> v_a22Z3
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["type"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Type where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note_to_Action where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_a22Z4
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["note_id", "action_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_a22Z4))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_a22Z5
          -> let columns_a22Z6 = Data.HashMap.Strict.fromList x_a22Z5
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_a22Z7
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_a22Z7))
                                   columns_a22Z6
                             of
                               GHC.Maybe.Just v_a22Z8 -> v_a22Z8
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note_id", "action_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note_to_Action where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note_to_Type where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_a22Z9
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["note_id", "type_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_a22Z9))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_a22Za
          -> let columns_a22Zb = Data.HashMap.Strict.fromList x_a22Za
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_a22Zc
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_a22Zc))
                                   columns_a22Zb
                             of
                               GHC.Maybe.Just v_a22Zd -> v_a22Zd
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note_id", "type_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note_to_Type where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Poker where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_a22Ze
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["date", "amount", "note_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_a22Ze))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_a22Zf
          -> let columns_a22Zg = Data.HashMap.Strict.fromList x_a22Zf
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_a22Zh
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_a22Zh))
                                   columns_a22Zg
                             of
                               GHC.Maybe.Just v_a22Zi -> v_a22Zi
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["date", "amount", "note_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Poker where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
data Record_Action
  = Record_Action {record_ActionAction :: !String}
  deriving (Show, Typeable)
type Record_ActionId =
    Database.Persist.Class.PersistEntity.Key Record_Action
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Action where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Action = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Action
  newtype Database.Persist.Class.PersistEntity.Key Record_Action
    = Record_ActionKey {unRecord_ActionKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Action typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Action =>
      Record_ActionId |
      typ Data.Type.Equality.~ String => Record_ActionAction
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_ActionKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_ActionKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Action")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "actions")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_ActionId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Action")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=actions"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "action")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "action")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Action x_a22Zj)
    = [Database.Persist.Class.PersistField.SomePersistField x_a22Zj]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_a22Zl]
    = Record_Action
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "action"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_a22Zl
  Database.Persist.Class.PersistEntity.fromPersistValues x_a22Zk
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Action: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_a22Zk))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Action _action_a22Zm)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_ActionId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_ActionAction
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "action")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "action")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_ActionId
  Database.Persist.Class.PersistEntity.fieldLens Record_ActionId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_a22Zn)
           key_a22Zo
           -> (Database.Persist.Class.PersistEntity.Entity key_a22Zo)
                value_a22Zn)
  Database.Persist.Class.PersistEntity.fieldLens Record_ActionAction
    = (Database.Persist.TH.lensPTH
         (record_ActionAction
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a22Zp
                                                        value_a22Zq)
           x_a22Zr
           -> (Database.Persist.Class.PersistEntity.Entity key_a22Zp)
                value_a22Zq {record_ActionAction = x_a22Zr})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Action where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_ActionKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_ActionKey
data Record_Note
  = Record_Note {record_NoteNote :: !String}
  deriving (Show, Typeable)
type Record_NoteId =
    Database.Persist.Class.PersistEntity.Key Record_Note
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note
  newtype Database.Persist.Class.PersistEntity.Key Record_Note
    = Record_NoteKey {unRecord_NoteKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_NoteId |
      typ Data.Type.Equality.~ String => Record_NoteNote
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_NoteKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_NoteKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "notes")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_NoteId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=notes"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note x_a22Zs)
    = [Database.Persist.Class.PersistField.SomePersistField x_a22Zs]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_a22Zu]
    = Record_Note
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_a22Zu
  Database.Persist.Class.PersistEntity.fromPersistValues x_a22Zt
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_a22Zt))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note _note_a22Zv)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_NoteId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_NoteNote
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField = Record_NoteId
  Database.Persist.Class.PersistEntity.fieldLens Record_NoteId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_a22Zw)
           key_a22Zx
           -> (Database.Persist.Class.PersistEntity.Entity key_a22Zx)
                value_a22Zw)
  Database.Persist.Class.PersistEntity.fieldLens Record_NoteNote
    = (Database.Persist.TH.lensPTH
         (record_NoteNote
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a22Zy
                                                        value_a22Zz)
           x_a22ZA
           -> (Database.Persist.Class.PersistEntity.Entity key_a22Zy)
                value_a22Zz {record_NoteNote = x_a22ZA})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note where
  Database.Persist.Class.PersistStore.toBackendKey = unRecord_NoteKey
  Database.Persist.Class.PersistStore.fromBackendKey = Record_NoteKey
data Record_Type
  = Record_Type {record_TypeType :: !String}
  deriving (Show, Typeable)
type Record_TypeId =
    Database.Persist.Class.PersistEntity.Key Record_Type
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Type where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Type = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Type
  newtype Database.Persist.Class.PersistEntity.Key Record_Type
    = Record_TypeKey {unRecord_TypeKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Type typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Type =>
      Record_TypeId |
      typ Data.Type.Equality.~ String => Record_TypeType
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_TypeKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_TypeKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Type")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "types")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_TypeId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Type")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=types"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "type")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "type")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Type x_a22ZB)
    = [Database.Persist.Class.PersistField.SomePersistField x_a22ZB]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_a22ZD]
    = Record_Type
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "type"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_a22ZD
  Database.Persist.Class.PersistEntity.fromPersistValues x_a22ZC
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Type: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_a22ZC))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Type _type_a22ZE)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_TypeId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_TypeType
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "type")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "type")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField = Record_TypeId
  Database.Persist.Class.PersistEntity.fieldLens Record_TypeId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_a22ZF)
           key_a22ZG
           -> (Database.Persist.Class.PersistEntity.Entity key_a22ZG)
                value_a22ZF)
  Database.Persist.Class.PersistEntity.fieldLens Record_TypeType
    = (Database.Persist.TH.lensPTH
         (record_TypeType
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a22ZH
                                                        value_a22ZI)
           x_a22ZJ
           -> (Database.Persist.Class.PersistEntity.Entity key_a22ZH)
                value_a22ZI {record_TypeType = x_a22ZJ})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Type where
  Database.Persist.Class.PersistStore.toBackendKey = unRecord_TypeKey
  Database.Persist.Class.PersistStore.fromBackendKey = Record_TypeKey
data Record_Note_to_Action
  = Record_Note_to_Action {record_Note_to_ActionNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note),
                           record_Note_to_ActionAction_id :: !(Database.Persist.Class.PersistEntity.Key Record_Action)}
  deriving (Show, Typeable)
type Record_Note_to_ActionId =
    Database.Persist.Class.PersistEntity.Key Record_Note_to_Action
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note_to_Action where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note_to_Action = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note_to_Action
  newtype Database.Persist.Class.PersistEntity.Key Record_Note_to_Action
    = Record_Note_to_ActionKey {unRecord_Note_to_ActionKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note_to_Action typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note_to_Action =>
      Record_Note_to_ActionId |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_Note_to_ActionNote_id |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Action =>
      Record_Note_to_ActionAction_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_Note_to_ActionKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_Note_to_ActionKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "note_to_action")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=note_to_action"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64"))),
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "action_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "action_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_ActionId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Action")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note_to_Action x_a22ZK x_a22ZL)
    = [Database.Persist.Class.PersistField.SomePersistField x_a22ZK,
       Database.Persist.Class.PersistField.SomePersistField x_a22ZL]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_a22ZN, x2_a22ZO]
    = Record_Note_to_Action
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_a22ZN
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "action_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_a22ZO
  Database.Persist.Class.PersistEntity.fromPersistValues x_a22ZM
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note_to_Action: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_a22ZM))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note_to_Action _note_id_a22ZP _action_id_a22ZQ)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note_to_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionAction_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "action_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "action_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_Note_to_ActionId
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_a22ZR)
           key_a22ZS
           -> (Database.Persist.Class.PersistEntity.Entity key_a22ZS)
                value_a22ZR)
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionNote_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_ActionNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a22ZT
                                                        value_a22ZU)
           x_a22ZV
           -> (Database.Persist.Class.PersistEntity.Entity key_a22ZT)
                value_a22ZU {record_Note_to_ActionNote_id = x_a22ZV})
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionAction_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_ActionAction_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a22ZT
                                                        value_a22ZU)
           x_a22ZV
           -> (Database.Persist.Class.PersistEntity.Entity key_a22ZT)
                value_a22ZU {record_Note_to_ActionAction_id = x_a22ZV})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note_to_Action where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_Note_to_ActionKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_Note_to_ActionKey
data Record_Note_to_Type
  = Record_Note_to_Type {record_Note_to_TypeNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note),
                         record_Note_to_TypeType_id :: !(Database.Persist.Class.PersistEntity.Key Record_Type)}
  deriving (Show, Typeable)
type Record_Note_to_TypeId =
    Database.Persist.Class.PersistEntity.Key Record_Note_to_Type
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note_to_Type where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note_to_Type = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note_to_Type
  newtype Database.Persist.Class.PersistEntity.Key Record_Note_to_Type
    = Record_Note_to_TypeKey {unRecord_Note_to_TypeKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note_to_Type typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note_to_Type =>
      Record_Note_to_TypeId |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_Note_to_TypeNote_id |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Type =>
      Record_Note_to_TypeType_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_Note_to_TypeKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_Note_to_TypeKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "note_to_type")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=note_to_type"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64"))),
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "type_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "type_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_TypeId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Type")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note_to_Type x_a22ZW x_a22ZX)
    = [Database.Persist.Class.PersistField.SomePersistField x_a22ZW,
       Database.Persist.Class.PersistField.SomePersistField x_a22ZX]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_a22ZZ, x2_a2300]
    = Record_Note_to_Type
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_a22ZZ
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "type_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_a2300
  Database.Persist.Class.PersistEntity.fromPersistValues x_a22ZY
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note_to_Type: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_a22ZY))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note_to_Type _note_id_a2301 _type_id_a2302)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note_to_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeType_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "type_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "type_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_Note_to_TypeId
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_a2303)
           key_a2304
           -> (Database.Persist.Class.PersistEntity.Entity key_a2304)
                value_a2303)
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeNote_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_TypeNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a2305
                                                        value_a2306)
           x_a2307
           -> (Database.Persist.Class.PersistEntity.Entity key_a2305)
                value_a2306 {record_Note_to_TypeNote_id = x_a2307})
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeType_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_TypeType_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a2305
                                                        value_a2306)
           x_a2307
           -> (Database.Persist.Class.PersistEntity.Entity key_a2305)
                value_a2306 {record_Note_to_TypeType_id = x_a2307})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note_to_Type where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_Note_to_TypeKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_Note_to_TypeKey
data Record_Poker
  = Record_Poker {record_PokerDate :: !String,
                  record_PokerAmount :: !Int,
                  record_PokerNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note)}
  deriving (Show, Typeable)
type Record_PokerId =
    Database.Persist.Class.PersistEntity.Key Record_Poker
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Poker where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Poker = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Poker
  newtype Database.Persist.Class.PersistEntity.Key Record_Poker
    = Record_PokerKey {unRecord_PokerKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Poker typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Poker =>
      Record_PokerId |
      typ Data.Type.Equality.~ String => Record_PokerDate |
      typ Data.Type.Equality.~ Int => Record_PokerAmount |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_PokerNote_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_PokerKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_PokerKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Poker")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "data")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_PokerId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Poker")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=data"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "date")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "date")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference,
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "amount")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "amount")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Int")))
                   Database.Persist.Types.Base.SqlInt64)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference,
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Poker x_a2308 x_a2309 x_a230a)
    = [Database.Persist.Class.PersistField.SomePersistField x_a2308,
       Database.Persist.Class.PersistField.SomePersistField x_a2309,
       Database.Persist.Class.PersistField.SomePersistField x_a230a]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_a230c, x2_a230d, x3_a230e]
    = Record_Poker
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "date"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_a230c
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "amount"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_a230d
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x3_a230e
  Database.Persist.Class.PersistEntity.fromPersistValues x_a230b
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Poker: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_a230b))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Poker _date_a230f _amount_a230g _note_id_a230h)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_PokerId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_PokerId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Poker")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerDate
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "date")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "date")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerAmount
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "amount")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "amount")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Int")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_PokerId
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_a230i)
           key_a230j
           -> (Database.Persist.Class.PersistEntity.Entity key_a230j)
                value_a230i)
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerDate
    = (Database.Persist.TH.lensPTH
         (record_PokerDate
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a230k
                                                        value_a230l)
           x_a230m
           -> (Database.Persist.Class.PersistEntity.Entity key_a230k)
                value_a230l {record_PokerDate = x_a230m})
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerAmount
    = (Database.Persist.TH.lensPTH
         (record_PokerAmount
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a230k
                                                        value_a230l)
           x_a230m
           -> (Database.Persist.Class.PersistEntity.Entity key_a230k)
                value_a230l {record_PokerAmount = x_a230m})
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerNote_id
    = (Database.Persist.TH.lensPTH
         (record_PokerNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a230k
                                                        value_a230l)
           x_a230m
           -> (Database.Persist.Class.PersistEntity.Entity key_a230k)
                value_a230l {record_PokerNote_id = x_a230m})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Poker where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_PokerKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_PokerKey
migrateAll :: Database.Persist.Sql.Types.Migration
migrateAll
  = do let defs_a230n
             = [(((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Action")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "actions")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_ActionId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Action")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=actions"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "action")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "action")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "notes")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_NoteId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=notes"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Type")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "types")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_TypeId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Type")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=types"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "type")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "type")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "note_to_action")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=note_to_action"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64"))),
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "action_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "action_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_ActionId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Action")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "note_to_type")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=note_to_type"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64"))),
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "type_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "type_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_TypeId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Type")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Poker")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "data")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_PokerId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Poker")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=data"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "date")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "date")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference,
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "amount")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "amount")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Int")))
                             Database.Persist.Types.Base.SqlInt64)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference,
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False]
       (Database.Persist.Sql.Migration.migrate defs_a230n)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Action")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "actions")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_ActionId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Action")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=actions"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "action")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "action")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_a230n)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "notes")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_NoteId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=notes"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_a230n)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Type")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "types")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_TypeId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Type")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=types"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "type")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "type")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_a230n)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "note_to_action")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=note_to_action"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64"))),
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "action_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "action_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_ActionId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Action")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_a230n)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "note_to_type")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=note_to_type"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64"))),
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "type_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "type_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_TypeId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Type")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_a230n)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Poker")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "data")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_PokerId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Poker")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=data"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "date")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "date")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference,
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "amount")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "amount")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Int")))
                       Database.Persist.Types.Base.SqlInt64)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference,
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
-- /Users/scott/Poker/src/Poker.hs:(56,1)-(97,2): Splicing declarations
instance Database.Persist.Class.PersistField.PersistField Record_Action where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_a29oM
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["action"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_a29oM))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_a29oN
          -> let columns_a29oO = Data.HashMap.Strict.fromList x_a29oN
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_a29oP
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_a29oP))
                                   columns_a29oO
                             of
                               GHC.Maybe.Just v_a29oQ -> v_a29oQ
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["action"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Action where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_a29oR
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["note"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_a29oR))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_a29oS
          -> let columns_a29oT = Data.HashMap.Strict.fromList x_a29oS
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_a29oU
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_a29oU))
                                   columns_a29oT
                             of
                               GHC.Maybe.Just v_a29oV -> v_a29oV
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Type where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_a29oW
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["type"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_a29oW))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_a29oX
          -> let columns_a29oY = Data.HashMap.Strict.fromList x_a29oX
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_a29oZ
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_a29oZ))
                                   columns_a29oY
                             of
                               GHC.Maybe.Just v_a29p0 -> v_a29p0
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["type"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Type where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note_to_Action where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_a29p1
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["note_id", "action_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_a29p1))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_a29p2
          -> let columns_a29p3 = Data.HashMap.Strict.fromList x_a29p2
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_a29p4
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_a29p4))
                                   columns_a29p3
                             of
                               GHC.Maybe.Just v_a29p5 -> v_a29p5
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note_id", "action_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note_to_Action where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note_to_Type where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_a29p6
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["note_id", "type_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_a29p6))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_a29p7
          -> let columns_a29p8 = Data.HashMap.Strict.fromList x_a29p7
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_a29p9
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_a29p9))
                                   columns_a29p8
                             of
                               GHC.Maybe.Just v_a29pa -> v_a29pa
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note_id", "type_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note_to_Type where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Poker where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_a29pb
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["date", "amount", "note_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_a29pb))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_a29pc
          -> let columns_a29pd = Data.HashMap.Strict.fromList x_a29pc
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_a29pe
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_a29pe))
                                   columns_a29pd
                             of
                               GHC.Maybe.Just v_a29pf -> v_a29pf
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["date", "amount", "note_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Poker where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
data Record_Action
  = Record_Action {record_ActionAction :: !String}
  deriving (Show, Typeable)
type Record_ActionId =
    Database.Persist.Class.PersistEntity.Key Record_Action
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Action where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Action = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Action
  newtype Database.Persist.Class.PersistEntity.Key Record_Action
    = Record_ActionKey {unRecord_ActionKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Action typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Action =>
      Record_ActionId |
      typ Data.Type.Equality.~ String => Record_ActionAction
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_ActionKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_ActionKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Action")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "actions")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_ActionId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Action")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=actions"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "action")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "action")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Action x_a29pg)
    = [Database.Persist.Class.PersistField.SomePersistField x_a29pg]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_a29pi]
    = Record_Action
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "action"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_a29pi
  Database.Persist.Class.PersistEntity.fromPersistValues x_a29ph
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Action: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_a29ph))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Action _action_a29pj)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_ActionId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_ActionAction
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "action")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "action")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_ActionId
  Database.Persist.Class.PersistEntity.fieldLens Record_ActionId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_a29pk)
           key_a29pl
           -> (Database.Persist.Class.PersistEntity.Entity key_a29pl)
                value_a29pk)
  Database.Persist.Class.PersistEntity.fieldLens Record_ActionAction
    = (Database.Persist.TH.lensPTH
         (record_ActionAction
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a29pm
                                                        value_a29pn)
           x_a29po
           -> (Database.Persist.Class.PersistEntity.Entity key_a29pm)
                value_a29pn {record_ActionAction = x_a29po})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Action where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_ActionKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_ActionKey
data Record_Note
  = Record_Note {record_NoteNote :: !String}
  deriving (Show, Typeable)
type Record_NoteId =
    Database.Persist.Class.PersistEntity.Key Record_Note
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note
  newtype Database.Persist.Class.PersistEntity.Key Record_Note
    = Record_NoteKey {unRecord_NoteKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_NoteId |
      typ Data.Type.Equality.~ String => Record_NoteNote
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_NoteKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_NoteKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "notes")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_NoteId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=notes"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note x_a29pp)
    = [Database.Persist.Class.PersistField.SomePersistField x_a29pp]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_a29pr]
    = Record_Note
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_a29pr
  Database.Persist.Class.PersistEntity.fromPersistValues x_a29pq
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_a29pq))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note _note_a29ps)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_NoteId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_NoteNote
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField = Record_NoteId
  Database.Persist.Class.PersistEntity.fieldLens Record_NoteId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_a29pt)
           key_a29pu
           -> (Database.Persist.Class.PersistEntity.Entity key_a29pu)
                value_a29pt)
  Database.Persist.Class.PersistEntity.fieldLens Record_NoteNote
    = (Database.Persist.TH.lensPTH
         (record_NoteNote
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a29pv
                                                        value_a29pw)
           x_a29px
           -> (Database.Persist.Class.PersistEntity.Entity key_a29pv)
                value_a29pw {record_NoteNote = x_a29px})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note where
  Database.Persist.Class.PersistStore.toBackendKey = unRecord_NoteKey
  Database.Persist.Class.PersistStore.fromBackendKey = Record_NoteKey
data Record_Type
  = Record_Type {record_TypeType :: !String}
  deriving (Show, Typeable)
type Record_TypeId =
    Database.Persist.Class.PersistEntity.Key Record_Type
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Type where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Type = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Type
  newtype Database.Persist.Class.PersistEntity.Key Record_Type
    = Record_TypeKey {unRecord_TypeKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Type typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Type =>
      Record_TypeId |
      typ Data.Type.Equality.~ String => Record_TypeType
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_TypeKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_TypeKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Type")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "types")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_TypeId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Type")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=types"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "type")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "type")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Type x_a29py)
    = [Database.Persist.Class.PersistField.SomePersistField x_a29py]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_a29pA]
    = Record_Type
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "type"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_a29pA
  Database.Persist.Class.PersistEntity.fromPersistValues x_a29pz
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Type: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_a29pz))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Type _type_a29pB)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_TypeId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_TypeType
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "type")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "type")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField = Record_TypeId
  Database.Persist.Class.PersistEntity.fieldLens Record_TypeId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_a29pC)
           key_a29pD
           -> (Database.Persist.Class.PersistEntity.Entity key_a29pD)
                value_a29pC)
  Database.Persist.Class.PersistEntity.fieldLens Record_TypeType
    = (Database.Persist.TH.lensPTH
         (record_TypeType
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a29pE
                                                        value_a29pF)
           x_a29pG
           -> (Database.Persist.Class.PersistEntity.Entity key_a29pE)
                value_a29pF {record_TypeType = x_a29pG})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Type where
  Database.Persist.Class.PersistStore.toBackendKey = unRecord_TypeKey
  Database.Persist.Class.PersistStore.fromBackendKey = Record_TypeKey
data Record_Note_to_Action
  = Record_Note_to_Action {record_Note_to_ActionNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note),
                           record_Note_to_ActionAction_id :: !(Database.Persist.Class.PersistEntity.Key Record_Action)}
  deriving (Show, Typeable)
type Record_Note_to_ActionId =
    Database.Persist.Class.PersistEntity.Key Record_Note_to_Action
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note_to_Action where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note_to_Action = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note_to_Action
  newtype Database.Persist.Class.PersistEntity.Key Record_Note_to_Action
    = Record_Note_to_ActionKey {unRecord_Note_to_ActionKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note_to_Action typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note_to_Action =>
      Record_Note_to_ActionId |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_Note_to_ActionNote_id |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Action =>
      Record_Note_to_ActionAction_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_Note_to_ActionKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_Note_to_ActionKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "note_to_action")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=note_to_action"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64"))),
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "action_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "action_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_ActionId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Action")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note_to_Action x_a29pH x_a29pI)
    = [Database.Persist.Class.PersistField.SomePersistField x_a29pH,
       Database.Persist.Class.PersistField.SomePersistField x_a29pI]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_a29pK, x2_a29pL]
    = Record_Note_to_Action
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_a29pK
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "action_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_a29pL
  Database.Persist.Class.PersistEntity.fromPersistValues x_a29pJ
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note_to_Action: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_a29pJ))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note_to_Action _note_id_a29pM _action_id_a29pN)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note_to_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionAction_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "action_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "action_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_Note_to_ActionId
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_a29pO)
           key_a29pP
           -> (Database.Persist.Class.PersistEntity.Entity key_a29pP)
                value_a29pO)
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionNote_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_ActionNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a29pQ
                                                        value_a29pR)
           x_a29pS
           -> (Database.Persist.Class.PersistEntity.Entity key_a29pQ)
                value_a29pR {record_Note_to_ActionNote_id = x_a29pS})
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionAction_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_ActionAction_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a29pQ
                                                        value_a29pR)
           x_a29pS
           -> (Database.Persist.Class.PersistEntity.Entity key_a29pQ)
                value_a29pR {record_Note_to_ActionAction_id = x_a29pS})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note_to_Action where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_Note_to_ActionKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_Note_to_ActionKey
data Record_Note_to_Type
  = Record_Note_to_Type {record_Note_to_TypeNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note),
                         record_Note_to_TypeType_id :: !(Database.Persist.Class.PersistEntity.Key Record_Type)}
  deriving (Show, Typeable)
type Record_Note_to_TypeId =
    Database.Persist.Class.PersistEntity.Key Record_Note_to_Type
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note_to_Type where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note_to_Type = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note_to_Type
  newtype Database.Persist.Class.PersistEntity.Key Record_Note_to_Type
    = Record_Note_to_TypeKey {unRecord_Note_to_TypeKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note_to_Type typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note_to_Type =>
      Record_Note_to_TypeId |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_Note_to_TypeNote_id |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Type =>
      Record_Note_to_TypeType_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_Note_to_TypeKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_Note_to_TypeKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "note_to_type")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=note_to_type"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64"))),
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "type_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "type_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_TypeId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Type")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note_to_Type x_a29pT x_a29pU)
    = [Database.Persist.Class.PersistField.SomePersistField x_a29pT,
       Database.Persist.Class.PersistField.SomePersistField x_a29pU]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_a29pW, x2_a29pX]
    = Record_Note_to_Type
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_a29pW
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "type_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_a29pX
  Database.Persist.Class.PersistEntity.fromPersistValues x_a29pV
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note_to_Type: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_a29pV))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note_to_Type _note_id_a29pY _type_id_a29pZ)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note_to_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeType_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "type_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "type_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_Note_to_TypeId
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_a29q0)
           key_a29q1
           -> (Database.Persist.Class.PersistEntity.Entity key_a29q1)
                value_a29q0)
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeNote_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_TypeNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a29q2
                                                        value_a29q3)
           x_a29q4
           -> (Database.Persist.Class.PersistEntity.Entity key_a29q2)
                value_a29q3 {record_Note_to_TypeNote_id = x_a29q4})
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeType_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_TypeType_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a29q2
                                                        value_a29q3)
           x_a29q4
           -> (Database.Persist.Class.PersistEntity.Entity key_a29q2)
                value_a29q3 {record_Note_to_TypeType_id = x_a29q4})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note_to_Type where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_Note_to_TypeKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_Note_to_TypeKey
data Record_Poker
  = Record_Poker {record_PokerDate :: !String,
                  record_PokerAmount :: !Int,
                  record_PokerNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note)}
  deriving (Show, Typeable)
type Record_PokerId =
    Database.Persist.Class.PersistEntity.Key Record_Poker
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Poker where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Poker = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Poker
  newtype Database.Persist.Class.PersistEntity.Key Record_Poker
    = Record_PokerKey {unRecord_PokerKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Poker typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Poker =>
      Record_PokerId |
      typ Data.Type.Equality.~ String => Record_PokerDate |
      typ Data.Type.Equality.~ Int => Record_PokerAmount |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_PokerNote_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_PokerKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_PokerKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Poker")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "data")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_PokerId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Poker")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=data"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "date")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "date")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference,
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "amount")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "amount")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Int")))
                   Database.Persist.Types.Base.SqlInt64)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference,
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Poker x_a29q5 x_a29q6 x_a29q7)
    = [Database.Persist.Class.PersistField.SomePersistField x_a29q5,
       Database.Persist.Class.PersistField.SomePersistField x_a29q6,
       Database.Persist.Class.PersistField.SomePersistField x_a29q7]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_a29q9, x2_a29qa, x3_a29qb]
    = Record_Poker
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "date"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_a29q9
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "amount"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_a29qa
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x3_a29qb
  Database.Persist.Class.PersistEntity.fromPersistValues x_a29q8
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Poker: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_a29q8))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Poker _date_a29qc _amount_a29qd _note_id_a29qe)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_PokerId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_PokerId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Poker")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerDate
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "date")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "date")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerAmount
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "amount")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "amount")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Int")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_PokerId
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_a29qf)
           key_a29qg
           -> (Database.Persist.Class.PersistEntity.Entity key_a29qg)
                value_a29qf)
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerDate
    = (Database.Persist.TH.lensPTH
         (record_PokerDate
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a29qh
                                                        value_a29qi)
           x_a29qj
           -> (Database.Persist.Class.PersistEntity.Entity key_a29qh)
                value_a29qi {record_PokerDate = x_a29qj})
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerAmount
    = (Database.Persist.TH.lensPTH
         (record_PokerAmount
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a29qh
                                                        value_a29qi)
           x_a29qj
           -> (Database.Persist.Class.PersistEntity.Entity key_a29qh)
                value_a29qi {record_PokerAmount = x_a29qj})
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerNote_id
    = (Database.Persist.TH.lensPTH
         (record_PokerNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_a29qh
                                                        value_a29qi)
           x_a29qj
           -> (Database.Persist.Class.PersistEntity.Entity key_a29qh)
                value_a29qi {record_PokerNote_id = x_a29qj})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Poker where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_PokerKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_PokerKey
migrateAll :: Database.Persist.Sql.Types.Migration
migrateAll
  = do let defs_a29qk
             = [(((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Action")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "actions")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_ActionId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Action")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=actions"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "action")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "action")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "notes")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_NoteId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=notes"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Type")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "types")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_TypeId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Type")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=types"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "type")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "type")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "note_to_action")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=note_to_action"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64"))),
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "action_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "action_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_ActionId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Action")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "note_to_type")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=note_to_type"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64"))),
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "type_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "type_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_TypeId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Type")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Poker")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "data")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_PokerId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Poker")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=data"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "date")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "date")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference,
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "amount")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "amount")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Int")))
                             Database.Persist.Types.Base.SqlInt64)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference,
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False]
       (Database.Persist.Sql.Migration.migrate defs_a29qk)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Action")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "actions")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_ActionId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Action")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=actions"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "action")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "action")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_a29qk)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "notes")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_NoteId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=notes"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_a29qk)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Type")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "types")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_TypeId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Type")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=types"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "type")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "type")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_a29qk)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "note_to_action")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=note_to_action"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64"))),
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "action_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "action_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_ActionId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Action")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_a29qk)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "note_to_type")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=note_to_type"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64"))),
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "type_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "type_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_TypeId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Type")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_a29qk)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Poker")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "data")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_PokerId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Poker")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=data"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "date")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "date")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference,
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "amount")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "amount")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Int")))
                       Database.Persist.Types.Base.SqlInt64)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference,
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
-- /Users/scott/Poker/src/Poker.hs:(56,1)-(97,2): Splicing declarations
instance Database.Persist.Class.PersistField.PersistField Record_Action where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_aLAP1
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["action"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_aLAP1))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_aLAP2
          -> let columns_aLAP3 = Data.HashMap.Strict.fromList x_aLAP2
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_aLAP4
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_aLAP4))
                                   columns_aLAP3
                             of
                               GHC.Maybe.Just v_aLAP5 -> v_aLAP5
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["action"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Action where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_aLAP6
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["note"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_aLAP6))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_aLAP7
          -> let columns_aLAP8 = Data.HashMap.Strict.fromList x_aLAP7
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_aLAP9
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_aLAP9))
                                   columns_aLAP8
                             of
                               GHC.Maybe.Just v_aLAPa -> v_aLAPa
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Type where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_aLAPb
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["type"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_aLAPb))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_aLAPc
          -> let columns_aLAPd = Data.HashMap.Strict.fromList x_aLAPc
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_aLAPe
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_aLAPe))
                                   columns_aLAPd
                             of
                               GHC.Maybe.Just v_aLAPf -> v_aLAPf
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["type"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Type where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note_to_Action where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_aLAPg
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["note_id", "action_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_aLAPg))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_aLAPh
          -> let columns_aLAPi = Data.HashMap.Strict.fromList x_aLAPh
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_aLAPj
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_aLAPj))
                                   columns_aLAPi
                             of
                               GHC.Maybe.Just v_aLAPk -> v_aLAPk
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note_id", "action_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note_to_Action where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note_to_Type where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_aLAPl
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["note_id", "type_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_aLAPl))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_aLAPm
          -> let columns_aLAPn = Data.HashMap.Strict.fromList x_aLAPm
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_aLAPo
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_aLAPo))
                                   columns_aLAPn
                             of
                               GHC.Maybe.Just v_aLAPp -> v_aLAPp
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note_id", "type_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note_to_Type where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Poker where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_aLAPq
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["date", "amount", "note_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_aLAPq))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_aLAPr
          -> let columns_aLAPs = Data.HashMap.Strict.fromList x_aLAPr
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_aLAPt
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_aLAPt))
                                   columns_aLAPs
                             of
                               GHC.Maybe.Just v_aLAPu -> v_aLAPu
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["date", "amount", "note_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Poker where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
data Record_Action
  = Record_Action {record_ActionAction :: !String}
  deriving (Show, Typeable)
type Record_ActionId =
    Database.Persist.Class.PersistEntity.Key Record_Action
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Action where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Action = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Action
  newtype Database.Persist.Class.PersistEntity.Key Record_Action
    = Record_ActionKey {unRecord_ActionKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Action typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Action =>
      Record_ActionId |
      typ Data.Type.Equality.~ String => Record_ActionAction
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_ActionKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_ActionKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Action")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "actions")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_ActionId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Action")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=actions"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "action")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "action")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Action x_aLAPv)
    = [Database.Persist.Class.PersistField.SomePersistField x_aLAPv]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_aLAPx]
    = Record_Action
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "action"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_aLAPx
  Database.Persist.Class.PersistEntity.fromPersistValues x_aLAPw
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Action: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_aLAPw))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Action _action_aLAPy)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_ActionId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_ActionAction
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "action")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "action")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_ActionId
  Database.Persist.Class.PersistEntity.fieldLens Record_ActionId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_aLAPz)
           key_aLAPA
           -> (Database.Persist.Class.PersistEntity.Entity key_aLAPA)
                value_aLAPz)
  Database.Persist.Class.PersistEntity.fieldLens Record_ActionAction
    = (Database.Persist.TH.lensPTH
         (record_ActionAction
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aLAPB
                                                        value_aLAPC)
           x_aLAPD
           -> (Database.Persist.Class.PersistEntity.Entity key_aLAPB)
                value_aLAPC {record_ActionAction = x_aLAPD})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Action where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_ActionKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_ActionKey
data Record_Note
  = Record_Note {record_NoteNote :: !String}
  deriving (Show, Typeable)
type Record_NoteId =
    Database.Persist.Class.PersistEntity.Key Record_Note
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note
  newtype Database.Persist.Class.PersistEntity.Key Record_Note
    = Record_NoteKey {unRecord_NoteKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_NoteId |
      typ Data.Type.Equality.~ String => Record_NoteNote
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_NoteKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_NoteKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "notes")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_NoteId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=notes"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note x_aLAPE)
    = [Database.Persist.Class.PersistField.SomePersistField x_aLAPE]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_aLAPG]
    = Record_Note
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_aLAPG
  Database.Persist.Class.PersistEntity.fromPersistValues x_aLAPF
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_aLAPF))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note _note_aLAPH)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_NoteId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_NoteNote
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField = Record_NoteId
  Database.Persist.Class.PersistEntity.fieldLens Record_NoteId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_aLAPI)
           key_aLAPJ
           -> (Database.Persist.Class.PersistEntity.Entity key_aLAPJ)
                value_aLAPI)
  Database.Persist.Class.PersistEntity.fieldLens Record_NoteNote
    = (Database.Persist.TH.lensPTH
         (record_NoteNote
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aLAPK
                                                        value_aLAPL)
           x_aLAPM
           -> (Database.Persist.Class.PersistEntity.Entity key_aLAPK)
                value_aLAPL {record_NoteNote = x_aLAPM})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note where
  Database.Persist.Class.PersistStore.toBackendKey = unRecord_NoteKey
  Database.Persist.Class.PersistStore.fromBackendKey = Record_NoteKey
data Record_Type
  = Record_Type {record_TypeType :: !String}
  deriving (Show, Typeable)
type Record_TypeId =
    Database.Persist.Class.PersistEntity.Key Record_Type
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Type where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Type = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Type
  newtype Database.Persist.Class.PersistEntity.Key Record_Type
    = Record_TypeKey {unRecord_TypeKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Type typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Type =>
      Record_TypeId |
      typ Data.Type.Equality.~ String => Record_TypeType
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_TypeKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_TypeKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Type")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "types")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_TypeId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Type")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=types"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "type")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "type")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Type x_aLAPN)
    = [Database.Persist.Class.PersistField.SomePersistField x_aLAPN]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_aLAPP]
    = Record_Type
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "type"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_aLAPP
  Database.Persist.Class.PersistEntity.fromPersistValues x_aLAPO
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Type: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_aLAPO))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Type _type_aLAPQ)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_TypeId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_TypeType
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "type")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "type")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField = Record_TypeId
  Database.Persist.Class.PersistEntity.fieldLens Record_TypeId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_aLAPR)
           key_aLAPS
           -> (Database.Persist.Class.PersistEntity.Entity key_aLAPS)
                value_aLAPR)
  Database.Persist.Class.PersistEntity.fieldLens Record_TypeType
    = (Database.Persist.TH.lensPTH
         (record_TypeType
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aLAPT
                                                        value_aLAPU)
           x_aLAPV
           -> (Database.Persist.Class.PersistEntity.Entity key_aLAPT)
                value_aLAPU {record_TypeType = x_aLAPV})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Type where
  Database.Persist.Class.PersistStore.toBackendKey = unRecord_TypeKey
  Database.Persist.Class.PersistStore.fromBackendKey = Record_TypeKey
data Record_Note_to_Action
  = Record_Note_to_Action {record_Note_to_ActionNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note),
                           record_Note_to_ActionAction_id :: !(Database.Persist.Class.PersistEntity.Key Record_Action)}
  deriving (Show, Typeable)
type Record_Note_to_ActionId =
    Database.Persist.Class.PersistEntity.Key Record_Note_to_Action
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note_to_Action where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note_to_Action = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note_to_Action
  newtype Database.Persist.Class.PersistEntity.Key Record_Note_to_Action
    = Record_Note_to_ActionKey {unRecord_Note_to_ActionKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note_to_Action typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note_to_Action =>
      Record_Note_to_ActionId |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_Note_to_ActionNote_id |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Action =>
      Record_Note_to_ActionAction_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_Note_to_ActionKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_Note_to_ActionKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "note_to_action")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=note_to_action"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64"))),
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "action_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "action_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_ActionId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Action")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note_to_Action x_aLAPW x_aLAPX)
    = [Database.Persist.Class.PersistField.SomePersistField x_aLAPW,
       Database.Persist.Class.PersistField.SomePersistField x_aLAPX]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_aLAPZ, x2_aLAQ0]
    = Record_Note_to_Action
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_aLAPZ
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "action_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_aLAQ0
  Database.Persist.Class.PersistEntity.fromPersistValues x_aLAPY
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note_to_Action: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_aLAPY))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note_to_Action _note_id_aLAQ1 _action_id_aLAQ2)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note_to_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionAction_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "action_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "action_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_Note_to_ActionId
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_aLAQ3)
           key_aLAQ4
           -> (Database.Persist.Class.PersistEntity.Entity key_aLAQ4)
                value_aLAQ3)
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionNote_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_ActionNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aLAQ5
                                                        value_aLAQ6)
           x_aLAQ7
           -> (Database.Persist.Class.PersistEntity.Entity key_aLAQ5)
                value_aLAQ6 {record_Note_to_ActionNote_id = x_aLAQ7})
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionAction_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_ActionAction_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aLAQ5
                                                        value_aLAQ6)
           x_aLAQ7
           -> (Database.Persist.Class.PersistEntity.Entity key_aLAQ5)
                value_aLAQ6 {record_Note_to_ActionAction_id = x_aLAQ7})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note_to_Action where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_Note_to_ActionKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_Note_to_ActionKey
data Record_Note_to_Type
  = Record_Note_to_Type {record_Note_to_TypeNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note),
                         record_Note_to_TypeType_id :: !(Database.Persist.Class.PersistEntity.Key Record_Type)}
  deriving (Show, Typeable)
type Record_Note_to_TypeId =
    Database.Persist.Class.PersistEntity.Key Record_Note_to_Type
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note_to_Type where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note_to_Type = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note_to_Type
  newtype Database.Persist.Class.PersistEntity.Key Record_Note_to_Type
    = Record_Note_to_TypeKey {unRecord_Note_to_TypeKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note_to_Type typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note_to_Type =>
      Record_Note_to_TypeId |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_Note_to_TypeNote_id |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Type =>
      Record_Note_to_TypeType_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_Note_to_TypeKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_Note_to_TypeKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "note_to_type")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=note_to_type"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64"))),
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "type_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "type_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_TypeId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Type")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note_to_Type x_aLAQ8 x_aLAQ9)
    = [Database.Persist.Class.PersistField.SomePersistField x_aLAQ8,
       Database.Persist.Class.PersistField.SomePersistField x_aLAQ9]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_aLAQb, x2_aLAQc]
    = Record_Note_to_Type
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_aLAQb
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "type_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_aLAQc
  Database.Persist.Class.PersistEntity.fromPersistValues x_aLAQa
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note_to_Type: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_aLAQa))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note_to_Type _note_id_aLAQd _type_id_aLAQe)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note_to_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeType_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "type_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "type_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_Note_to_TypeId
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_aLAQf)
           key_aLAQg
           -> (Database.Persist.Class.PersistEntity.Entity key_aLAQg)
                value_aLAQf)
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeNote_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_TypeNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aLAQh
                                                        value_aLAQi)
           x_aLAQj
           -> (Database.Persist.Class.PersistEntity.Entity key_aLAQh)
                value_aLAQi {record_Note_to_TypeNote_id = x_aLAQj})
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeType_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_TypeType_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aLAQh
                                                        value_aLAQi)
           x_aLAQj
           -> (Database.Persist.Class.PersistEntity.Entity key_aLAQh)
                value_aLAQi {record_Note_to_TypeType_id = x_aLAQj})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note_to_Type where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_Note_to_TypeKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_Note_to_TypeKey
data Record_Poker
  = Record_Poker {record_PokerDate :: !String,
                  record_PokerAmount :: !Int,
                  record_PokerNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note)}
  deriving (Show, Typeable)
type Record_PokerId =
    Database.Persist.Class.PersistEntity.Key Record_Poker
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Poker where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Poker = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Poker
  newtype Database.Persist.Class.PersistEntity.Key Record_Poker
    = Record_PokerKey {unRecord_PokerKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Poker typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Poker =>
      Record_PokerId |
      typ Data.Type.Equality.~ String => Record_PokerDate |
      typ Data.Type.Equality.~ Int => Record_PokerAmount |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_PokerNote_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_PokerKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_PokerKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Poker")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "data")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_PokerId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Poker")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=data"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "date")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "date")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference,
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "amount")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "amount")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Int")))
                   Database.Persist.Types.Base.SqlInt64)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference,
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Poker x_aLAQk x_aLAQl x_aLAQm)
    = [Database.Persist.Class.PersistField.SomePersistField x_aLAQk,
       Database.Persist.Class.PersistField.SomePersistField x_aLAQl,
       Database.Persist.Class.PersistField.SomePersistField x_aLAQm]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_aLAQo, x2_aLAQp, x3_aLAQq]
    = Record_Poker
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "date"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_aLAQo
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "amount"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_aLAQp
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x3_aLAQq
  Database.Persist.Class.PersistEntity.fromPersistValues x_aLAQn
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Poker: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_aLAQn))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Poker _date_aLAQr _amount_aLAQs _note_id_aLAQt)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_PokerId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_PokerId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Poker")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerDate
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "date")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "date")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerAmount
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "amount")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "amount")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Int")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_PokerId
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_aLAQu)
           key_aLAQv
           -> (Database.Persist.Class.PersistEntity.Entity key_aLAQv)
                value_aLAQu)
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerDate
    = (Database.Persist.TH.lensPTH
         (record_PokerDate
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aLAQw
                                                        value_aLAQx)
           x_aLAQy
           -> (Database.Persist.Class.PersistEntity.Entity key_aLAQw)
                value_aLAQx {record_PokerDate = x_aLAQy})
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerAmount
    = (Database.Persist.TH.lensPTH
         (record_PokerAmount
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aLAQw
                                                        value_aLAQx)
           x_aLAQy
           -> (Database.Persist.Class.PersistEntity.Entity key_aLAQw)
                value_aLAQx {record_PokerAmount = x_aLAQy})
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerNote_id
    = (Database.Persist.TH.lensPTH
         (record_PokerNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aLAQw
                                                        value_aLAQx)
           x_aLAQy
           -> (Database.Persist.Class.PersistEntity.Entity key_aLAQw)
                value_aLAQx {record_PokerNote_id = x_aLAQy})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Poker where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_PokerKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_PokerKey
migrateAll :: Database.Persist.Sql.Types.Migration
migrateAll
  = do let defs_aLAQz
             = [(((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Action")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "actions")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_ActionId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Action")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=actions"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "action")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "action")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "notes")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_NoteId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=notes"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Type")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "types")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_TypeId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Type")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=types"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "type")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "type")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "note_to_action")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=note_to_action"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64"))),
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "action_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "action_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_ActionId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Action")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "note_to_type")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=note_to_type"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64"))),
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "type_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "type_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_TypeId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Type")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Poker")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "data")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_PokerId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Poker")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=data"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "date")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "date")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference,
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "amount")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "amount")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Int")))
                             Database.Persist.Types.Base.SqlInt64)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference,
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False]
       (Database.Persist.Sql.Migration.migrate defs_aLAQz)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Action")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "actions")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_ActionId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Action")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=actions"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "action")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "action")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_aLAQz)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "notes")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_NoteId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=notes"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_aLAQz)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Type")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "types")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_TypeId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Type")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=types"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "type")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "type")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_aLAQz)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "note_to_action")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=note_to_action"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64"))),
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "action_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "action_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_ActionId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Action")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_aLAQz)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "note_to_type")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=note_to_type"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64"))),
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "type_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "type_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_TypeId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Type")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_aLAQz)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Poker")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "data")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_PokerId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Poker")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=data"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "date")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "date")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference,
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "amount")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "amount")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Int")))
                       Database.Persist.Types.Base.SqlInt64)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference,
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
-- /Users/scott/Poker/src/Poker.hs:(56,1)-(97,2): Splicing declarations
instance Database.Persist.Class.PersistField.PersistField Record_Action where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_aLPGW
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["action"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_aLPGW))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_aLPGX
          -> let columns_aLPGY = Data.HashMap.Strict.fromList x_aLPGX
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_aLPGZ
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_aLPGZ))
                                   columns_aLPGY
                             of
                               GHC.Maybe.Just v_aLPH0 -> v_aLPH0
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["action"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Action where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_aLPH1
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["note"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_aLPH1))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_aLPH2
          -> let columns_aLPH3 = Data.HashMap.Strict.fromList x_aLPH2
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_aLPH4
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_aLPH4))
                                   columns_aLPH3
                             of
                               GHC.Maybe.Just v_aLPH5 -> v_aLPH5
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Type where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_aLPH6
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip ((GHC.Base.map Data.Text.pack) ["type"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_aLPH6))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_aLPH7
          -> let columns_aLPH8 = Data.HashMap.Strict.fromList x_aLPH7
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_aLPH9
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_aLPH9))
                                   columns_aLPH8
                             of
                               GHC.Maybe.Just v_aLPHa -> v_aLPHa
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["type"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Type where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note_to_Action where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_aLPHb
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["note_id", "action_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_aLPHb))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_aLPHc
          -> let columns_aLPHd = Data.HashMap.Strict.fromList x_aLPHc
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_aLPHe
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_aLPHe))
                                   columns_aLPHd
                             of
                               GHC.Maybe.Just v_aLPHf -> v_aLPHf
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note_id", "action_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note_to_Action where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Note_to_Type where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_aLPHg
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["note_id", "type_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_aLPHg))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_aLPHh
          -> let columns_aLPHi = Data.HashMap.Strict.fromList x_aLPHh
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_aLPHj
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_aLPHj))
                                   columns_aLPHi
                             of
                               GHC.Maybe.Just v_aLPHk -> v_aLPHk
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["note_id", "type_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Note_to_Type where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
instance Database.Persist.Class.PersistField.PersistField Record_Poker where
  Database.Persist.Class.PersistField.toPersistValue
    = \ ent_aLPHl
        -> (Database.Persist.Types.Base.PersistMap
              GHC.Base.$
                (GHC.List.zip
                   ((GHC.Base.map Data.Text.pack) ["date", "amount", "note_id"]))
                  (GHC.Base.map Database.Persist.Class.PersistField.toPersistValue
                     GHC.Base.$
                       Database.Persist.Class.PersistEntity.toPersistFields ent_aLPHl))
  Database.Persist.Class.PersistField.fromPersistValue
    = ((\ x_aLPHm
          -> let columns_aLPHn = Data.HashMap.Strict.fromList x_aLPHm
             in
               (Database.Persist.Class.PersistEntity.fromPersistValues
                  GHC.Base.$
                    (GHC.Base.map
                       (\ name_aLPHo
                          -> case
                                 (Data.HashMap.Base.lookup (Data.Text.pack name_aLPHo))
                                   columns_aLPHn
                             of
                               GHC.Maybe.Just v_aLPHp -> v_aLPHp
                               GHC.Maybe.Nothing -> Database.Persist.Types.Base.PersistNull)
                       GHC.Base.$ ["date", "amount", "note_id"])))
         Control.Monad.<=<
           Database.Persist.Class.PersistField.getPersistMap)
instance Database.Persist.Sql.Class.PersistFieldSql Record_Poker where
  Database.Persist.Sql.Class.sqlType _
    = Database.Persist.Types.Base.SqlString
data Record_Action
  = Record_Action {record_ActionAction :: !String}
  deriving (Show, Typeable)
type Record_ActionId =
    Database.Persist.Class.PersistEntity.Key Record_Action
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Action where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Action = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Action
  newtype Database.Persist.Class.PersistEntity.Key Record_Action
    = Record_ActionKey {unRecord_ActionKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Action typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Action =>
      Record_ActionId |
      typ Data.Type.Equality.~ String => Record_ActionAction
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_ActionKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_ActionKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Action")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "actions")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_ActionId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Action")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=actions"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "action")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "action")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Action x_aLPHq)
    = [Database.Persist.Class.PersistField.SomePersistField x_aLPHq]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_aLPHs]
    = Record_Action
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "action"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_aLPHs
  Database.Persist.Class.PersistEntity.fromPersistValues x_aLPHr
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Action: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_aLPHr))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Action _action_aLPHt)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_ActionId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_ActionAction
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "action")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "action")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_ActionId
  Database.Persist.Class.PersistEntity.fieldLens Record_ActionId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_aLPHu)
           key_aLPHv
           -> (Database.Persist.Class.PersistEntity.Entity key_aLPHv)
                value_aLPHu)
  Database.Persist.Class.PersistEntity.fieldLens Record_ActionAction
    = (Database.Persist.TH.lensPTH
         (record_ActionAction
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aLPHw
                                                        value_aLPHx)
           x_aLPHy
           -> (Database.Persist.Class.PersistEntity.Entity key_aLPHw)
                value_aLPHx {record_ActionAction = x_aLPHy})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Action where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_ActionKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_ActionKey
data Record_Note
  = Record_Note {record_NoteNote :: !String}
  deriving (Show, Typeable)
type Record_NoteId =
    Database.Persist.Class.PersistEntity.Key Record_Note
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note
  newtype Database.Persist.Class.PersistEntity.Key Record_Note
    = Record_NoteKey {unRecord_NoteKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_NoteId |
      typ Data.Type.Equality.~ String => Record_NoteNote
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_NoteKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_NoteKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "notes")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_NoteId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=notes"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note x_aLPHz)
    = [Database.Persist.Class.PersistField.SomePersistField x_aLPHz]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_aLPHB]
    = Record_Note
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_aLPHB
  Database.Persist.Class.PersistEntity.fromPersistValues x_aLPHA
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_aLPHA))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note _note_aLPHC)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_NoteId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_NoteNote
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField = Record_NoteId
  Database.Persist.Class.PersistEntity.fieldLens Record_NoteId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_aLPHD)
           key_aLPHE
           -> (Database.Persist.Class.PersistEntity.Entity key_aLPHE)
                value_aLPHD)
  Database.Persist.Class.PersistEntity.fieldLens Record_NoteNote
    = (Database.Persist.TH.lensPTH
         (record_NoteNote
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aLPHF
                                                        value_aLPHG)
           x_aLPHH
           -> (Database.Persist.Class.PersistEntity.Entity key_aLPHF)
                value_aLPHG {record_NoteNote = x_aLPHH})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note where
  Database.Persist.Class.PersistStore.toBackendKey = unRecord_NoteKey
  Database.Persist.Class.PersistStore.fromBackendKey = Record_NoteKey
data Record_Type
  = Record_Type {record_TypeType :: !String}
  deriving (Show, Typeable)
type Record_TypeId =
    Database.Persist.Class.PersistEntity.Key Record_Type
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Type where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Type = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Type
  newtype Database.Persist.Class.PersistEntity.Key Record_Type
    = Record_TypeKey {unRecord_TypeKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Type typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Type =>
      Record_TypeId |
      typ Data.Type.Equality.~ String => Record_TypeType
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_TypeKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_TypeKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Type")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "types")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_TypeId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Type")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=types"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "type")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "type")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Type x_aLPHI)
    = [Database.Persist.Class.PersistField.SomePersistField x_aLPHI]
  Database.Persist.Class.PersistEntity.fromPersistValues [x1_aLPHK]
    = Record_Type
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "type"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_aLPHK
  Database.Persist.Class.PersistEntity.fromPersistValues x_aLPHJ
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Type: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_aLPHJ))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Type _type_aLPHL)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_TypeId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_TypeType
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "type")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "type")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistIdField = Record_TypeId
  Database.Persist.Class.PersistEntity.fieldLens Record_TypeId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_aLPHM)
           key_aLPHN
           -> (Database.Persist.Class.PersistEntity.Entity key_aLPHN)
                value_aLPHM)
  Database.Persist.Class.PersistEntity.fieldLens Record_TypeType
    = (Database.Persist.TH.lensPTH
         (record_TypeType
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aLPHO
                                                        value_aLPHP)
           x_aLPHQ
           -> (Database.Persist.Class.PersistEntity.Entity key_aLPHO)
                value_aLPHP {record_TypeType = x_aLPHQ})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Type where
  Database.Persist.Class.PersistStore.toBackendKey = unRecord_TypeKey
  Database.Persist.Class.PersistStore.fromBackendKey = Record_TypeKey
data Record_Note_to_Action
  = Record_Note_to_Action {record_Note_to_ActionNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note),
                           record_Note_to_ActionAction_id :: !(Database.Persist.Class.PersistEntity.Key Record_Action)}
  deriving (Show, Typeable)
type Record_Note_to_ActionId =
    Database.Persist.Class.PersistEntity.Key Record_Note_to_Action
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note_to_Action where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note_to_Action = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note_to_Action
  newtype Database.Persist.Class.PersistEntity.Key Record_Note_to_Action
    = Record_Note_to_ActionKey {unRecord_Note_to_ActionKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note_to_Action typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note_to_Action =>
      Record_Note_to_ActionId |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_Note_to_ActionNote_id |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Action =>
      Record_Note_to_ActionAction_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_Note_to_ActionKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_Note_to_ActionKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "note_to_action")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=note_to_action"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64"))),
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "action_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "action_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_ActionId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Action")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note_to_Action x_aLPHR x_aLPHS)
    = [Database.Persist.Class.PersistField.SomePersistField x_aLPHR,
       Database.Persist.Class.PersistField.SomePersistField x_aLPHS]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_aLPHU, x2_aLPHV]
    = Record_Note_to_Action
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_aLPHU
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "action_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_aLPHV
  Database.Persist.Class.PersistEntity.fromPersistValues x_aLPHT
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note_to_Action: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_aLPHT))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note_to_Action _note_id_aLPHW _action_id_aLPHX)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note_to_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_ActionAction_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "action_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "action_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_ActionId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Action")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_Note_to_ActionId
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_aLPHY)
           key_aLPHZ
           -> (Database.Persist.Class.PersistEntity.Entity key_aLPHZ)
                value_aLPHY)
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionNote_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_ActionNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aLPI0
                                                        value_aLPI1)
           x_aLPI2
           -> (Database.Persist.Class.PersistEntity.Entity key_aLPI0)
                value_aLPI1 {record_Note_to_ActionNote_id = x_aLPI2})
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_ActionAction_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_ActionAction_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aLPI0
                                                        value_aLPI1)
           x_aLPI2
           -> (Database.Persist.Class.PersistEntity.Entity key_aLPI0)
                value_aLPI1 {record_Note_to_ActionAction_id = x_aLPI2})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note_to_Action where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_Note_to_ActionKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_Note_to_ActionKey
data Record_Note_to_Type
  = Record_Note_to_Type {record_Note_to_TypeNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note),
                         record_Note_to_TypeType_id :: !(Database.Persist.Class.PersistEntity.Key Record_Type)}
  deriving (Show, Typeable)
type Record_Note_to_TypeId =
    Database.Persist.Class.PersistEntity.Key Record_Note_to_Type
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Note_to_Type where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Note_to_Type = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Note_to_Type
  newtype Database.Persist.Class.PersistEntity.Key Record_Note_to_Type
    = Record_Note_to_TypeKey {unRecord_Note_to_TypeKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Note_to_Type typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note_to_Type =>
      Record_Note_to_TypeId |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_Note_to_TypeNote_id |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Type =>
      Record_Note_to_TypeType_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_Note_to_TypeKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_Note_to_TypeKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "note_to_type")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=note_to_type"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64"))),
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "type_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "type_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_TypeId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Type")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Note_to_Type x_aLPI3 x_aLPI4)
    = [Database.Persist.Class.PersistField.SomePersistField x_aLPI3,
       Database.Persist.Class.PersistField.SomePersistField x_aLPI4]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_aLPI6, x2_aLPI7]
    = Record_Note_to_Type
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_aLPI6
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "type_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_aLPI7
  Database.Persist.Class.PersistEntity.fromPersistValues x_aLPI5
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Note_to_Type: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_aLPI5))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Note_to_Type _note_id_aLPI8 _type_id_aLPI9)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note_to_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_Note_to_TypeType_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "type_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "type_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_TypeId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Type")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_Note_to_TypeId
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_aLPIa)
           key_aLPIb
           -> (Database.Persist.Class.PersistEntity.Entity key_aLPIb)
                value_aLPIa)
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeNote_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_TypeNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aLPIc
                                                        value_aLPId)
           x_aLPIe
           -> (Database.Persist.Class.PersistEntity.Entity key_aLPIc)
                value_aLPId {record_Note_to_TypeNote_id = x_aLPIe})
  Database.Persist.Class.PersistEntity.fieldLens
    Record_Note_to_TypeType_id
    = (Database.Persist.TH.lensPTH
         (record_Note_to_TypeType_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aLPIc
                                                        value_aLPId)
           x_aLPIe
           -> (Database.Persist.Class.PersistEntity.Entity key_aLPIc)
                value_aLPId {record_Note_to_TypeType_id = x_aLPIe})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Note_to_Type where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_Note_to_TypeKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_Note_to_TypeKey
data Record_Poker
  = Record_Poker {record_PokerDate :: !String,
                  record_PokerAmount :: !Int,
                  record_PokerNote_id :: !(Database.Persist.Class.PersistEntity.Key Record_Note)}
  deriving (Show, Typeable)
type Record_PokerId =
    Database.Persist.Class.PersistEntity.Key Record_Poker
instance Database.Persist.Class.PersistEntity.PersistEntity Record_Poker where
  type Database.Persist.Class.PersistEntity.PersistEntityBackend Record_Poker = Database.Persist.Sql.Types.Internal.SqlBackend
  data Database.Persist.Class.PersistEntity.Unique Record_Poker
  newtype Database.Persist.Class.PersistEntity.Key Record_Poker
    = Record_PokerKey {unRecord_PokerKey :: (Database.Persist.Class.PersistStore.BackendKey Database.Persist.Sql.Types.Internal.SqlBackend)}
    deriving (GHC.Show.Show,
              GHC.Read.Read,
              GHC.Classes.Eq,
              GHC.Classes.Ord,
              Web.PathPieces.PathPiece,
              Web.Internal.HttpApiData.ToHttpApiData,
              Web.Internal.HttpApiData.FromHttpApiData,
              Database.Persist.Class.PersistField.PersistField,
              Database.Persist.Sql.Class.PersistFieldSql,
              Data.Aeson.Types.ToJSON.ToJSON,
              Data.Aeson.Types.FromJSON.FromJSON)
  data Database.Persist.Class.PersistEntity.EntityField Record_Poker typ
    = typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Poker =>
      Record_PokerId |
      typ Data.Type.Equality.~ String => Record_PokerDate |
      typ Data.Type.Equality.~ Int => Record_PokerAmount |
      typ
      Data.Type.Equality.~
      Database.Persist.Class.PersistEntity.Key Record_Note =>
      Record_PokerNote_id
  Database.Persist.Class.PersistEntity.keyToValues
    = ((: [])
         GHC.Base..
           (Database.Persist.Class.PersistField.toPersistValue
              GHC.Base.. unRecord_PokerKey))
  Database.Persist.Class.PersistEntity.keyFromValues
    = (GHC.Base.fmap Record_PokerKey
         GHC.Base..
           (Database.Persist.Class.PersistField.fromPersistValue
              GHC.Base.. Database.Persist.TH.headNote))
  Database.Persist.Class.PersistEntity.entityDef _
    = (((((((((Database.Persist.Types.Base.EntityDef
                 (Database.Persist.Types.Base.HaskellName
                    (Database.Persist.TH.packPTH "Record_Poker")))
                (Database.Persist.Types.Base.DBName
                   (Database.Persist.TH.packPTH "data")))
               (((((((Database.Persist.Types.Base.FieldDef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Id")))
                       (Database.Persist.Types.Base.DBName
                          (Database.Persist.TH.packPTH "id")))
                      ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                         (Database.Persist.TH.packPTH "Record_PokerId")))
                     Database.Persist.Types.Base.SqlInt64)
                    [])
                   GHC.Types.True)
                  ((Database.Persist.Types.Base.ForeignRef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "Record_Poker")))
                     ((Database.Persist.Types.Base.FTTypeCon
                         (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                        (Database.Persist.TH.packPTH "Int64")))))
              [Database.Persist.TH.packPTH "sql=data"])
             [((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "date")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "date")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "String")))
                   Database.Persist.Types.Base.SqlString)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference,
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "amount")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "amount")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Int")))
                   Database.Persist.Types.Base.SqlInt64)
                  [])
                 GHC.Types.True)
                Database.Persist.Types.Base.NoReference,
              ((((((Database.Persist.Types.Base.FieldDef
                      (Database.Persist.Types.Base.HaskellName
                         (Database.Persist.TH.packPTH "note_id")))
                     (Database.Persist.Types.Base.DBName
                        (Database.Persist.TH.packPTH "note_id")))
                    ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                       (Database.Persist.TH.packPTH "Record_NoteId")))
                   (Database.Persist.Sql.Class.sqlType
                      (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                  [])
                 GHC.Types.True)
                ((Database.Persist.Types.Base.ForeignRef
                    (Database.Persist.Types.Base.HaskellName
                       (Database.Persist.TH.packPTH "Record_Note")))
                   ((Database.Persist.Types.Base.FTTypeCon
                       (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                      (Database.Persist.TH.packPTH "Int64")))])
            [])
           [])
          [Database.Persist.TH.packPTH "Show",
           Database.Persist.TH.packPTH "Typeable"])
         (Data.Map.Internal.fromList []))
        GHC.Types.False
  Database.Persist.Class.PersistEntity.toPersistFields
    (Record_Poker x_aLPIf x_aLPIg x_aLPIh)
    = [Database.Persist.Class.PersistField.SomePersistField x_aLPIf,
       Database.Persist.Class.PersistField.SomePersistField x_aLPIg,
       Database.Persist.Class.PersistField.SomePersistField x_aLPIh]
  Database.Persist.Class.PersistEntity.fromPersistValues
    [x1_aLPIj, x2_aLPIk, x3_aLPIl]
    = Record_Poker
        Data.Functor.<$>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "date"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x1_aLPIj
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "amount"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x2_aLPIk
        GHC.Base.<*>
          (Database.Persist.TH.mapLeft
             (Database.Persist.TH.fieldError
                (Database.Persist.TH.packPTH "note_id"))
             GHC.Base.. Database.Persist.Class.PersistField.fromPersistValue)
            x3_aLPIl
  Database.Persist.Class.PersistEntity.fromPersistValues x_aLPIi
    = (Data.Either.Left
         GHC.Base.$
           (GHC.Base.mappend
              (Database.Persist.TH.packPTH
                 "Record_Poker: fromPersistValues failed on: "))
             (Data.Text.pack GHC.Base.$ GHC.Show.show x_aLPIi))
  Database.Persist.Class.PersistEntity.persistUniqueToFieldNames _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueToValues _
    = GHC.Err.error "Degenerate case, should never happen"
  Database.Persist.Class.PersistEntity.persistUniqueKeys
    (Record_Poker _date_aLPIm _amount_aLPIn _note_id_aLPIo)
    = []
  Database.Persist.Class.PersistEntity.persistFieldDef Record_PokerId
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "Id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_PokerId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Poker")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerDate
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "date")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "date")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "String")))
           Database.Persist.Types.Base.SqlString)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerAmount
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "amount")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "amount")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Int")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        Database.Persist.Types.Base.NoReference
  Database.Persist.Class.PersistEntity.persistFieldDef
    Record_PokerNote_id
    = ((((((Database.Persist.Types.Base.FieldDef
              (Database.Persist.Types.Base.HaskellName
                 (Database.Persist.TH.packPTH "note_id")))
             (Database.Persist.Types.Base.DBName
                (Database.Persist.TH.packPTH "note_id")))
            ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
               (Database.Persist.TH.packPTH "Record_NoteId")))
           Database.Persist.Types.Base.SqlInt64)
          [])
         GHC.Types.True)
        ((Database.Persist.Types.Base.ForeignRef
            (Database.Persist.Types.Base.HaskellName
               (Database.Persist.TH.packPTH "Record_Note")))
           ((Database.Persist.Types.Base.FTTypeCon
               (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
              (Database.Persist.TH.packPTH "Int64")))
  Database.Persist.Class.PersistEntity.persistIdField
    = Record_PokerId
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerId
    = (Database.Persist.TH.lensPTH
         Database.Persist.Class.PersistEntity.entityKey)
        (\ (Database.Persist.Class.PersistEntity.Entity _ value_aLPIp)
           key_aLPIq
           -> (Database.Persist.Class.PersistEntity.Entity key_aLPIq)
                value_aLPIp)
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerDate
    = (Database.Persist.TH.lensPTH
         (record_PokerDate
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aLPIr
                                                        value_aLPIs)
           x_aLPIt
           -> (Database.Persist.Class.PersistEntity.Entity key_aLPIr)
                value_aLPIs {record_PokerDate = x_aLPIt})
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerAmount
    = (Database.Persist.TH.lensPTH
         (record_PokerAmount
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aLPIr
                                                        value_aLPIs)
           x_aLPIt
           -> (Database.Persist.Class.PersistEntity.Entity key_aLPIr)
                value_aLPIs {record_PokerAmount = x_aLPIt})
  Database.Persist.Class.PersistEntity.fieldLens Record_PokerNote_id
    = (Database.Persist.TH.lensPTH
         (record_PokerNote_id
            GHC.Base.. Database.Persist.Class.PersistEntity.entityVal))
        (\ (Database.Persist.Class.PersistEntity.Entity key_aLPIr
                                                        value_aLPIs)
           x_aLPIt
           -> (Database.Persist.Class.PersistEntity.Entity key_aLPIr)
                value_aLPIs {record_PokerNote_id = x_aLPIt})
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Record_Poker where
  Database.Persist.Class.PersistStore.toBackendKey
    = unRecord_PokerKey
  Database.Persist.Class.PersistStore.fromBackendKey
    = Record_PokerKey
migrateAll :: Database.Persist.Sql.Types.Migration
migrateAll
  = do let defs_aLPIu
             = [(((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Action")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "actions")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_ActionId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Action")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=actions"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "action")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "action")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "notes")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_NoteId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=notes"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Type")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "types")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_TypeId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Type")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=types"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "type")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "type")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "note_to_action")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=note_to_action"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64"))),
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "action_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "action_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_ActionId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Action")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "note_to_type")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=note_to_type"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64"))),
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "type_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "type_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_TypeId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Type")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False,
                (((((((((Database.Persist.Types.Base.EntityDef
                           (Database.Persist.Types.Base.HaskellName
                              (Database.Persist.TH.packPTH "Record_Poker")))
                          (Database.Persist.Types.Base.DBName
                             (Database.Persist.TH.packPTH "data")))
                         (((((((Database.Persist.Types.Base.FieldDef
                                  (Database.Persist.Types.Base.HaskellName
                                     (Database.Persist.TH.packPTH "Id")))
                                 (Database.Persist.Types.Base.DBName
                                    (Database.Persist.TH.packPTH "id")))
                                ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                   (Database.Persist.TH.packPTH "Record_PokerId")))
                               Database.Persist.Types.Base.SqlInt64)
                              [])
                             GHC.Types.True)
                            ((Database.Persist.Types.Base.ForeignRef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "Record_Poker")))
                               ((Database.Persist.Types.Base.FTTypeCon
                                   (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                  (Database.Persist.TH.packPTH "Int64")))))
                        [Database.Persist.TH.packPTH "sql=data"])
                       [((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "date")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "date")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "String")))
                             Database.Persist.Types.Base.SqlString)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference,
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "amount")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "amount")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Int")))
                             Database.Persist.Types.Base.SqlInt64)
                            [])
                           GHC.Types.True)
                          Database.Persist.Types.Base.NoReference,
                        ((((((Database.Persist.Types.Base.FieldDef
                                (Database.Persist.Types.Base.HaskellName
                                   (Database.Persist.TH.packPTH "note_id")))
                               (Database.Persist.Types.Base.DBName
                                  (Database.Persist.TH.packPTH "note_id")))
                              ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                                 (Database.Persist.TH.packPTH "Record_NoteId")))
                             (Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           GHC.Types.True)
                          ((Database.Persist.Types.Base.ForeignRef
                              (Database.Persist.Types.Base.HaskellName
                                 (Database.Persist.TH.packPTH "Record_Note")))
                             ((Database.Persist.Types.Base.FTTypeCon
                                 (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                                (Database.Persist.TH.packPTH "Int64")))])
                      [])
                     [])
                    [Database.Persist.TH.packPTH "Show",
                     Database.Persist.TH.packPTH "Typeable"])
                   (Data.Map.Internal.fromList []))
                  GHC.Types.False]
       (Database.Persist.Sql.Migration.migrate defs_aLPIu)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Action")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "actions")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_ActionId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Action")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=actions"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "action")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "action")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_aLPIu)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "notes")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_NoteId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=notes"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_aLPIu)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Type")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "types")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_TypeId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Type")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=types"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "type")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "type")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_aLPIu)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "note_to_action")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_Note_to_ActionId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note_to_Action")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=note_to_action"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64"))),
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "action_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "action_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_ActionId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Action")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_aLPIu)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "note_to_type")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_Note_to_TypeId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Note_to_Type")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=note_to_type"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64"))),
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "type_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "type_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_TypeId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Type")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
       (Database.Persist.Sql.Migration.migrate defs_aLPIu)
         ((((((((((Database.Persist.Types.Base.EntityDef
                     (Database.Persist.Types.Base.HaskellName
                        (Database.Persist.TH.packPTH "Record_Poker")))
                    (Database.Persist.Types.Base.DBName
                       (Database.Persist.TH.packPTH "data")))
                   (((((((Database.Persist.Types.Base.FieldDef
                            (Database.Persist.Types.Base.HaskellName
                               (Database.Persist.TH.packPTH "Id")))
                           (Database.Persist.Types.Base.DBName
                              (Database.Persist.TH.packPTH "id")))
                          ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                             (Database.Persist.TH.packPTH "Record_PokerId")))
                         Database.Persist.Types.Base.SqlInt64)
                        [])
                       GHC.Types.True)
                      ((Database.Persist.Types.Base.ForeignRef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "Record_Poker")))
                         ((Database.Persist.Types.Base.FTTypeCon
                             (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                            (Database.Persist.TH.packPTH "Int64")))))
                  [Database.Persist.TH.packPTH "sql=data"])
                 [((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "date")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "date")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "String")))
                       Database.Persist.Types.Base.SqlString)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference,
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "amount")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "amount")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Int")))
                       Database.Persist.Types.Base.SqlInt64)
                      [])
                     GHC.Types.True)
                    Database.Persist.Types.Base.NoReference,
                  ((((((Database.Persist.Types.Base.FieldDef
                          (Database.Persist.Types.Base.HaskellName
                             (Database.Persist.TH.packPTH "note_id")))
                         (Database.Persist.Types.Base.DBName
                            (Database.Persist.TH.packPTH "note_id")))
                        ((Database.Persist.Types.Base.FTTypeCon GHC.Maybe.Nothing)
                           (Database.Persist.TH.packPTH "Record_NoteId")))
                       (Database.Persist.Sql.Class.sqlType
                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     GHC.Types.True)
                    ((Database.Persist.Types.Base.ForeignRef
                        (Database.Persist.Types.Base.HaskellName
                           (Database.Persist.TH.packPTH "Record_Note")))
                       ((Database.Persist.Types.Base.FTTypeCon
                           (GHC.Maybe.Just (Database.Persist.TH.packPTH "Data.Int")))
                          (Database.Persist.TH.packPTH "Int64")))])
                [])
               [])
              [Database.Persist.TH.packPTH "Show",
               Database.Persist.TH.packPTH "Typeable"])
             (Data.Map.Internal.fromList []))
            GHC.Types.False)
